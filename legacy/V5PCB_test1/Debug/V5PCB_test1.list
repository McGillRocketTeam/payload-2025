
V5PCB_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  0800eda8  0800eda8  0000fda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f69c  0800f69c  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f69c  0800f69c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a4  0800f6a4  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a4  0800f6a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f6a8  0800f6a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800f6ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067b8  200001f0  0800f89c  000111f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200069a8  0800f89c  000119a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cad  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  00028ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f0  00000000  00000000  0002db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270b6  00000000  00000000  0002ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1df  00000000  00000000  00055ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6654  00000000  00000000  00071ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f0  00000000  00000000  0015855c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015f74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ed8c 	.word	0x0800ed8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800ed8c 	.word	0x0800ed8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9c0 	b.w	8001060 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f85c 	bl	8000da4 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b82a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f825 	bl	8000d68 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_f2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	f7ff fc2d 	bl	8000588 <__aeabi_f2d>
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__aeabi_f2ulz+0x38>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	4606      	mov	r6, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	f7ff fc7f 	bl	8000638 <__aeabi_dmul>
 8000d3a:	f7ff ff55 	bl	8000be8 <__aeabi_d2uiz>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	f7ff fc00 	bl	8000544 <__aeabi_ui2d>
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <__aeabi_f2ulz+0x3c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f7ff fc76 	bl	8000638 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4630      	mov	r0, r6
 8000d52:	4639      	mov	r1, r7
 8000d54:	f7ff fab8 	bl	80002c8 <__aeabi_dsub>
 8000d58:	f7ff ff46 	bl	8000be8 <__aeabi_d2uiz>
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d60:	3df00000 	.word	0x3df00000
 8000d64:	41f00000 	.word	0x41f00000

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc61 	bl	8000638 <__aeabi_dmul>
 8000d76:	f7ff ff37 	bl	8000be8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbe2 	bl	8000544 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc58 	bl	8000638 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa9a 	bl	80002c8 <__aeabi_dsub>
 8000d94:	f7ff ff28 	bl	8000be8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	460c      	mov	r4, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14e      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db0:	4694      	mov	ip, r2
 8000db2:	458c      	cmp	ip, r1
 8000db4:	4686      	mov	lr, r0
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	d962      	bls.n	8000e82 <__udivmoddi4+0xde>
 8000dbc:	b14a      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f f68c 	uxth.w	r6, ip
 8000dda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb07 1114 	mls	r1, r7, r4, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb04 f106 	mul.w	r1, r4, r6
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dfa:	f080 8112 	bcs.w	8001022 <__udivmoddi4+0x27e>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 810f 	bls.w	8001022 <__udivmoddi4+0x27e>
 8000e04:	3c02      	subs	r4, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a59      	subs	r1, r3, r1
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e12:	fb07 1110 	mls	r1, r7, r0, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f606 	mul.w	r6, r0, r6
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x94>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e2a:	f080 80fc 	bcs.w	8001026 <__udivmoddi4+0x282>
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	f240 80f9 	bls.w	8001026 <__udivmoddi4+0x282>
 8000e34:	4463      	add	r3, ip
 8000e36:	3802      	subs	r0, #2
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e3e:	2100      	movs	r1, #0
 8000e40:	b11d      	cbz	r5, 8000e4a <__udivmoddi4+0xa6>
 8000e42:	40d3      	lsrs	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	e9c5 3200 	strd	r3, r2, [r5]
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d905      	bls.n	8000e5e <__udivmoddi4+0xba>
 8000e52:	b10d      	cbz	r5, 8000e58 <__udivmoddi4+0xb4>
 8000e54:	e9c5 0100 	strd	r0, r1, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e7f5      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e5e:	fab3 f183 	clz	r1, r3
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d146      	bne.n	8000ef4 <__udivmoddi4+0x150>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xcc>
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	f0c0 80f0 	bcc.w	8001050 <__udivmoddi4+0x2ac>
 8000e70:	1a86      	subs	r6, r0, r2
 8000e72:	eb64 0303 	sbc.w	r3, r4, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d0e6      	beq.n	8000e4a <__udivmoddi4+0xa6>
 8000e7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e80:	e7e3      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x204>
 8000e88:	eba1 040c 	sub.w	r4, r1, ip
 8000e8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e90:	fa1f f78c 	uxth.w	r7, ip
 8000e94:	2101      	movs	r1, #1
 8000e96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb07 f006 	mul.w	r0, r7, r6
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x11c>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x11a>
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2b4>
 8000ebe:	4626      	mov	r6, r4
 8000ec0:	1a1c      	subs	r4, r3, r0
 8000ec2:	fa1f f38e 	uxth.w	r3, lr
 8000ec6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eca:	fb08 4410 	mls	r4, r8, r0, r4
 8000ece:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed2:	fb00 f707 	mul.w	r7, r0, r7
 8000ed6:	429f      	cmp	r7, r3
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x148>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ee2:	d202      	bcs.n	8000eea <__udivmoddi4+0x146>
 8000ee4:	429f      	cmp	r7, r3
 8000ee6:	f200 80b0 	bhi.w	800104a <__udivmoddi4+0x2a6>
 8000eea:	4620      	mov	r0, r4
 8000eec:	1bdb      	subs	r3, r3, r7
 8000eee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ef2:	e7a5      	b.n	8000e40 <__udivmoddi4+0x9c>
 8000ef4:	f1c1 0620 	rsb	r6, r1, #32
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	fa22 f706 	lsr.w	r7, r2, r6
 8000efe:	431f      	orrs	r7, r3
 8000f00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f04:	fa04 f301 	lsl.w	r3, r4, r1
 8000f08:	ea43 030c 	orr.w	r3, r3, ip
 8000f0c:	40f4      	lsrs	r4, r6
 8000f0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f12:	0c38      	lsrs	r0, r7, #16
 8000f14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f18:	fbb4 fef0 	udiv	lr, r4, r0
 8000f1c:	fa1f fc87 	uxth.w	ip, r7
 8000f20:	fb00 441e 	mls	r4, r0, lr, r4
 8000f24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f28:	fb0e f90c 	mul.w	r9, lr, ip
 8000f2c:	45a1      	cmp	r9, r4
 8000f2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f32:	d90a      	bls.n	8000f4a <__udivmoddi4+0x1a6>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f3a:	f080 8084 	bcs.w	8001046 <__udivmoddi4+0x2a2>
 8000f3e:	45a1      	cmp	r9, r4
 8000f40:	f240 8081 	bls.w	8001046 <__udivmoddi4+0x2a2>
 8000f44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	eba4 0409 	sub.w	r4, r4, r9
 8000f4e:	fa1f f983 	uxth.w	r9, r3
 8000f52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f56:	fb00 4413 	mls	r4, r0, r3, r4
 8000f5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f62:	45a4      	cmp	ip, r4
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x1d2>
 8000f66:	193c      	adds	r4, r7, r4
 8000f68:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f6c:	d267      	bcs.n	800103e <__udivmoddi4+0x29a>
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	d965      	bls.n	800103e <__udivmoddi4+0x29a>
 8000f72:	3b02      	subs	r3, #2
 8000f74:	443c      	add	r4, r7
 8000f76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f7e:	eba4 040c 	sub.w	r4, r4, ip
 8000f82:	429c      	cmp	r4, r3
 8000f84:	46ce      	mov	lr, r9
 8000f86:	469c      	mov	ip, r3
 8000f88:	d351      	bcc.n	800102e <__udivmoddi4+0x28a>
 8000f8a:	d04e      	beq.n	800102a <__udivmoddi4+0x286>
 8000f8c:	b155      	cbz	r5, 8000fa4 <__udivmoddi4+0x200>
 8000f8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f92:	eb64 040c 	sbc.w	r4, r4, ip
 8000f96:	fa04 f606 	lsl.w	r6, r4, r6
 8000f9a:	40cb      	lsrs	r3, r1
 8000f9c:	431e      	orrs	r6, r3
 8000f9e:	40cc      	lsrs	r4, r1
 8000fa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	e750      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000fa8:	f1c2 0320 	rsb	r3, r2, #32
 8000fac:	fa20 f103 	lsr.w	r1, r0, r3
 8000fb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fb8:	4094      	lsls	r4, r2
 8000fba:	430c      	orrs	r4, r1
 8000fbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fc4:	fa1f f78c 	uxth.w	r7, ip
 8000fc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fd0:	0c23      	lsrs	r3, r4, #16
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb00 f107 	mul.w	r1, r0, r7
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x24c>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fe6:	d22c      	bcs.n	8001042 <__udivmoddi4+0x29e>
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	d92a      	bls.n	8001042 <__udivmoddi4+0x29e>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	1a5b      	subs	r3, r3, r1
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ff8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001000:	fb01 f307 	mul.w	r3, r1, r7
 8001004:	42a3      	cmp	r3, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x276>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001010:	d213      	bcs.n	800103a <__udivmoddi4+0x296>
 8001012:	42a3      	cmp	r3, r4
 8001014:	d911      	bls.n	800103a <__udivmoddi4+0x296>
 8001016:	3902      	subs	r1, #2
 8001018:	4464      	add	r4, ip
 800101a:	1ae4      	subs	r4, r4, r3
 800101c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001020:	e739      	b.n	8000e96 <__udivmoddi4+0xf2>
 8001022:	4604      	mov	r4, r0
 8001024:	e6f0      	b.n	8000e08 <__udivmoddi4+0x64>
 8001026:	4608      	mov	r0, r1
 8001028:	e706      	b.n	8000e38 <__udivmoddi4+0x94>
 800102a:	45c8      	cmp	r8, r9
 800102c:	d2ae      	bcs.n	8000f8c <__udivmoddi4+0x1e8>
 800102e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001032:	eb63 0c07 	sbc.w	ip, r3, r7
 8001036:	3801      	subs	r0, #1
 8001038:	e7a8      	b.n	8000f8c <__udivmoddi4+0x1e8>
 800103a:	4631      	mov	r1, r6
 800103c:	e7ed      	b.n	800101a <__udivmoddi4+0x276>
 800103e:	4603      	mov	r3, r0
 8001040:	e799      	b.n	8000f76 <__udivmoddi4+0x1d2>
 8001042:	4630      	mov	r0, r6
 8001044:	e7d4      	b.n	8000ff0 <__udivmoddi4+0x24c>
 8001046:	46d6      	mov	lr, sl
 8001048:	e77f      	b.n	8000f4a <__udivmoddi4+0x1a6>
 800104a:	4463      	add	r3, ip
 800104c:	3802      	subs	r0, #2
 800104e:	e74d      	b.n	8000eec <__udivmoddi4+0x148>
 8001050:	4606      	mov	r6, r0
 8001052:	4623      	mov	r3, r4
 8001054:	4608      	mov	r0, r1
 8001056:	e70f      	b.n	8000e78 <__udivmoddi4+0xd4>
 8001058:	3e02      	subs	r6, #2
 800105a:	4463      	add	r3, ip
 800105c:	e730      	b.n	8000ec0 <__udivmoddi4+0x11c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <formatMsg1>:

  uint32_t seconds;
};

uint64_t formatMsg1(bool isSampling, float frqX, float frqY, float frqZ, float ampX, float ampY)
{
 8001064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001068:	b0a2      	sub	sp, #136	@ 0x88
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
 8001072:	edc7 0a11 	vstr	s1, [r7, #68]	@ 0x44
 8001076:	ed87 1a10 	vstr	s2, [r7, #64]	@ 0x40
 800107a:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 800107e:	ed87 2a0e 	vstr	s4, [r7, #56]	@ 0x38
 8001082:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint64_t formattedMsg1;

  uint64_t samplingBit; //"converting" a boolean to a 0 or 1
  if (isSampling == true)
 8001086:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <formatMsg1+0x38>
  {
    samplingBit = 1;
 800108e:	f04f 0201 	mov.w	r2, #1
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800109a:	e005      	b.n	80010a8 <formatMsg1+0x44>
  }
  else
  {
    samplingBit = 0;
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  }
  // round the frequencies to the nearest unit before shifting
  uint64_t roundedFrqZ = roundf(frqZ);
 80010a8:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80010ac:	f00d fe4a 	bl	800ed44 <roundf>
 80010b0:	ee10 3a10 	vmov	r3, s0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe37 	bl	8000d28 <__aeabi_f2ulz>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  if (frqZ > 16383)
 80010c2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010c6:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80012ec <formatMsg1+0x288>
 80010ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	dd05      	ble.n	80010e0 <formatMsg1+0x7c>
    roundedFrqZ = 16383; // use 11111111111111 to indicate overflow
 80010d4:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t roundedFrqY = roundf(frqY);
 80010e0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80010e4:	f00d fe2e 	bl	800ed44 <roundf>
 80010e8:	ee10 3a10 	vmov	r3, s0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe1b 	bl	8000d28 <__aeabi_f2ulz>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  if (frqY > 16383)
 80010fa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010fe:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80012ec <formatMsg1+0x288>
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd05      	ble.n	8001118 <formatMsg1+0xb4>
    roundedFrqY = 16383; // use 11111111111111 to indicate overflow
 800110c:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  uint64_t roundedFrqX = roundf(frqX);
 8001118:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800111c:	f00d fe12 	bl	800ed44 <roundf>
 8001120:	ee10 3a10 	vmov	r3, s0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fdff 	bl	8000d28 <__aeabi_f2ulz>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  if (frqX > 16383)
 8001132:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001136:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80012ec <formatMsg1+0x288>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	dd05      	ble.n	8001150 <formatMsg1+0xec>
    roundedFrqX = 16383; // use 11111111111111 to indicate overflow
 8001144:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  // Value is x100 and %100 at groundstation to get 2 decimal places. Max value is 37m/s^2 with gain 4.34x, so we x13 to use full 511 range
  uint64_t roundedAmpX = roundf(ampX * 100 * 13);
 8001150:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001154:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80012f0 <formatMsg1+0x28c>
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	eeb0 0a67 	vmov.f32	s0, s15
 8001168:	f00d fdec 	bl	800ed44 <roundf>
 800116c:	ee10 3a10 	vmov	r3, s0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fdd9 	bl	8000d28 <__aeabi_f2ulz>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  if (roundedAmpX > 511)
 800117e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001182:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8001186:	f173 0300 	sbcs.w	r3, r3, #0
 800118a:	d305      	bcc.n	8001198 <formatMsg1+0x134>
    roundedAmpX = 511; // use 11111111 to indicate overflow
 800118c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  // Value is x100 and %100 at groundstation to get 2 decimal places. Max value is 80.5m/s^2 with gain 2x, so we x6 to use full 511 range
  uint64_t roundedAmpY = roundf(ampY * 100 * 6);
 8001198:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800119c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80012f0 <formatMsg1+0x28c>
 80011a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a4:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f00d fdc8 	bl	800ed44 <roundf>
 80011b4:	ee10 3a10 	vmov	r3, s0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fdb5 	bl	8000d28 <__aeabi_f2ulz>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  if (roundedAmpY > 511)
 80011c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80011ca:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80011ce:	f173 0300 	sbcs.w	r3, r3, #0
 80011d2:	d305      	bcc.n	80011e0 <formatMsg1+0x17c>
    roundedAmpY = 511; // use 11111111 to indicate overflow
 80011d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  formattedMsg1 =
      (samplingBit) | ((roundedFrqX & 16383) << 1) | ((roundedFrqY & 16383) << 15) | ((roundedFrqZ & 16383) << 29) | ((roundedAmpX & 511) << 46) | ((roundedAmpY & 511) << 55);
 80011e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80011e4:	1891      	adds	r1, r2, r2
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	415b      	adcs	r3, r3
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f0:	f022 0801 	bic.w	r8, r2, #1
 80011f4:	ea4f 4848 	mov.w	r8, r8, lsl #17
 80011f8:	ea4f 4858 	mov.w	r8, r8, lsr #17
 80011fc:	f04f 0900 	mov.w	r9, #0
 8001200:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001204:	ea48 0102 	orr.w	r1, r8, r2
 8001208:	6339      	str	r1, [r7, #48]	@ 0x30
 800120a:	ea49 0303 	orr.w	r3, r9, r3
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001210:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f04f 0100 	mov.w	r1, #0
 800121c:	03d9      	lsls	r1, r3, #15
 800121e:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
 8001222:	03d0      	lsls	r0, r2, #15
 8001224:	f020 4a60 	bic.w	sl, r0, #3758096384	@ 0xe0000000
 8001228:	f42a 4aff 	bic.w	sl, sl, #32640	@ 0x7f80
 800122c:	f02a 0a7f 	bic.w	sl, sl, #127	@ 0x7f
 8001230:	f04f 0b00 	mov.w	fp, #0
 8001234:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001238:	460b      	mov	r3, r1
 800123a:	ea43 030a 	orr.w	r3, r3, sl
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001240:	4613      	mov	r3, r2
 8001242:	ea43 030b 	orr.w	r3, r3, fp
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001248:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800124c:	f04f 0000 	mov.w	r0, #0
 8001250:	f04f 0100 	mov.w	r1, #0
 8001254:	0759      	lsls	r1, r3, #29
 8001256:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800125a:	0750      	lsls	r0, r2, #29
 800125c:	f000 4360 	and.w	r3, r0, #3758096384	@ 0xe0000000
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	f3c1 030a 	ubfx	r3, r1, #0, #11
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
 8001268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800126c:	4643      	mov	r3, r8
 800126e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001272:	4602      	mov	r2, r0
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	464b      	mov	r3, r9
 800127a:	460a      	mov	r2, r1
 800127c:	4313      	orrs	r3, r2
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	0383      	lsls	r3, r0, #14
 800128e:	2200      	movs	r2, #0
 8001290:	2400      	movs	r4, #0
 8001292:	f023 457f 	bic.w	r5, r3, #4278190080	@ 0xff000000
 8001296:	f425 0500 	bic.w	r5, r5, #8388608	@ 0x800000
 800129a:	f425 557f 	bic.w	r5, r5, #16320	@ 0x3fc0
 800129e:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 80012a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80012a6:	460b      	mov	r3, r1
 80012a8:	4323      	orrs	r3, r4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	4613      	mov	r3, r2
 80012ae:	432b      	orrs	r3, r5
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	05c3      	lsls	r3, r0, #23
 80012c0:	2200      	movs	r2, #0
  formattedMsg1 =
 80012c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012c6:	4621      	mov	r1, r4
 80012c8:	4311      	orrs	r1, r2
 80012ca:	6039      	str	r1, [r7, #0]
 80012cc:	4629      	mov	r1, r5
 80012ce:	4319      	orrs	r1, r3
 80012d0:	6079      	str	r1, [r7, #4]
 80012d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012d6:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
  return formattedMsg1;
 80012da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
}
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	3788      	adds	r7, #136	@ 0x88
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012ea:	bf00      	nop
 80012ec:	467ffc00 	.word	0x467ffc00
 80012f0:	42c80000 	.word	0x42c80000

080012f4 <formatMsg2>:

uint64_t formatMsg2(float ampZ, uint32_t seconds)
{
 80012f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f8:	b08c      	sub	sp, #48	@ 0x30
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	ed87 0a05 	vstr	s0, [r7, #20]
 8001300:	6138      	str	r0, [r7, #16]
  uint64_t formattedMsg2;
  // Value is x100 and %100 at groundstation to get 2 decimal places. Max value is 161m/s^2 with gain 1x, so we x3 to use full 511 range
  uint64_t roundedAmpZ = roundf(ampZ * 100 * 3); // Data on grounstation is scaled by 3,6,13 times compared to SD card
 8001302:	edd7 7a05 	vldr	s15, [r7, #20]
 8001306:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80013e4 <formatMsg2+0xf0>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f00d fd13 	bl	800ed44 <roundf>
 800131e:	ee10 3a10 	vmov	r3, s0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd00 	bl	8000d28 <__aeabi_f2ulz>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  if (roundedAmpZ > 511)
 8001330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001334:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8001338:	f173 0300 	sbcs.w	r3, r3, #0
 800133c:	d305      	bcc.n	800134a <formatMsg2+0x56>
    roundedAmpZ = 511; // use 11111111 to indicate overflow
 800133e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t formattedSeconds = 0;
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (seconds > 32768)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800135c:	d909      	bls.n	8001372 <formatMsg2+0x7e>
  { // Overflow seconds back to zero if it reaches more than 15 bits.
    formattedSeconds = seconds - 32768;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001364:	2200      	movs	r2, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	60fa      	str	r2, [r7, #12]
 800136a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }
  if (seconds > 65535)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001378:	d306      	bcc.n	8001388 <formatMsg2+0x94>
  { // if we are still over 15 bits then fix the value (this happens after 65,536 seconds
    formattedSeconds = 32767;
 800137a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001386:	e007      	b.n	8001398 <formatMsg2+0xa4>
  }
  else
  {
    formattedSeconds = (uint64_t)seconds;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2200      	movs	r2, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001394:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }
  formattedMsg2 = (formattedSeconds & 32767) | ((roundedAmpZ & 511) << 15) | (0 << 24);
 8001398:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800139c:	f3c2 080e 	ubfx	r8, r2, #0, #15
 80013a0:	f04f 0900 	mov.w	r9, #0
 80013a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	03cb      	lsls	r3, r1, #15
 80013b2:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 80013b6:	03c2      	lsls	r2, r0, #15
 80013b8:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
 80013bc:	f424 44ff 	bic.w	r4, r4, #32640	@ 0x7f80
 80013c0:	f024 047f 	bic.w	r4, r4, #127	@ 0x7f
 80013c4:	2500      	movs	r5, #0
 80013c6:	ea48 0a04 	orr.w	sl, r8, r4
 80013ca:	ea49 0b05 	orr.w	fp, r9, r5
 80013ce:	e9c7 ab06 	strd	sl, fp, [r7, #24]
  return formattedMsg2;
 80013d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	3730      	adds	r7, #48	@ 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013e2:	bf00      	nop
 80013e4:	42c80000 	.word	0x42c80000

080013e8 <buildMsg>:

void buildMsg(union my_msg *uMsg1, union my_msg *uMsg2, struct Data dt)
{
 80013e8:	b082      	sub	sp, #8
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
 80013f4:	f107 0120 	add.w	r1, r7, #32
 80013f8:	e881 000c 	stmia.w	r1, {r2, r3}

  uint64_t msg1 = formatMsg1(dt.isSampling, dt.frqX, dt.frqY, dt.frqZ, dt.ampX, dt.ampY);
 80013fc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001400:	edd7 7a08 	vldr	s15, [r7, #32]
 8001404:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001408:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800140c:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 8001410:	edd7 5a0c 	vldr	s11, [r7, #48]	@ 0x30
 8001414:	eeb0 2a65 	vmov.f32	s4, s11
 8001418:	eef0 1a46 	vmov.f32	s3, s12
 800141c:	eeb0 1a66 	vmov.f32	s2, s13
 8001420:	eef0 0a47 	vmov.f32	s1, s14
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe1b 	bl	8001064 <formatMsg1>
 800142e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  uint64_t msg2 = formatMsg2(dt.ampZ, dt.seconds);
 8001432:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001438:	4618      	mov	r0, r3
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	f7ff ff59 	bl	80012f4 <formatMsg2>
 8001442:	e9c7 0102 	strd	r0, r1, [r7, #8]
  uMsg1->msg = msg1;
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
  uMsg2->msg = msg2;
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001464:	b002      	add	sp, #8
 8001466:	4770      	bx	lr

08001468 <create_new_filename>:

// Function to create a new file with an incremented number
void create_new_filename(char *filename, const char *basename, const char *extension)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	@ 0x38
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  UINT num = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  FILINFO fno;
  while (1)
  {
    snprintf(filename, 32, "%s%d.%s", basename, num, extension);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <create_new_filename+0x48>)
 8001484:	2120      	movs	r1, #32
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f009 ff2a 	bl	800b2e0 <sniprintf>
    if (f_stat(filename, &fno) != FR_OK)
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f009 f825 	bl	800a4e2 <f_stat>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <create_new_filename+0x3e>
    {
      // File doesn't exist
      break;
    }
    num++;
 800149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a0:	3301      	adds	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(filename, 32, "%s%d.%s", basename, num, extension);
 80014a4:	e7e8      	b.n	8001478 <create_new_filename+0x10>
      break;
 80014a6:	bf00      	nop
  }
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800eda8 	.word	0x0800eda8

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	f5ad 5d94 	sub.w	sp, sp, #4736	@ 0x1280
 80014bc:	b085      	sub	sp, #20
 80014be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f001 fde6 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 fd06 	bl	8001ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f001 f82a 	bl	8002520 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f000 fff8 	bl	80024c0 <MX_DMA_Init>
  MX_SPI1_Init();
 80014d0:	f000 ff04 	bl	80022dc <MX_SPI1_Init>
  MX_UART4_Init();
 80014d4:	f000 ffca 	bl	800246c <MX_UART4_Init>
  MX_FATFS_Init();
 80014d8:	f006 f902 	bl	80076e0 <MX_FATFS_Init>
  MX_TIM14_Init();
 80014dc:	f000 ffa2 	bl	8002424 <MX_TIM14_Init>
  MX_TIM13_Init();
 80014e0:	f000 ff7e 	bl	80023e0 <MX_TIM13_Init>
  MX_ADC1_Init();
 80014e4:	f000 fd62 	bl	8001fac <MX_ADC1_Init>
  MX_ADC2_Init();
 80014e8:	f000 fdb2 	bl	8002050 <MX_ADC2_Init>
  MX_ADC3_Init();
 80014ec:	f000 fe02 	bl	80020f4 <MX_ADC3_Init>
  MX_CAN1_Init();
 80014f0:	f000 fe52 	bl	8002198 <MX_CAN1_Init>
  MX_TIM2_Init();
 80014f4:	f000 ff28 	bl	8002348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ Starting... ~\r\n\r\n");
 80014f8:	48b7      	ldr	r0, [pc, #732]	@ (80017d8 <main+0x324>)
 80014fa:	f001 f94d 	bl	8002798 <myprintf>

  HAL_GPIO_WritePin(LED_INIT_GPIO_Port, LED_INIT_Pin, GPIO_PIN_RESET); // Init LED Off
 80014fe:	2200      	movs	r2, #0
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	48b6      	ldr	r0, [pc, #728]	@ (80017dc <main+0x328>)
 8001504:	f003 ffb0 	bl	8005468 <HAL_GPIO_WritePin>

  HAL_Delay(1000); // a short delay is important to let the SD card settle
 8001508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150c:	f001 fe32 	bl	8003174 <HAL_Delay>

  /* Start the CAN peripheral */
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001516:	f102 021f 	add.w	r2, r2, #31
 800151a:	7013      	strb	r3, [r2, #0]
  status = HAL_CAN_Start(&hcan1);
 800151c:	48b0      	ldr	r0, [pc, #704]	@ (80017e0 <main+0x32c>)
 800151e:	f002 fc91 	bl	8003e44 <HAL_CAN_Start>
 8001522:	4603      	mov	r3, r0
 8001524:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001528:	f102 021f 	add.w	r2, r2, #31
 800152c:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 800152e:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001532:	f103 031f 	add.w	r3, r3, #31
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <main+0x9e>
  {
    myprintf("HAL_CAN_Start error (%i)\r\n", status);
 800153c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001540:	f103 031f 	add.w	r3, r3, #31
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	48a6      	ldr	r0, [pc, #664]	@ (80017e4 <main+0x330>)
 800154a:	f001 f925 	bl	8002798 <myprintf>
    while (1);
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <main+0x9a>
  }

  status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001552:	2102      	movs	r1, #2
 8001554:	48a2      	ldr	r0, [pc, #648]	@ (80017e0 <main+0x32c>)
 8001556:	f002 feab 	bl	80042b0 <HAL_CAN_ActivateNotification>
 800155a:	4603      	mov	r3, r0
 800155c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001560:	f102 021f 	add.w	r2, r2, #31
 8001564:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 8001566:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800156a:	f103 031f 	add.w	r3, r3, #31
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00a      	beq.n	800158a <main+0xd6>
  {
    myprintf("HAL_CAN_ActivateNotification error (%i)\r\n", status);
 8001574:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001578:	f103 031f 	add.w	r3, r3, #31
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4899      	ldr	r0, [pc, #612]	@ (80017e8 <main+0x334>)
 8001582:	f001 f909 	bl	8002798 <myprintf>
    while (1);
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <main+0xd2>
  }

  TxHeader.DLC = 2;
 800158a:	4b98      	ldr	r3, [pc, #608]	@ (80017ec <main+0x338>)
 800158c:	2202      	movs	r2, #2
 800158e:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8001590:	4b96      	ldr	r3, [pc, #600]	@ (80017ec <main+0x338>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8001596:	4b95      	ldr	r3, [pc, #596]	@ (80017ec <main+0x338>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800159c:	4b93      	ldr	r3, [pc, #588]	@ (80017ec <main+0x338>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x333;
 80015a2:	4b92      	ldr	r3, [pc, #584]	@ (80017ec <main+0x338>)
 80015a4:	f240 3233 	movw	r2, #819	@ 0x333
 80015a8:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80015aa:	4b90      	ldr	r3, [pc, #576]	@ (80017ec <main+0x338>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	751a      	strb	r2, [r3, #20]

  TxHeadermsg1.DLC = 8;
 80015b0:	4b8f      	ldr	r3, [pc, #572]	@ (80017f0 <main+0x33c>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	611a      	str	r2, [r3, #16]
  TxHeadermsg1.ExtId = 0;
 80015b6:	4b8e      	ldr	r3, [pc, #568]	@ (80017f0 <main+0x33c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  TxHeadermsg1.IDE = CAN_ID_STD;
 80015bc:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <main+0x33c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  TxHeadermsg1.RTR = CAN_RTR_DATA;
 80015c2:	4b8b      	ldr	r3, [pc, #556]	@ (80017f0 <main+0x33c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  TxHeadermsg1.StdId = 0x300;
 80015c8:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <main+0x33c>)
 80015ca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015ce:	601a      	str	r2, [r3, #0]
  TxHeadermsg1.TransmitGlobalTime = DISABLE;
 80015d0:	4b87      	ldr	r3, [pc, #540]	@ (80017f0 <main+0x33c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	751a      	strb	r2, [r3, #20]

  TxHeadermsg2.DLC = 8;
 80015d6:	4b87      	ldr	r3, [pc, #540]	@ (80017f4 <main+0x340>)
 80015d8:	2208      	movs	r2, #8
 80015da:	611a      	str	r2, [r3, #16]
  TxHeadermsg2.ExtId = 0;
 80015dc:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <main+0x340>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  TxHeadermsg2.IDE = CAN_ID_STD;
 80015e2:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <main+0x340>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  TxHeadermsg2.RTR = CAN_RTR_DATA;
 80015e8:	4b82      	ldr	r3, [pc, #520]	@ (80017f4 <main+0x340>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  TxHeadermsg2.StdId = 0x301;
 80015ee:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <main+0x340>)
 80015f0:	f240 3201 	movw	r2, #769	@ 0x301
 80015f4:	601a      	str	r2, [r3, #0]
  TxHeadermsg2.TransmitGlobalTime = DISABLE;
 80015f6:	4b7f      	ldr	r3, [pc, #508]	@ (80017f4 <main+0x340>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	751a      	strb	r2, [r3, #20]
  // some variables for FatFs
  FATFS FatFs;  // Fatfs handle
  FRESULT fres; // Result after operations

  // Open the file system
  myprintf("\r\n~ Mounting... ~\r\n\r\n");
 80015fc:	487e      	ldr	r0, [pc, #504]	@ (80017f8 <main+0x344>)
 80015fe:	f001 f8cb 	bl	8002798 <myprintf>
  fres = f_mount(&FatFs, "", 1);
 8001602:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001606:	f103 0304 	add.w	r3, r3, #4
 800160a:	2201      	movs	r2, #1
 800160c:	497b      	ldr	r1, [pc, #492]	@ (80017fc <main+0x348>)
 800160e:	4618      	mov	r0, r3
 8001610:	f008 fb4a 	bl	8009ca8 <f_mount>
 8001614:	4603      	mov	r3, r0
 8001616:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800161a:	f102 021e 	add.w	r2, r2, #30
 800161e:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8001620:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001624:	f103 031e 	add.w	r3, r3, #30
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <main+0x190>
  {
    myprintf("f_mount error (%i)\r\n", fres);
 800162e:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001632:	f103 031e 	add.w	r3, r3, #30
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4871      	ldr	r0, [pc, #452]	@ (8001800 <main+0x34c>)
 800163c:	f001 f8ac 	bl	8002798 <myprintf>
    while (1);
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <main+0x18c>
  }

  // Create new file name
  char filename[12];
  create_new_filename(filename, "DATA", "txt");
 8001644:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001648:	f103 0318 	add.w	r3, r3, #24
 800164c:	4a6d      	ldr	r2, [pc, #436]	@ (8001804 <main+0x350>)
 800164e:	496e      	ldr	r1, [pc, #440]	@ (8001808 <main+0x354>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff09 	bl	8001468 <create_new_filename>

  //Open CSV
  fres = f_open(&fil, filename, FA_CREATE_NEW | FA_WRITE);
 8001656:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800165a:	f103 0318 	add.w	r3, r3, #24
 800165e:	2206      	movs	r2, #6
 8001660:	4619      	mov	r1, r3
 8001662:	486a      	ldr	r0, [pc, #424]	@ (800180c <main+0x358>)
 8001664:	f008 fb66 	bl	8009d34 <f_open>
 8001668:	4603      	mov	r3, r0
 800166a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800166e:	f102 021e 	add.w	r2, r2, #30
 8001672:	7013      	strb	r3, [r2, #0]
  if (fres == FR_OK)
 8001674:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001678:	f103 031e 	add.w	r3, r3, #30
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <main+0x200>
  {
    myprintf("I was able to open '%s' for writing\r\n", filename);
 8001682:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001686:	f103 0318 	add.w	r3, r3, #24
 800168a:	4619      	mov	r1, r3
 800168c:	4860      	ldr	r0, [pc, #384]	@ (8001810 <main+0x35c>)
 800168e:	f001 f883 	bl	8002798 <myprintf>
  {
    myprintf("f_open error (%i)\r\n", fres);
    while (1);
  }

  status = HAL_TIM_Base_Start_IT(&htim14);
 8001692:	4860      	ldr	r0, [pc, #384]	@ (8001814 <main+0x360>)
 8001694:	f005 f90c 	bl	80068b0 <HAL_TIM_Base_Start_IT>
 8001698:	4603      	mov	r3, r0
 800169a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800169e:	f102 021f 	add.w	r2, r2, #31
 80016a2:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 80016a4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80016a8:	f103 031f 	add.w	r3, r3, #31
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <main+0x22c>
 80016b2:	e00a      	b.n	80016ca <main+0x216>
    myprintf("f_open error (%i)\r\n", fres);
 80016b4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80016b8:	f103 031e 	add.w	r3, r3, #30
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	4855      	ldr	r0, [pc, #340]	@ (8001818 <main+0x364>)
 80016c2:	f001 f869 	bl	8002798 <myprintf>
    while (1);
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <main+0x212>
  {
    myprintf("HAL_TIM_Base_Start_IT error (%i)\r\n", status);
 80016ca:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80016ce:	f103 031f 	add.w	r3, r3, #31
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4851      	ldr	r0, [pc, #324]	@ (800181c <main+0x368>)
 80016d8:	f001 f85e 	bl	8002798 <myprintf>
    while (1);
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <main+0x228>
  }

  /* Start the ADC */
  // Write metadata headers as
  // `"amplitudeX.time:"  [time in ms (4 bytes)]  "block:"  [block size in bytes (4 bytes)]  ".\0"`
  sprintf(adc_buffer_x, "amplitudeX.time:");
 80016e0:	494f      	ldr	r1, [pc, #316]	@ (8001820 <main+0x36c>)
 80016e2:	4850      	ldr	r0, [pc, #320]	@ (8001824 <main+0x370>)
 80016e4:	f009 fe30 	bl	800b348 <siprintf>
  sprintf(adc_buffer_x + 10, "block:");
 80016e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <main+0x374>)
 80016ea:	4950      	ldr	r1, [pc, #320]	@ (800182c <main+0x378>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f009 fe2b 	bl	800b348 <siprintf>
  adc_buffer_x[13] = (uint16_t)(ADC_BUFFER_SIZE & 0xFFFF);
 80016f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <main+0x370>)
 80016f4:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 80016f8:	835a      	strh	r2, [r3, #26]
  adc_buffer_x[14] = (uint16_t)((ADC_BUFFER_SIZE >> 16) & 0xFFFF);
 80016fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <main+0x370>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	839a      	strh	r2, [r3, #28]
  sprintf(adc_buffer_x + 15, ".");
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <main+0x37c>)
 8001702:	494c      	ldr	r1, [pc, #304]	@ (8001834 <main+0x380>)
 8001704:	4618      	mov	r0, r3
 8001706:	f009 fe1f 	bl	800b348 <siprintf>
  sprintf(adc_buffer_y, "amplitudeY.time:");
 800170a:	494b      	ldr	r1, [pc, #300]	@ (8001838 <main+0x384>)
 800170c:	484b      	ldr	r0, [pc, #300]	@ (800183c <main+0x388>)
 800170e:	f009 fe1b 	bl	800b348 <siprintf>
  sprintf(adc_buffer_y + 10, "block:");
 8001712:	4b4b      	ldr	r3, [pc, #300]	@ (8001840 <main+0x38c>)
 8001714:	4945      	ldr	r1, [pc, #276]	@ (800182c <main+0x378>)
 8001716:	4618      	mov	r0, r3
 8001718:	f009 fe16 	bl	800b348 <siprintf>
  adc_buffer_y[13] = (uint16_t)(ADC_BUFFER_SIZE & 0xFFFF);
 800171c:	4b47      	ldr	r3, [pc, #284]	@ (800183c <main+0x388>)
 800171e:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001722:	835a      	strh	r2, [r3, #26]
  adc_buffer_y[14] = (uint16_t)((ADC_BUFFER_SIZE >> 16) & 0xFFFF);
 8001724:	4b45      	ldr	r3, [pc, #276]	@ (800183c <main+0x388>)
 8001726:	2200      	movs	r2, #0
 8001728:	839a      	strh	r2, [r3, #28]
  sprintf(adc_buffer_y + 15, ".");
 800172a:	4b46      	ldr	r3, [pc, #280]	@ (8001844 <main+0x390>)
 800172c:	4941      	ldr	r1, [pc, #260]	@ (8001834 <main+0x380>)
 800172e:	4618      	mov	r0, r3
 8001730:	f009 fe0a 	bl	800b348 <siprintf>
  sprintf(adc_buffer_z, "amplitudeZ.time:");
 8001734:	4944      	ldr	r1, [pc, #272]	@ (8001848 <main+0x394>)
 8001736:	4845      	ldr	r0, [pc, #276]	@ (800184c <main+0x398>)
 8001738:	f009 fe06 	bl	800b348 <siprintf>
  sprintf(adc_buffer_z + 10, "block:");
 800173c:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <main+0x39c>)
 800173e:	493b      	ldr	r1, [pc, #236]	@ (800182c <main+0x378>)
 8001740:	4618      	mov	r0, r3
 8001742:	f009 fe01 	bl	800b348 <siprintf>
  adc_buffer_z[13] = (uint16_t)(ADC_BUFFER_SIZE & 0xFFFF);
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <main+0x398>)
 8001748:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 800174c:	835a      	strh	r2, [r3, #26]
  adc_buffer_z[14] = (uint16_t)((ADC_BUFFER_SIZE >> 16) & 0xFFFF);
 800174e:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <main+0x398>)
 8001750:	2200      	movs	r2, #0
 8001752:	839a      	strh	r2, [r3, #28]
  sprintf(adc_buffer_z + 15, ".");
 8001754:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <main+0x3a0>)
 8001756:	4937      	ldr	r1, [pc, #220]	@ (8001834 <main+0x380>)
 8001758:	4618      	mov	r0, r3
 800175a:	f009 fdf5 	bl	800b348 <siprintf>

  status = HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_buffer_x[16], ADC_BUFFER_SIZE);
 800175e:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001762:	493d      	ldr	r1, [pc, #244]	@ (8001858 <main+0x3a4>)
 8001764:	483d      	ldr	r0, [pc, #244]	@ (800185c <main+0x3a8>)
 8001766:	f001 fd6d 	bl	8003244 <HAL_ADC_Start_DMA>
 800176a:	4603      	mov	r3, r0
 800176c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001770:	f102 021f 	add.w	r2, r2, #31
 8001774:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 8001776:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800177a:	f103 031f 	add.w	r3, r3, #31
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00a      	beq.n	800179a <main+0x2e6>
  {
    myprintf("HAL_ADC_Start_DMA adc1 error (%i)\r\n", status);
 8001784:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001788:	f103 031f 	add.w	r3, r3, #31
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4833      	ldr	r0, [pc, #204]	@ (8001860 <main+0x3ac>)
 8001792:	f001 f801 	bl	8002798 <myprintf>
    while (1);
 8001796:	bf00      	nop
 8001798:	e7fd      	b.n	8001796 <main+0x2e2>
  }
  status = HAL_ADC_Start_DMA(&hadc2, (uint32_t *) &adc_buffer_y[16], ADC_BUFFER_SIZE);
 800179a:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 800179e:	4931      	ldr	r1, [pc, #196]	@ (8001864 <main+0x3b0>)
 80017a0:	4831      	ldr	r0, [pc, #196]	@ (8001868 <main+0x3b4>)
 80017a2:	f001 fd4f 	bl	8003244 <HAL_ADC_Start_DMA>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80017ac:	f102 021f 	add.w	r2, r2, #31
 80017b0:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 80017b2:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80017b6:	f103 031f 	add.w	r3, r3, #31
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d057      	beq.n	8001870 <main+0x3bc>
  {
    myprintf("HAL_ADC_Start_DMA adc2 error (%i)\r\n", status);
 80017c0:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80017c4:	f103 031f 	add.w	r3, r3, #31
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4827      	ldr	r0, [pc, #156]	@ (800186c <main+0x3b8>)
 80017ce:	f000 ffe3 	bl	8002798 <myprintf>
    while (1);
 80017d2:	bf00      	nop
 80017d4:	e7fd      	b.n	80017d2 <main+0x31e>
 80017d6:	bf00      	nop
 80017d8:	0800edb0 	.word	0x0800edb0
 80017dc:	40020800 	.word	0x40020800
 80017e0:	20000404 	.word	0x20000404
 80017e4:	0800edc8 	.word	0x0800edc8
 80017e8:	0800ede4 	.word	0x0800ede4
 80017ec:	20006550 	.word	0x20006550
 80017f0:	20006584 	.word	0x20006584
 80017f4:	2000659c 	.word	0x2000659c
 80017f8:	0800ee10 	.word	0x0800ee10
 80017fc:	0800ee28 	.word	0x0800ee28
 8001800:	0800ee2c 	.word	0x0800ee2c
 8001804:	0800ee44 	.word	0x0800ee44
 8001808:	0800ee48 	.word	0x0800ee48
 800180c:	200065d8 	.word	0x200065d8
 8001810:	0800ee50 	.word	0x0800ee50
 8001814:	20000514 	.word	0x20000514
 8001818:	0800ee78 	.word	0x0800ee78
 800181c:	0800ee8c 	.word	0x0800ee8c
 8001820:	0800eeb0 	.word	0x0800eeb0
 8001824:	200005b0 	.word	0x200005b0
 8001828:	200005c4 	.word	0x200005c4
 800182c:	0800eec4 	.word	0x0800eec4
 8001830:	200005ce 	.word	0x200005ce
 8001834:	0800eecc 	.word	0x0800eecc
 8001838:	0800eed0 	.word	0x0800eed0
 800183c:	20002590 	.word	0x20002590
 8001840:	200025a4 	.word	0x200025a4
 8001844:	200025ae 	.word	0x200025ae
 8001848:	0800eee4 	.word	0x0800eee4
 800184c:	20004570 	.word	0x20004570
 8001850:	20004584 	.word	0x20004584
 8001854:	2000458e 	.word	0x2000458e
 8001858:	200005d0 	.word	0x200005d0
 800185c:	2000020c 	.word	0x2000020c
 8001860:	0800eef8 	.word	0x0800eef8
 8001864:	200025b0 	.word	0x200025b0
 8001868:	20000254 	.word	0x20000254
 800186c:	0800ef1c 	.word	0x0800ef1c
  }
  status = HAL_ADC_Start_DMA(&hadc3, (uint32_t *) &adc_buffer_z[16], ADC_BUFFER_SIZE);
 8001870:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001874:	491b      	ldr	r1, [pc, #108]	@ (80018e4 <main+0x430>)
 8001876:	481c      	ldr	r0, [pc, #112]	@ (80018e8 <main+0x434>)
 8001878:	f001 fce4 	bl	8003244 <HAL_ADC_Start_DMA>
 800187c:	4603      	mov	r3, r0
 800187e:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001882:	f102 021f 	add.w	r2, r2, #31
 8001886:	7013      	strb	r3, [r2, #0]
  if (status != HAL_OK)
 8001888:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800188c:	f103 031f 	add.w	r3, r3, #31
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <main+0x3f8>
  {
    myprintf("HAL_ADC_Start_DMA adc3 error (%i)\r\n", status);
 8001896:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800189a:	f103 031f 	add.w	r3, r3, #31
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4812      	ldr	r0, [pc, #72]	@ (80018ec <main+0x438>)
 80018a4:	f000 ff78 	bl	8002798 <myprintf>
    while (1);
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <main+0x3f4>
  }

  /* Start the sampling timer */
  status = HAL_TIM_Base_Start_IT(&htim2);
 80018ac:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <main+0x43c>)
 80018ae:	f004 ffff 	bl	80068b0 <HAL_TIM_Base_Start_IT>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80018b8:	f102 021f 	add.w	r2, r2, #31
 80018bc:	7013      	strb	r3, [r2, #0]
  // status = HAL_TIM_Base_Start_IT(&htim13);
  if (status != HAL_OK)
 80018be:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80018c2:	f103 031f 	add.w	r3, r3, #31
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d015      	beq.n	80018f8 <main+0x444>
  {
    myprintf("HAL_TIM_Base_Start_IT error (%i)\r\n", status);
 80018cc:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80018d0:	f103 031f 	add.w	r3, r3, #31
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <main+0x440>)
 80018da:	f000 ff5d 	bl	8002798 <myprintf>
    while (1);
 80018de:	bf00      	nop
 80018e0:	e7fd      	b.n	80018de <main+0x42a>
 80018e2:	bf00      	nop
 80018e4:	20004590 	.word	0x20004590
 80018e8:	2000029c 	.word	0x2000029c
 80018ec:	0800ef40 	.word	0x0800ef40
 80018f0:	20000484 	.word	0x20000484
 80018f4:	0800ee8c 	.word	0x0800ee8c
  }

  HAL_GPIO_WritePin(LED_INIT_GPIO_Port, LED_INIT_Pin, GPIO_PIN_SET); // Init LED On
 80018f8:	2201      	movs	r2, #1
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	48bf      	ldr	r0, [pc, #764]	@ (8001bfc <main+0x748>)
 80018fe:	f003 fdb3 	bl	8005468 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (receive_flag == 1)
 8001902:	4bbf      	ldr	r3, [pc, #764]	@ (8001c00 <main+0x74c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d14a      	bne.n	80019a0 <main+0x4ec>
    {
      myprintf("Received %d\n\r", RxData[1]);
 800190a:	4bbe      	ldr	r3, [pc, #760]	@ (8001c04 <main+0x750>)
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	4619      	mov	r1, r3
 8001910:	48bd      	ldr	r0, [pc, #756]	@ (8001c08 <main+0x754>)
 8001912:	f000 ff41 	bl	8002798 <myprintf>
      uint32_t id = RxHeader.StdId;
 8001916:	4bbd      	ldr	r3, [pc, #756]	@ (8001c0c <main+0x758>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800191e:	f102 0218 	add.w	r2, r2, #24
 8001922:	6013      	str	r3, [r2, #0]
      myprintf("Received message with Standard ID: 0x%03X\n\r", id);
 8001924:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001928:	f103 0318 	add.w	r3, r3, #24
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	48b8      	ldr	r0, [pc, #736]	@ (8001c10 <main+0x75c>)
 8001930:	f000 ff32 	bl	8002798 <myprintf>

      if (id == 0x011 || id == 0x012)
 8001934:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001938:	f103 0318 	add.w	r3, r3, #24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d006      	beq.n	8001950 <main+0x49c>
 8001942:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001946:	f103 0318 	add.w	r3, r3, #24
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b12      	cmp	r3, #18
 800194e:	d113      	bne.n	8001978 <main+0x4c4>
      {
        if (RxData[0] == 1)
 8001950:	4bac      	ldr	r3, [pc, #688]	@ (8001c04 <main+0x750>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <main+0x4b0>
        {
          myprintf("Payload is now sampling\n\r");
 8001958:	48ae      	ldr	r0, [pc, #696]	@ (8001c14 <main+0x760>)
 800195a:	f000 ff1d 	bl	8002798 <myprintf>
          isSampling = true;
 800195e:	4bae      	ldr	r3, [pc, #696]	@ (8001c18 <main+0x764>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
        }
        if (RxData[0] == 0)
 8001964:	4ba7      	ldr	r3, [pc, #668]	@ (8001c04 <main+0x750>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <main+0x4c4>
        {
          myprintf("Payload stopped sampling\n\r");
 800196c:	48ab      	ldr	r0, [pc, #684]	@ (8001c1c <main+0x768>)
 800196e:	f000 ff13 	bl	8002798 <myprintf>
          isSampling = false;
 8001972:	4ba9      	ldr	r3, [pc, #676]	@ (8001c18 <main+0x764>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
        }
      }
      if (id == 0x005 || id == 0x006)
 8001978:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800197c:	f103 0318 	add.w	r3, r3, #24
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d006      	beq.n	8001994 <main+0x4e0>
 8001986:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800198a:	f103 0318 	add.w	r3, r3, #24
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d102      	bne.n	800199a <main+0x4e6>
      {
        myprintf("Payload is now Scrub aka Reset\n\r");
 8001994:	48a2      	ldr	r0, [pc, #648]	@ (8001c20 <main+0x76c>)
 8001996:	f000 feff 	bl	8002798 <myprintf>
      }

      receive_flag = 0;
 800199a:	4b99      	ldr	r3, [pc, #612]	@ (8001c00 <main+0x74c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    }
    if (HAL_GetTick() - lasttime > 1200)
 80019a0:	f001 fbdc 	bl	800315c <HAL_GetTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2200      	movs	r2, #0
 80019a8:	4698      	mov	r8, r3
 80019aa:	4691      	mov	r9, r2
 80019ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001c24 <main+0x770>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	ebb8 0402 	subs.w	r4, r8, r2
 80019b6:	eb69 0503 	sbc.w	r5, r9, r3
 80019ba:	f240 43b1 	movw	r3, #1201	@ 0x4b1
 80019be:	429c      	cmp	r4, r3
 80019c0:	f175 0300 	sbcs.w	r3, r5, #0
 80019c4:	f0c0 80ea 	bcc.w	8001b9c <main+0x6e8>
    { // 1.2Hz
      lasttime = HAL_GetTick();
 80019c8:	f001 fbc8 	bl	800315c <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2200      	movs	r2, #0
 80019d0:	469a      	mov	sl, r3
 80019d2:	4693      	mov	fp, r2
 80019d4:	4b93      	ldr	r3, [pc, #588]	@ (8001c24 <main+0x770>)
 80019d6:	e9c3 ab00 	strd	sl, fp, [r3]
      // msg1
      // bool isSampling = true;
      float frqX = 1112.82f;
 80019da:	4b93      	ldr	r3, [pc, #588]	@ (8001c28 <main+0x774>)
 80019dc:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 80019e0:	f102 0214 	add.w	r2, r2, #20
 80019e4:	6013      	str	r3, [r2, #0]
      float frqY = 2404.91f;
 80019e6:	4b91      	ldr	r3, [pc, #580]	@ (8001c2c <main+0x778>)
 80019e8:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 80019ec:	f102 0210 	add.w	r2, r2, #16
 80019f0:	6013      	str	r3, [r2, #0]
      float frqZ = 13711.42f;
 80019f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c30 <main+0x77c>)
 80019f4:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 80019f8:	f102 020c 	add.w	r2, r2, #12
 80019fc:	6013      	str	r3, [r2, #0]

      float ampX = 0.34f;
 80019fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001c34 <main+0x780>)
 8001a00:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a04:	f102 0208 	add.w	r2, r2, #8
 8001a08:	6013      	str	r3, [r2, #0]
      float ampY = 0.412f;
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c38 <main+0x784>)
 8001a0c:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a10:	f102 0204 	add.w	r2, r2, #4
 8001a14:	6013      	str	r3, [r2, #0]
      float ampZ = 1.664f;
 8001a16:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <main+0x788>)
 8001a18:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a1c:	6013      	str	r3, [r2, #0]

      if (isSampling == false)
 8001a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c18 <main+0x764>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d027      	beq.n	8001a7c <main+0x5c8>
      {
        frqX = 0;
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a34:	f102 0214 	add.w	r2, r2, #20
 8001a38:	6013      	str	r3, [r2, #0]
        frqY = 0;
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a42:	f102 0210 	add.w	r2, r2, #16
 8001a46:	6013      	str	r3, [r2, #0]
        frqZ = 0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a50:	f102 020c 	add.w	r2, r2, #12
 8001a54:	6013      	str	r3, [r2, #0]

        ampX = 0;
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a5e:	f102 0208 	add.w	r2, r2, #8
 8001a62:	6013      	str	r3, [r2, #0]
        ampY = 0;
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a6c:	f102 0204 	add.w	r2, r2, #4
 8001a70:	6013      	str	r3, [r2, #0]
        ampZ = 0;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001a7a:	6013      	str	r3, [r2, #0]
      }

      uint32_t seconds = HAL_GetTick();
 8001a7c:	f001 fb6e 	bl	800315c <HAL_GetTick>
 8001a80:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001a84:	f103 0314 	add.w	r3, r3, #20
 8001a88:	6018      	str	r0, [r3, #0]
      seconds = seconds / 1000;
 8001a8a:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001a8e:	f103 0314 	add.w	r3, r3, #20
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	@ (8001c40 <main+0x78c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001aa0:	f102 0214 	add.w	r2, r2, #20
 8001aa4:	6013      	str	r3, [r2, #0]

      struct Data data_packet = {frqX, frqY, frqZ, ampX, ampY, ampZ, isSampling, seconds};
 8001aa6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001aaa:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001aae:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001ab2:	f102 0214 	add.w	r2, r2, #20
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001abe:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001ac2:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001ac6:	f102 0210 	add.w	r2, r2, #16
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001ad2:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001ad6:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001ada:	f102 020c 	add.w	r2, r2, #12
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001ae6:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001aea:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001aee:	f102 0208 	add.w	r2, r2, #8
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001afa:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001afe:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001b02:	f102 0204 	add.w	r2, r2, #4
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001b0e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001b12:	f507 5293 	add.w	r2, r7, #4704	@ 0x1260
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c18 <main+0x764>)
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001b22:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001b26:	761a      	strb	r2, [r3, #24]
 8001b28:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001b2c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001b30:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8001b34:	f102 0214 	add.w	r2, r2, #20
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	61da      	str	r2, [r3, #28]

      union my_msg m1;
      union my_msg m2;

      buildMsg(&m1, &m2, data_packet);
 8001b3c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001b40:	f5a3 7e1c 	sub.w	lr, r3, #624	@ 0x270
 8001b44:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b48:	f103 0308 	add.w	r3, r3, #8
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b52:	f102 0210 	add.w	r2, r2, #16
 8001b56:	603a      	str	r2, [r7, #0]
 8001b58:	46ec      	mov	ip, sp
 8001b5a:	f10e 0608 	add.w	r6, lr, #8
 8001b5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b64:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001b68:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001b6c:	e89e 000c 	ldmia.w	lr, {r2, r3}
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f7ff fc38 	bl	80013e8 <buildMsg>
      HAL_CAN_AddTxMessage(&hcan1, &TxHeadermsg1, m1.bytes, &TxMailbox[0]);
 8001b78:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b7c:	f102 0210 	add.w	r2, r2, #16
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <main+0x790>)
 8001b82:	4931      	ldr	r1, [pc, #196]	@ (8001c48 <main+0x794>)
 8001b84:	4831      	ldr	r0, [pc, #196]	@ (8001c4c <main+0x798>)
 8001b86:	f002 f9a1 	bl	8003ecc <HAL_CAN_AddTxMessage>
      // HAL_Delay(100);
      HAL_CAN_AddTxMessage(&hcan1, &TxHeadermsg2, m2.bytes, &TxMailbox[0]);
 8001b8a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b8e:	f102 0208 	add.w	r2, r2, #8
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <main+0x790>)
 8001b94:	492e      	ldr	r1, [pc, #184]	@ (8001c50 <main+0x79c>)
 8001b96:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <main+0x798>)
 8001b98:	f002 f998 	bl	8003ecc <HAL_CAN_AddTxMessage>
    }

    if (rtf == 1)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <main+0x7a0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d106      	bne.n	8001bb4 <main+0x700>
    {
      SDCard_file_flush_line_check(&fil, &line_written);
 8001ba6:	492c      	ldr	r1, [pc, #176]	@ (8001c58 <main+0x7a4>)
 8001ba8:	482c      	ldr	r0, [pc, #176]	@ (8001c5c <main+0x7a8>)
 8001baa:	f000 fe2f 	bl	800280c <SDCard_file_flush_line_check>
      rtf = 0;
 8001bae:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <main+0x7a0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    }

    if (halfcpltx == 1)
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <main+0x7ac>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d114      	bne.n	8001be8 <main+0x734>
    {
      SDCard_file_write(&fil, adc_buffer_x, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <main+0x7a4>)
 8001bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc4:	4927      	ldr	r1, [pc, #156]	@ (8001c64 <main+0x7b0>)
 8001bc6:	4825      	ldr	r0, [pc, #148]	@ (8001c5c <main+0x7a8>)
 8001bc8:	f000 fdf0 	bl	80027ac <SDCard_file_write>

      myprintf("Half complete X timestamp: %lu\n\r", adc_buffer_x[8] + (adc_buffer_x[9] << 16));
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <main+0x7b0>)
 8001bce:	8a1b      	ldrh	r3, [r3, #16]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <main+0x7b0>)
 8001bd4:	8a5b      	ldrh	r3, [r3, #18]
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	4413      	add	r3, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4822      	ldr	r0, [pc, #136]	@ (8001c68 <main+0x7b4>)
 8001bde:	f000 fddb 	bl	8002798 <myprintf>

      halfcpltx = 0;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <main+0x7ac>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
    }
    if (halfcplty == 1)
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <main+0x7b8>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d151      	bne.n	8001c96 <main+0x7e2>
    {
      SDCard_file_write(&fil, adc_buffer_y, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <main+0x7a4>)
 8001bf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf8:	491d      	ldr	r1, [pc, #116]	@ (8001c70 <main+0x7bc>)
 8001bfa:	e03b      	b.n	8001c74 <main+0x7c0>
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	200005ac 	.word	0x200005ac
 8001c04:	200065c4 	.word	0x200065c4
 8001c08:	0800ef64 	.word	0x0800ef64
 8001c0c:	20006568 	.word	0x20006568
 8001c10:	0800ef74 	.word	0x0800ef74
 8001c14:	0800efa0 	.word	0x0800efa0
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	0800efbc 	.word	0x0800efbc
 8001c20:	0800efd8 	.word	0x0800efd8
 8001c24:	200065d0 	.word	0x200065d0
 8001c28:	448b1a3d 	.word	0x448b1a3d
 8001c2c:	45164e8f 	.word	0x45164e8f
 8001c30:	46563dae 	.word	0x46563dae
 8001c34:	3eae147b 	.word	0x3eae147b
 8001c38:	3ed2f1aa 	.word	0x3ed2f1aa
 8001c3c:	3fd4fdf4 	.word	0x3fd4fdf4
 8001c40:	10624dd3 	.word	0x10624dd3
 8001c44:	200065b4 	.word	0x200065b4
 8001c48:	20006584 	.word	0x20006584
 8001c4c:	20000404 	.word	0x20000404
 8001c50:	2000659c 	.word	0x2000659c
 8001c54:	200005a4 	.word	0x200005a4
 8001c58:	20006808 	.word	0x20006808
 8001c5c:	200065d8 	.word	0x200065d8
 8001c60:	200005a5 	.word	0x200005a5
 8001c64:	200005b0 	.word	0x200005b0
 8001c68:	0800effc 	.word	0x0800effc
 8001c6c:	200005a6 	.word	0x200005a6
 8001c70:	20002590 	.word	0x20002590
 8001c74:	487a      	ldr	r0, [pc, #488]	@ (8001e60 <main+0x9ac>)
 8001c76:	f000 fd99 	bl	80027ac <SDCard_file_write>

      myprintf("Half complete Y timestamp: %lu\n\r", adc_buffer_y[8] + (adc_buffer_y[9] << 16));
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e64 <main+0x9b0>)
 8001c7c:	8a1b      	ldrh	r3, [r3, #16]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b78      	ldr	r3, [pc, #480]	@ (8001e64 <main+0x9b0>)
 8001c82:	8a5b      	ldrh	r3, [r3, #18]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	4413      	add	r3, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4877      	ldr	r0, [pc, #476]	@ (8001e68 <main+0x9b4>)
 8001c8c:	f000 fd84 	bl	8002798 <myprintf>

      halfcplty = 0;
 8001c90:	4b76      	ldr	r3, [pc, #472]	@ (8001e6c <main+0x9b8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
    }
    if (halfcpltz == 1)
 8001c96:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <main+0x9bc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d114      	bne.n	8001cca <main+0x816>
    {
      SDCard_file_write(&fil, adc_buffer_z, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001ca0:	4b74      	ldr	r3, [pc, #464]	@ (8001e74 <main+0x9c0>)
 8001ca2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ca6:	4974      	ldr	r1, [pc, #464]	@ (8001e78 <main+0x9c4>)
 8001ca8:	486d      	ldr	r0, [pc, #436]	@ (8001e60 <main+0x9ac>)
 8001caa:	f000 fd7f 	bl	80027ac <SDCard_file_write>

      myprintf("Half complete Z timestamp: %lu\n\r", adc_buffer_z[8] + (adc_buffer_z[9] << 16));
 8001cae:	4b72      	ldr	r3, [pc, #456]	@ (8001e78 <main+0x9c4>)
 8001cb0:	8a1b      	ldrh	r3, [r3, #16]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <main+0x9c4>)
 8001cb6:	8a5b      	ldrh	r3, [r3, #18]
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	4413      	add	r3, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	486f      	ldr	r0, [pc, #444]	@ (8001e7c <main+0x9c8>)
 8001cc0:	f000 fd6a 	bl	8002798 <myprintf>

      halfcpltz = 0;
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <main+0x9bc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
    }

    if (cpltx == 1)
 8001cca:	4b6d      	ldr	r3, [pc, #436]	@ (8001e80 <main+0x9cc>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d12e      	bne.n	8001d32 <main+0x87e>
    {
      uint16_t adc_buffer_last_half[16+(ADC_BUFFER_SIZE/2)];
      memcpy(adc_buffer_last_half, adc_buffer_x, 16 * sizeof(uint16_t));
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	3b10      	subs	r3, #16
 8001cda:	2220      	movs	r2, #32
 8001cdc:	4969      	ldr	r1, [pc, #420]	@ (8001e84 <main+0x9d0>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00a fae5 	bl	800c2ae <memcpy>
      memcpy(adc_buffer_last_half + 16, adc_buffer_x + 16 + (ADC_BUFFER_SIZE/2), (ADC_BUFFER_SIZE/2) * sizeof(uint16_t));
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	3b10      	subs	r3, #16
 8001cea:	3320      	adds	r3, #32
 8001cec:	4966      	ldr	r1, [pc, #408]	@ (8001e88 <main+0x9d4>)
 8001cee:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f00a fadb 	bl	800c2ae <memcpy>

      SDCard_file_write(&fil, adc_buffer_last_half, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001cf8:	f107 0118 	add.w	r1, r7, #24
 8001cfc:	3910      	subs	r1, #16
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <main+0x9c0>)
 8001d00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d04:	4856      	ldr	r0, [pc, #344]	@ (8001e60 <main+0x9ac>)
 8001d06:	f000 fd51 	bl	80027ac <SDCard_file_write>

      myprintf("Complete X timestamp: %lu\n\r", adc_buffer_last_half[8] + (adc_buffer_last_half[9] << 16));
 8001d0a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001d0e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001d12:	8a1b      	ldrh	r3, [r3, #16]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001d1a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001d1e:	8a5b      	ldrh	r3, [r3, #18]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	4413      	add	r3, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	4859      	ldr	r0, [pc, #356]	@ (8001e8c <main+0x9d8>)
 8001d28:	f000 fd36 	bl	8002798 <myprintf>

      cpltx = 0;
 8001d2c:	4b54      	ldr	r3, [pc, #336]	@ (8001e80 <main+0x9cc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    }
    if (cplty == 1)
 8001d32:	4b57      	ldr	r3, [pc, #348]	@ (8001e90 <main+0x9dc>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d12e      	bne.n	8001d9a <main+0x8e6>
    {
      uint16_t adc_buffer_last_half[16+(ADC_BUFFER_SIZE/2)];
      memcpy(adc_buffer_last_half, adc_buffer_y, 16 * sizeof(uint16_t));
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	3b10      	subs	r3, #16
 8001d42:	2220      	movs	r2, #32
 8001d44:	4947      	ldr	r1, [pc, #284]	@ (8001e64 <main+0x9b0>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00a fab1 	bl	800c2ae <memcpy>
      memcpy(adc_buffer_last_half + 16, adc_buffer_y + 16 + (ADC_BUFFER_SIZE/2), (ADC_BUFFER_SIZE/2) * sizeof(uint16_t));
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	3b10      	subs	r3, #16
 8001d52:	3320      	adds	r3, #32
 8001d54:	494f      	ldr	r1, [pc, #316]	@ (8001e94 <main+0x9e0>)
 8001d56:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00a faa7 	bl	800c2ae <memcpy>

      SDCard_file_write(&fil, adc_buffer_last_half, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001d60:	f107 0118 	add.w	r1, r7, #24
 8001d64:	3910      	subs	r1, #16
 8001d66:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <main+0x9c0>)
 8001d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d6c:	483c      	ldr	r0, [pc, #240]	@ (8001e60 <main+0x9ac>)
 8001d6e:	f000 fd1d 	bl	80027ac <SDCard_file_write>

      myprintf("Complete Y timestamp: %lu\n\r", adc_buffer_last_half[8] + (adc_buffer_last_half[9] << 16));
 8001d72:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001d76:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001d7a:	8a1b      	ldrh	r3, [r3, #16]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001d82:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001d86:	8a5b      	ldrh	r3, [r3, #18]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4842      	ldr	r0, [pc, #264]	@ (8001e98 <main+0x9e4>)
 8001d90:	f000 fd02 	bl	8002798 <myprintf>

      cplty = 0;
 8001d94:	4b3e      	ldr	r3, [pc, #248]	@ (8001e90 <main+0x9dc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    }
    if (cpltz == 1)
 8001d9a:	4b40      	ldr	r3, [pc, #256]	@ (8001e9c <main+0x9e8>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d12e      	bne.n	8001e02 <main+0x94e>
    {
      uint16_t adc_buffer_last_half[16+(ADC_BUFFER_SIZE/2)];
      memcpy(adc_buffer_last_half, adc_buffer_z, 16 * sizeof(uint16_t));
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	3b10      	subs	r3, #16
 8001daa:	2220      	movs	r2, #32
 8001dac:	4932      	ldr	r1, [pc, #200]	@ (8001e78 <main+0x9c4>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00a fa7d 	bl	800c2ae <memcpy>
      memcpy(adc_buffer_last_half + 16, adc_buffer_z + 16 + (ADC_BUFFER_SIZE/2), (ADC_BUFFER_SIZE/2) * sizeof(uint16_t));
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	3b10      	subs	r3, #16
 8001dba:	3320      	adds	r3, #32
 8001dbc:	4938      	ldr	r1, [pc, #224]	@ (8001ea0 <main+0x9ec>)
 8001dbe:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00a fa73 	bl	800c2ae <memcpy>

      SDCard_file_write(&fil, adc_buffer_last_half, (uint32_t) 32+ADC_BUFFER_SIZE, &line_written);
 8001dc8:	f107 0118 	add.w	r1, r7, #24
 8001dcc:	3910      	subs	r1, #16
 8001dce:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <main+0x9c0>)
 8001dd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dd4:	4822      	ldr	r0, [pc, #136]	@ (8001e60 <main+0x9ac>)
 8001dd6:	f000 fce9 	bl	80027ac <SDCard_file_write>

      myprintf("Complete Z timestamp: %lu\n\r", adc_buffer_last_half[8] + (adc_buffer_last_half[9] << 16));
 8001dda:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001dde:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001de2:	8a1b      	ldrh	r3, [r3, #16]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8001dea:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8001dee:	8a5b      	ldrh	r3, [r3, #18]
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	4413      	add	r3, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	482b      	ldr	r0, [pc, #172]	@ (8001ea4 <main+0x9f0>)
 8001df8:	f000 fcce 	bl	8002798 <myprintf>

      cpltz = 0;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <main+0x9e8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_GetTick() > TERMINATION_TIME_MS)
 8001e02:	f001 f9ab 	bl	800315c <HAL_GetTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <main+0x9f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	f67f ad79 	bls.w	8001902 <main+0x44e>
    {
      f_close(&fil);
 8001e10:	4813      	ldr	r0, [pc, #76]	@ (8001e60 <main+0x9ac>)
 8001e12:	f008 fb3c 	bl	800a48e <f_close>
      myprintf("\r\n~ Closing file... ~\r\n\r\n");
 8001e16:	4825      	ldr	r0, [pc, #148]	@ (8001eac <main+0x9f8>)
 8001e18:	f000 fcbe 	bl	8002798 <myprintf>
      f_mount(NULL, "", 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4924      	ldr	r1, [pc, #144]	@ (8001eb0 <main+0x9fc>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f007 ff41 	bl	8009ca8 <f_mount>
      myprintf("\r\n~ Unmounting... ~\r\n\r\n");
 8001e26:	4823      	ldr	r0, [pc, #140]	@ (8001eb4 <main+0xa00>)
 8001e28:	f000 fcb6 	bl	8002798 <myprintf>
      HAL_TIM_Base_Stop_IT(&htim14);
 8001e2c:	4822      	ldr	r0, [pc, #136]	@ (8001eb8 <main+0xa04>)
 8001e2e:	f004 fdaf 	bl	8006990 <HAL_TIM_Base_Stop_IT>
      myprintf("\r\n~ Stopping... ~\r\n\r\n");
 8001e32:	4822      	ldr	r0, [pc, #136]	@ (8001ebc <main+0xa08>)
 8001e34:	f000 fcb0 	bl	8002798 <myprintf>
      HAL_ADC_Stop_DMA(&hadc1);
 8001e38:	4821      	ldr	r0, [pc, #132]	@ (8001ec0 <main+0xa0c>)
 8001e3a:	f001 fb13 	bl	8003464 <HAL_ADC_Stop_DMA>
      HAL_ADC_Stop_DMA(&hadc2);
 8001e3e:	4821      	ldr	r0, [pc, #132]	@ (8001ec4 <main+0xa10>)
 8001e40:	f001 fb10 	bl	8003464 <HAL_ADC_Stop_DMA>
      HAL_ADC_Stop_DMA(&hadc3);
 8001e44:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <main+0xa14>)
 8001e46:	f001 fb0d 	bl	8003464 <HAL_ADC_Stop_DMA>
      HAL_TIM_Base_Stop_IT(&htim2);
 8001e4a:	4820      	ldr	r0, [pc, #128]	@ (8001ecc <main+0xa18>)
 8001e4c:	f004 fda0 	bl	8006990 <HAL_TIM_Base_Stop_IT>
      HAL_GPIO_WritePin(LED_INIT_GPIO_Port, LED_INIT_Pin, GPIO_PIN_RESET); // Init LED Off
 8001e50:	2200      	movs	r2, #0
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	481e      	ldr	r0, [pc, #120]	@ (8001ed0 <main+0xa1c>)
 8001e56:	f003 fb07 	bl	8005468 <HAL_GPIO_WritePin>
      while (1);
 8001e5a:	bf00      	nop
 8001e5c:	e7fd      	b.n	8001e5a <main+0x9a6>
 8001e5e:	bf00      	nop
 8001e60:	200065d8 	.word	0x200065d8
 8001e64:	20002590 	.word	0x20002590
 8001e68:	0800f020 	.word	0x0800f020
 8001e6c:	200005a6 	.word	0x200005a6
 8001e70:	200005a7 	.word	0x200005a7
 8001e74:	20006808 	.word	0x20006808
 8001e78:	20004570 	.word	0x20004570
 8001e7c:	0800f044 	.word	0x0800f044
 8001e80:	200005a8 	.word	0x200005a8
 8001e84:	200005b0 	.word	0x200005b0
 8001e88:	200015b0 	.word	0x200015b0
 8001e8c:	0800f068 	.word	0x0800f068
 8001e90:	200005a9 	.word	0x200005a9
 8001e94:	20003590 	.word	0x20003590
 8001e98:	0800f084 	.word	0x0800f084
 8001e9c:	200005aa 	.word	0x200005aa
 8001ea0:	20005570 	.word	0x20005570
 8001ea4:	0800f0a0 	.word	0x0800f0a0
 8001ea8:	01b77400 	.word	0x01b77400
 8001eac:	0800f0bc 	.word	0x0800f0bc
 8001eb0:	0800ee28 	.word	0x0800ee28
 8001eb4:	0800f0d8 	.word	0x0800f0d8
 8001eb8:	20000514 	.word	0x20000514
 8001ebc:	0800f0f0 	.word	0x0800f0f0
 8001ec0:	2000020c 	.word	0x2000020c
 8001ec4:	20000254 	.word	0x20000254
 8001ec8:	2000029c 	.word	0x2000029c
 8001ecc:	20000484 	.word	0x20000484
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b094      	sub	sp, #80	@ 0x50
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2234      	movs	r2, #52	@ 0x34
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00a f9aa 	bl	800c23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <SystemClock_Config+0xd0>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	4a28      	ldr	r2, [pc, #160]	@ (8001fa4 <SystemClock_Config+0xd0>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f08:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <SystemClock_Config+0xd0>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f44:	2308      	movs	r3, #8
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f48:	23a8      	movs	r3, #168	@ 0xa8
 8001f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fd61 	bl	8005a24 <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f68:	f000 fc10 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f70:	2302      	movs	r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fa86 	bl	800549c <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f96:	f000 fbf9 	bl	800278c <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	@ 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fc0:	4a22      	ldr	r2, [pc, #136]	@ (800204c <MX_ADC1_Init+0xa0>)
 8001fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fc6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fe8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001ff0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <MX_ADC1_Init+0x9c>)
 800200c:	2201      	movs	r2, #1
 800200e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002010:	480d      	ldr	r0, [pc, #52]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8002012:	f001 f8d3 	bl	80031bc <HAL_ADC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800201c:	f000 fbb6 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002020:	230b      	movs	r3, #11
 8002022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8002032:	f001 fa7b 	bl	800352c <HAL_ADC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800203c:	f000 fba6 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000020c 	.word	0x2000020c
 800204c:	40012000 	.word	0x40012000

08002050 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002056:	463b      	mov	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <MX_ADC2_Init+0x9c>)
 8002064:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <MX_ADC2_Init+0xa0>)
 8002066:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002068:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <MX_ADC2_Init+0x9c>)
 800206a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800206e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <MX_ADC2_Init+0x9c>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002076:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <MX_ADC2_Init+0x9c>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <MX_ADC2_Init+0x9c>)
 800207e:	2200      	movs	r2, #0
 8002080:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <MX_ADC2_Init+0x9c>)
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <MX_ADC2_Init+0x9c>)
 800208c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <MX_ADC2_Init+0x9c>)
 8002094:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209a:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <MX_ADC2_Init+0x9c>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <MX_ADC2_Init+0x9c>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MX_ADC2_Init+0x9c>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <MX_ADC2_Init+0x9c>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020b4:	480d      	ldr	r0, [pc, #52]	@ (80020ec <MX_ADC2_Init+0x9c>)
 80020b6:	f001 f881 	bl	80031bc <HAL_ADC_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80020c0:	f000 fb64 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020c4:	230c      	movs	r3, #12
 80020c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_ADC2_Init+0x9c>)
 80020d6:	f001 fa29 	bl	800352c <HAL_ADC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80020e0:	f000 fb54 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000254 	.word	0x20000254
 80020f0:	40012100 	.word	0x40012100

080020f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	463b      	mov	r3, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002106:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002108:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <MX_ADC3_Init+0xa0>)
 800210a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <MX_ADC3_Init+0x9c>)
 800210e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002112:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <MX_ADC3_Init+0x9c>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002122:	2200      	movs	r2, #0
 8002124:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800212e:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002130:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002138:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800213c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002146:	2201      	movs	r2, #1
 8002148:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <MX_ADC3_Init+0x9c>)
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <MX_ADC3_Init+0x9c>)
 8002154:	2201      	movs	r2, #1
 8002156:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <MX_ADC3_Init+0x9c>)
 800215a:	f001 f82f 	bl	80031bc <HAL_ADC_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8002164:	f000 fb12 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002168:	230d      	movs	r3, #13
 800216a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800216c:	2301      	movs	r3, #1
 800216e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_ADC3_Init+0x9c>)
 800217a:	f001 f9d7 	bl	800352c <HAL_ADC_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002184:	f000 fb02 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000029c 	.word	0x2000029c
 8002194:	40012200 	.word	0x40012200

08002198 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800219e:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021a0:	4a4d      	ldr	r2, [pc, #308]	@ (80022d8 <MX_CAN1_Init+0x140>)
 80021a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80021a4:	4b4b      	ldr	r3, [pc, #300]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021a6:	2214      	movs	r2, #20
 80021a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80021aa:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021b0:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021b8:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80021bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80021be:	4b45      	ldr	r3, [pc, #276]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021c0:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 80021c4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021d8:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80021ea:	483a      	ldr	r0, [pc, #232]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80021ec:	f001 fc4e 	bl	8003a8c <HAL_CAN_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80021f6:	f000 fac9 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80021fa:	2301      	movs	r3, #1
 80021fc:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // anything between 0 to SlaveStartFilterBank
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x011<<5;
 8002206:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800220a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x011<<5;
 8002210:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002214:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800221e:	2301      	movs	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8002222:	230d      	movs	r3, #13
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	482a      	ldr	r0, [pc, #168]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 800222c:	f001 fd2a 	bl	8003c84 <HAL_CAN_ConfigFilter>

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002230:	2301      	movs	r3, #1
 8002232:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 8002234:	2301      	movs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x012<<5;
 800223c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002240:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 8002246:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800224a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8002250:	2301      	movs	r3, #1
 8002252:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8002258:	230d      	movs	r3, #13
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	481c      	ldr	r0, [pc, #112]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 8002262:	f001 fd0f 	bl	8003c84 <HAL_CAN_ConfigFilter>

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;  // anything between 0 to SlaveStartFilterBank
 800226a:	2302      	movs	r3, #2
 800226c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x005<<5;
 8002272:	23a0      	movs	r3, #160	@ 0xa0
 8002274:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x005<<5;
 800227a:	23a0      	movs	r3, #160	@ 0xa0
 800227c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8002282:	2301      	movs	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002286:	2301      	movs	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 800228a:	230d      	movs	r3, #13
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800228e:	463b      	mov	r3, r7
 8002290:	4619      	mov	r1, r3
 8002292:	4810      	ldr	r0, [pc, #64]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 8002294:	f001 fcf6 	bl	8003c84 <HAL_CAN_ConfigFilter>

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002298:	2301      	movs	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 3;  // anything between 0 to SlaveStartFilterBank
 800229c:	2303      	movs	r3, #3
 800229e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x006<<5;
 80022a4:	23c0      	movs	r3, #192	@ 0xc0
 80022a6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x006<<5;
 80022ac:	23c0      	movs	r3, #192	@ 0xc0
 80022ae:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022b8:	2301      	movs	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 80022bc:	230d      	movs	r3, #13
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <MX_CAN1_Init+0x13c>)
 80022c6:	f001 fcdd 	bl	8003c84 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000404 	.word	0x20000404
 80022d8:	40006400 	.word	0x40006400

080022dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022e2:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <MX_SPI1_Init+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002308:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800230c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800230e:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002310:	2238      	movs	r2, #56	@ 0x38
 8002312:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <MX_SPI1_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002328:	220a      	movs	r2, #10
 800232a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <MX_SPI1_Init+0x64>)
 800232e:	f003 fe17 	bl	8005f60 <HAL_SPI_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002338:	f000 fa28 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000042c 	.word	0x2000042c
 8002344:	40013000 	.word	0x40013000

08002348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	463b      	mov	r3, r7
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002364:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <MX_TIM2_Init+0x94>)
 8002366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800236a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <MX_TIM2_Init+0x94>)
 800236e:	2253      	movs	r2, #83	@ 0x53
 8002370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <MX_TIM2_Init+0x94>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <MX_TIM2_Init+0x94>)
 800237a:	2263      	movs	r2, #99	@ 0x63
 800237c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <MX_TIM2_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <MX_TIM2_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800238a:	4814      	ldr	r0, [pc, #80]	@ (80023dc <MX_TIM2_Init+0x94>)
 800238c:	f004 fa40 	bl	8006810 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002396:	f000 f9f9 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <MX_TIM2_Init+0x94>)
 80023a8:	f004 fc11 	bl	8006bce <HAL_TIM_ConfigClockSource>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80023b2:	f000 f9eb 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023b6:	2320      	movs	r3, #32
 80023b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023be:	463b      	mov	r3, r7
 80023c0:	4619      	mov	r1, r3
 80023c2:	4806      	ldr	r0, [pc, #24]	@ (80023dc <MX_TIM2_Init+0x94>)
 80023c4:	f004 fe38 	bl	8007038 <HAL_TIMEx_MasterConfigSynchronization>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80023ce:	f000 f9dd 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000484 	.word	0x20000484

080023e0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <MX_TIM13_Init+0x3c>)
 80023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <MX_TIM13_Init+0x40>)
 80023e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80023ea:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_TIM13_Init+0x3c>)
 80023ec:	2253      	movs	r2, #83	@ 0x53
 80023ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <MX_TIM13_Init+0x3c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_TIM13_Init+0x3c>)
 80023f8:	2263      	movs	r2, #99	@ 0x63
 80023fa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <MX_TIM13_Init+0x3c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_TIM13_Init+0x3c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_TIM13_Init+0x3c>)
 800240a:	f004 fa01 	bl	8006810 <HAL_TIM_Base_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8002414:	f000 f9ba 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200004cc 	.word	0x200004cc
 8002420:	40001c00 	.word	0x40001c00

08002424 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <MX_TIM14_Init+0x40>)
 800242a:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <MX_TIM14_Init+0x44>)
 800242c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400-1;
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <MX_TIM14_Init+0x40>)
 8002430:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002434:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <MX_TIM14_Init+0x40>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <MX_TIM14_Init+0x40>)
 800243e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002442:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <MX_TIM14_Init+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <MX_TIM14_Init+0x40>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002450:	4804      	ldr	r0, [pc, #16]	@ (8002464 <MX_TIM14_Init+0x40>)
 8002452:	f004 f9dd 	bl	8006810 <HAL_TIM_Base_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800245c:	f000 f996 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000514 	.word	0x20000514
 8002468:	40002000 	.word	0x40002000

0800246c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002472:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <MX_UART4_Init+0x50>)
 8002474:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800247c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <MX_UART4_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002492:	220c      	movs	r2, #12
 8002494:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <MX_UART4_Init+0x4c>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <MX_UART4_Init+0x4c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <MX_UART4_Init+0x4c>)
 80024a4:	f004 fe58 	bl	8007158 <HAL_UART_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024ae:	f000 f96d 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000055c 	.word	0x2000055c
 80024bc:	40004c00 	.word	0x40004c00

080024c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_DMA_Init+0x5c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a13      	ldr	r2, [pc, #76]	@ (800251c <MX_DMA_Init+0x5c>)
 80024d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_DMA_Init+0x5c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	2038      	movs	r0, #56	@ 0x38
 80024e8:	f002 fa13 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024ec:	2038      	movs	r0, #56	@ 0x38
 80024ee:	f002 fa2c 	bl	800494a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2039      	movs	r0, #57	@ 0x39
 80024f8:	f002 fa0b 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024fc:	2039      	movs	r0, #57	@ 0x39
 80024fe:	f002 fa24 	bl	800494a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	203a      	movs	r0, #58	@ 0x3a
 8002508:	f002 fa03 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800250c:	203a      	movs	r0, #58	@ 0x3a
 800250e:	f002 fa1c 	bl	800494a <HAL_NVIC_EnableIRQ>

}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b18      	ldr	r3, [pc, #96]	@ (800259c <MX_GPIO_Init+0x7c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a17      	ldr	r2, [pc, #92]	@ (800259c <MX_GPIO_Init+0x7c>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <MX_GPIO_Init+0x7c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_GPIO_Init+0x7c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <MX_GPIO_Init+0x7c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <MX_GPIO_Init+0x7c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_INIT_GPIO_Port, LED_INIT_Pin, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	480b      	ldr	r0, [pc, #44]	@ (80025a0 <MX_GPIO_Init+0x80>)
 8002574:	f002 ff78 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_INIT_Pin */
  GPIO_InitStruct.Pin = LED_INIT_Pin;
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_INIT_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	4619      	mov	r1, r3
 800258e:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_GPIO_Init+0x80>)
 8002590:	f002 fdd6 	bl	8005140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002594:	bf00      	nop
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020800 	.word	0x40020800

080025a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d112      	bne.n	80025da <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    if (flush_timer == SD_FLUSH_TIME_FREQ_SEC)
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d106      	bne.n	80025cc <HAL_TIM_PeriodElapsedCallback+0x28>
    {
      rtf = 1;
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
      flush_timer = 0;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    }
    else
      flush_timer++;
  }
}
 80025ca:	e006      	b.n	80025da <HAL_TIM_PeriodElapsedCallback+0x36>
      flush_timer++;
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000514 	.word	0x20000514
 80025ec:	2000680a 	.word	0x2000680a
 80025f0:	200005a4 	.word	0x200005a4

080025f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f001 fd32 	bl	800406c <HAL_CAN_GetRxMessage>
  count++;
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002612:	701a      	strb	r2, [r3, #0]
  // myprintf("Received %d\n\r",RxData[1]);
  receive_flag = 1;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200065c4 	.word	0x200065c4
 8002628:	20006568 	.word	0x20006568
 800262c:	200065cc 	.word	0x200065cc
 8002630:	200005ac 	.word	0x200005ac

08002634 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10f      	bne.n	8002664 <HAL_ADC_ConvHalfCpltCallback+0x30>
  {
    const uint32_t timestamp = HAL_GetTick();
 8002644:	f000 fd8a 	bl	800315c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]
    adc_buffer_x[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8002650:	821a      	strh	r2, [r3, #16]
    adc_buffer_x[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 800265a:	825a      	strh	r2, [r3, #18]

    halfcpltx = 1;
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
    adc_buffer_z[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
    adc_buffer_z[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits

    halfcpltz = 1;
  }
}
 8002662:	e026      	b.n	80026b2 <HAL_ADC_ConvHalfCpltCallback+0x7e>
  else if (hadc == &hadc2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10f      	bne.n	800268c <HAL_ADC_ConvHalfCpltCallback+0x58>
    const uint32_t timestamp = HAL_GetTick();
 800266c:	f000 fd76 	bl	800315c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]
    adc_buffer_y[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8002678:	821a      	strh	r2, [r3, #16]
    adc_buffer_y[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8002682:	825a      	strh	r2, [r3, #18]
    halfcplty = 1;
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
}
 800268a:	e012      	b.n	80026b2 <HAL_ADC_ConvHalfCpltCallback+0x7e>
  else if (hadc == &hadc3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a11      	ldr	r2, [pc, #68]	@ (80026d4 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10e      	bne.n	80026b2 <HAL_ADC_ConvHalfCpltCallback+0x7e>
    const uint32_t timestamp = HAL_GetTick();
 8002694:	f000 fd62 	bl	800315c <HAL_GetTick>
 8002698:	6178      	str	r0, [r7, #20]
    adc_buffer_z[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80026a0:	821a      	strh	r2, [r3, #16]
    adc_buffer_z[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80026aa:	825a      	strh	r2, [r3, #18]
    halfcpltz = 1;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000020c 	.word	0x2000020c
 80026c0:	200005b0 	.word	0x200005b0
 80026c4:	200005a5 	.word	0x200005a5
 80026c8:	20000254 	.word	0x20000254
 80026cc:	20002590 	.word	0x20002590
 80026d0:	200005a6 	.word	0x200005a6
 80026d4:	2000029c 	.word	0x2000029c
 80026d8:	20004570 	.word	0x20004570
 80026dc:	200005a7 	.word	0x200005a7

080026e0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002768 <HAL_ADC_ConvCpltCallback+0x88>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10f      	bne.n	8002710 <HAL_ADC_ConvCpltCallback+0x30>
  {
    const uint32_t timestamp = HAL_GetTick();
 80026f0:	f000 fd34 	bl	800315c <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]
    adc_buffer_x[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b1c      	ldr	r3, [pc, #112]	@ (800276c <HAL_ADC_ConvCpltCallback+0x8c>)
 80026fc:	821a      	strh	r2, [r3, #16]
    adc_buffer_x[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_ADC_ConvCpltCallback+0x8c>)
 8002706:	825a      	strh	r2, [r3, #18]

    cpltx = 1;
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_ADC_ConvCpltCallback+0x90>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    adc_buffer_z[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
    adc_buffer_z[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits

    cpltz = 1;
  }
}
 800270e:	e026      	b.n	800275e <HAL_ADC_ConvCpltCallback+0x7e>
  else if (hadc == &hadc2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_ADC_ConvCpltCallback+0x94>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_ConvCpltCallback+0x58>
    const uint32_t timestamp = HAL_GetTick();
 8002718:	f000 fd20 	bl	800315c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]
    adc_buffer_y[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_ADC_ConvCpltCallback+0x98>)
 8002724:	821a      	strh	r2, [r3, #16]
    adc_buffer_y[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_ADC_ConvCpltCallback+0x98>)
 800272e:	825a      	strh	r2, [r3, #18]
    cplty = 1;
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	e012      	b.n	800275e <HAL_ADC_ConvCpltCallback+0x7e>
  else if (hadc == &hadc3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_ADC_ConvCpltCallback+0xa0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10e      	bne.n	800275e <HAL_ADC_ConvCpltCallback+0x7e>
    const uint32_t timestamp = HAL_GetTick();
 8002740:	f000 fd0c 	bl	800315c <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]
    adc_buffer_z[8] = (uint16_t)(timestamp & 0xFFFF);         // Lower 16 bits
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_ADC_ConvCpltCallback+0xa4>)
 800274c:	821a      	strh	r2, [r3, #16]
    adc_buffer_z[9] = (uint16_t)((timestamp >> 16) & 0xFFFF); // Upper 16 bits
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002756:	825a      	strh	r2, [r3, #18]
    cpltz = 1;
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_ADC_ConvCpltCallback+0xa8>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000020c 	.word	0x2000020c
 800276c:	200005b0 	.word	0x200005b0
 8002770:	200005a8 	.word	0x200005a8
 8002774:	20000254 	.word	0x20000254
 8002778:	20002590 	.word	0x20002590
 800277c:	200005a9 	.word	0x200005a9
 8002780:	2000029c 	.word	0x2000029c
 8002784:	20004570 	.word	0x20004570
 8002788:	200005aa 	.word	0x200005aa

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <Error_Handler+0x8>

08002798 <myprintf>:
  int len = strlen(buffer);
  HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, -1);
}
#else
void myprintf(const char *fmt, ...)
{
 8002798:	b40f      	push	{r0, r1, r2, r3}
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
	// Do nothing
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	b004      	add	sp, #16
 80027a8:	4770      	bx	lr
	...

080027ac <SDCard_file_write>:
 *   readBuf: line to be written
 *   line_written: counter for number of lines written
 * output:
 *   fres: see FRESULT from ff.h for definition
 */
FRESULT SDCard_file_write(FIL *fil, uint8_t *readBuf, uint32_t size, uint16_t *line_written) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
	FRESULT fres;
	UINT bytesWrote;
	fres = f_write(fil, readBuf, size, &bytesWrote);
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f007 fc70 	bl	800a0a8 <f_write>
 80027c8:	4603      	mov	r3, r0
 80027ca:	75fb      	strb	r3, [r7, #23]

	if (fres == FR_OK)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <SDCard_file_write+0x42>
	{
		(*line_written)++;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	801a      	strh	r2, [r3, #0]
		myprintf("Wrote %i bytes, %u lines written since last flush\r\n", bytesWrote, *line_written);
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4807      	ldr	r0, [pc, #28]	@ (8002804 <SDCard_file_write+0x58>)
 80027e8:	f7ff ffd6 	bl	8002798 <myprintf>
 80027ec:	e004      	b.n	80027f8 <SDCard_file_write+0x4c>
	}
	else
	{
		myprintf("f_write error (%i)\r\n", fres);
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <SDCard_file_write+0x5c>)
 80027f4:	f7ff ffd0 	bl	8002798 <myprintf>
	}

	return fres;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	0800f108 	.word	0x0800f108
 8002808:	0800f13c 	.word	0x0800f13c

0800280c <SDCard_file_flush_line_check>:
 *   fil: opened file handle
 *   line_written: counter for number of lines written
 * output:
 *   fres: see FRESULT from ff.h for definition
 */
FRESULT SDCard_file_flush_line_check(FIL *fil, uint16_t *line_written) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	FRESULT fres = FR_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]

	if (*line_written >= SD_FLUSH_LINE_SIZE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <SDCard_file_flush_line_check+0x4a>
	{
		// Flush
		fres = f_sync(fil);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f007 fdb5 	bl	800a392 <f_sync>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]

		if (fres == FR_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <SDCard_file_flush_line_check+0x40>
		{
			myprintf("Flushed after %i lines written\r\n", *line_written);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4809      	ldr	r0, [pc, #36]	@ (8002860 <SDCard_file_flush_line_check+0x54>)
 800283a:	f7ff ffad 	bl	8002798 <myprintf>
			(*line_written) = 0;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	801a      	strh	r2, [r3, #0]
			flush_timer = 0;
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <SDCard_file_flush_line_check+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e004      	b.n	8002856 <SDCard_file_flush_line_check+0x4a>
		}
		else
		{
			myprintf("f_sync error (%i)\r\n", fres);
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	@ (8002868 <SDCard_file_flush_line_check+0x5c>)
 8002852:	f7ff ffa1 	bl	8002798 <myprintf>
		}
	}

	return fres;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0800f154 	.word	0x0800f154
 8002864:	2000680a 	.word	0x2000680a
 8002868:	0800f178 	.word	0x0800f178

0800286c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_MspInit+0x4c>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	@ 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002b14 <HAL_ADC_MspInit+0x258>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d158      	bne.n	8002990 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a8c      	ldr	r2, [pc, #560]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	4b86      	ldr	r3, [pc, #536]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a85      	ldr	r2, [pc, #532]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b83      	ldr	r3, [pc, #524]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = xsignal_Pin;
 8002916:	2302      	movs	r3, #2
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800291a:	2303      	movs	r3, #3
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(xsignal_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	487c      	ldr	r0, [pc, #496]	@ (8002b1c <HAL_ADC_MspInit+0x260>)
 800292a:	f002 fc09 	bl	8005140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800292e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002930:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <HAL_ADC_MspInit+0x268>)
 8002932:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002934:	4b7a      	ldr	r3, [pc, #488]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800293a:	4b79      	ldr	r3, [pc, #484]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002940:	4b77      	ldr	r3, [pc, #476]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002946:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002948:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800294c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800294e:	4b74      	ldr	r3, [pc, #464]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002950:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002954:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002956:	4b72      	ldr	r3, [pc, #456]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800295c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800295e:	4b70      	ldr	r3, [pc, #448]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002960:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002964:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002966:	4b6e      	ldr	r3, [pc, #440]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002972:	486b      	ldr	r0, [pc, #428]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002974:	f002 f804 	bl	8004980 <HAL_DMA_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800297e:	f7ff ff05 	bl	800278c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a66      	ldr	r2, [pc, #408]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 8002986:	639a      	str	r2, [r3, #56]	@ 0x38
 8002988:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_ADC_MspInit+0x264>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800298e:	e0bc      	b.n	8002b0a <HAL_ADC_MspInit+0x24e>
  else if(hadc->Instance==ADC2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a64      	ldr	r2, [pc, #400]	@ (8002b28 <HAL_ADC_MspInit+0x26c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d159      	bne.n	8002a4e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a56      	ldr	r2, [pc, #344]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ysignal_Pin;
 80029d2:	2304      	movs	r3, #4
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d6:	2303      	movs	r3, #3
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ysignal_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e2:	4619      	mov	r1, r3
 80029e4:	484d      	ldr	r0, [pc, #308]	@ (8002b1c <HAL_ADC_MspInit+0x260>)
 80029e6:	f002 fbab 	bl	8005140 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80029ea:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 80029ec:	4a50      	ldr	r2, [pc, #320]	@ (8002b30 <HAL_ADC_MspInit+0x274>)
 80029ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80029f0:	4b4e      	ldr	r3, [pc, #312]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 80029f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b4b      	ldr	r3, [pc, #300]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a0c:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a14:	4b45      	ldr	r3, [pc, #276]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2a:	4b40      	ldr	r3, [pc, #256]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002a30:	483e      	ldr	r0, [pc, #248]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a32:	f001 ffa5 	bl	8004980 <HAL_DMA_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002a3c:	f7ff fea6 	bl	800278c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3a      	ldr	r2, [pc, #232]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a46:	4a39      	ldr	r2, [pc, #228]	@ (8002b2c <HAL_ADC_MspInit+0x270>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a4c:	e05d      	b.n	8002b0a <HAL_ADC_MspInit+0x24e>
  else if(hadc->Instance==ADC3)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a38      	ldr	r2, [pc, #224]	@ (8002b34 <HAL_ADC_MspInit+0x278>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d158      	bne.n	8002b0a <HAL_ADC_MspInit+0x24e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a66:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_ADC_MspInit+0x25c>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = zsignal_Pin;
 8002a90:	2308      	movs	r3, #8
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a94:	2303      	movs	r3, #3
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(zsignal_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	481e      	ldr	r0, [pc, #120]	@ (8002b1c <HAL_ADC_MspInit+0x260>)
 8002aa4:	f002 fb4c 	bl	8005140 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002aaa:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <HAL_ADC_MspInit+0x280>)
 8002aac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002aae:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002ab0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ab4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aca:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ad0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002ad4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ada:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002adc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ae0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002aee:	4812      	ldr	r0, [pc, #72]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002af0:	f001 ff46 	bl	8004980 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_ADC_MspInit+0x242>
      Error_Handler();
 8002afa:	f7ff fe47 	bl	800278c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002b02:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_ADC_MspInit+0x27c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b0a:	bf00      	nop
 8002b0c:	3738      	adds	r7, #56	@ 0x38
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012000 	.word	0x40012000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	200002e4 	.word	0x200002e4
 8002b24:	40026410 	.word	0x40026410
 8002b28:	40012100 	.word	0x40012100
 8002b2c:	20000344 	.word	0x20000344
 8002b30:	40026440 	.word	0x40026440
 8002b34:	40012200 	.word	0x40012200
 8002b38:	200003a4 	.word	0x200003a4
 8002b3c:	40026428 	.word	0x40026428

08002b40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	@ 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_CAN_MspInit+0x94>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d134      	bne.n	8002bcc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b72:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	4a14      	ldr	r2, [pc, #80]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_CAN_MspInit+0x98>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b9a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002bac:	2309      	movs	r3, #9
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4809      	ldr	r0, [pc, #36]	@ (8002bdc <HAL_CAN_MspInit+0x9c>)
 8002bb8:	f002 fac2 	bl	8005140 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2014      	movs	r0, #20
 8002bc2:	f001 fea6 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002bc6:	2014      	movs	r0, #20
 8002bc8:	f001 febf 	bl	800494a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40006400 	.word	0x40006400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <HAL_SPI_MspInit+0x84>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12b      	bne.n	8002c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <HAL_SPI_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CS_Pin|SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002c3a:	23f0      	movs	r3, #240	@ 0xf0
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <HAL_SPI_MspInit+0x8c>)
 8002c56:	f002 fa73 	bl	8005140 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40013000 	.word	0x40013000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a23      	ldr	r2, [pc, #140]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002c9e:	e036      	b.n	8002d0e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_TIM_Base_MspInit+0xac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d116      	bne.n	8002cd8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	202c      	movs	r0, #44	@ 0x2c
 8002ccc:	f001 fe21 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002cd0:	202c      	movs	r0, #44	@ 0x2c
 8002cd2:	f001 fe3a 	bl	800494a <HAL_NVIC_EnableIRQ>
}
 8002cd6:	e01a      	b.n	8002d0e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a10      	ldr	r2, [pc, #64]	@ (8002d20 <HAL_TIM_Base_MspInit+0xb0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d115      	bne.n	8002d0e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_TIM_Base_MspInit+0xa8>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	202d      	movs	r0, #45	@ 0x2d
 8002d04:	f001 fe05 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002d08:	202d      	movs	r0, #45	@ 0x2d
 8002d0a:	f001 fe1e 	bl	800494a <HAL_NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40001c00 	.word	0x40001c00
 8002d20:	40002000 	.word	0x40002000

08002d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	@ 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_UART_MspInit+0x84>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12c      	bne.n	8002da0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	4a17      	ldr	r2, [pc, #92]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <HAL_UART_MspInit+0x88>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_UART_TX_Pin|STLINK_UART_RX_Pin;
 8002d7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d90:	2308      	movs	r3, #8
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <HAL_UART_MspInit+0x8c>)
 8002d9c:	f002 f9d0 	bl	8005140 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	@ 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40004c00 	.word	0x40004c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020800 	.word	0x40020800

08002db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <NMI_Handler+0x4>

08002dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0a:	f000 f993 	bl	8003134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <CAN1_RX0_IRQHandler+0x10>)
 8002e1a:	f001 fa6f 	bl	80042fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000404 	.word	0x20000404

08002e28 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002e2e:	f003 fdde 	bl	80069ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200004cc 	.word	0x200004cc

08002e3c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e40:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e42:	f003 fdd4 	bl	80069ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000514 	.word	0x20000514

08002e50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <DMA2_Stream0_IRQHandler+0x10>)
 8002e56:	f001 ff09 	bl	8004c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200002e4 	.word	0x200002e4

08002e64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <DMA2_Stream1_IRQHandler+0x10>)
 8002e6a:	f001 feff 	bl	8004c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200003a4 	.word	0x200003a4

08002e78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <DMA2_Stream2_IRQHandler+0x10>)
 8002e7e:	f001 fef5 	bl	8004c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000344 	.word	0x20000344

08002e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_kill>:

int _kill(int pid, int sig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ea6:	f009 f9d5 	bl	800c254 <__errno>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2216      	movs	r2, #22
 8002eae:	601a      	str	r2, [r3, #0]
  return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_exit>:

void _exit (int status)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ffe7 	bl	8002e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <_exit+0x12>

08002ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e00a      	b.n	8002efa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	4601      	mov	r1, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	60ba      	str	r2, [r7, #8]
 8002ef0:	b2ca      	uxtb	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	dbf0      	blt.n	8002ee4 <_read+0x12>
  }

  return len;
 8002f02:	687b      	ldr	r3, [r7, #4]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e009      	b.n	8002f32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	60ba      	str	r2, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	dbf1      	blt.n	8002f1e <_write+0x12>
  }
  return len;
 8002f3a:	687b      	ldr	r3, [r7, #4]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_close>:

int _close(int file)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_isatty>:

int _isatty(int file)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f84:	2301      	movs	r3, #1
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb4:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <_sbrk+0x5c>)
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <_sbrk+0x60>)
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <_sbrk+0x64>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	@ (8003014 <_sbrk+0x68>)
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d207      	bcs.n	8002fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fdc:	f009 f93a 	bl	800c254 <__errno>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fea:	e009      	b.n	8003000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <_sbrk+0x64>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <_sbrk+0x64>)
 8002ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20020000 	.word	0x20020000
 800300c:	00000400 	.word	0x00000400
 8003010:	2000680c 	.word	0x2000680c
 8003014:	200069a8 	.word	0x200069a8

08003018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <SystemInit+0x20>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <SystemInit+0x20>)
 8003024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003040:	f7ff ffea 	bl	8003018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	@ (800307c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800306a:	f009 f8f9 	bl	800c260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fe fa21 	bl	80014b4 <main>
  bx  lr    
 8003072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800307c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003080:	0800f6ac 	.word	0x0800f6ac
  ldr r2, =_sbss
 8003084:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003088:	200069a8 	.word	0x200069a8

0800308c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0d      	ldr	r2, [pc, #52]	@ (80030d0 <HAL_Init+0x40>)
 800309a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_Init+0x40>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_Init+0x40>)
 80030a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <HAL_Init+0x40>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_Init+0x40>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b8:	2003      	movs	r0, #3
 80030ba:	f001 fc1f 	bl	80048fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030be:	200f      	movs	r0, #15
 80030c0:	f000 f808 	bl	80030d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c4:	f7ff fbd2 	bl	800286c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x54>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_InitTick+0x58>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fc37 	bl	8004966 <HAL_SYSTICK_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00e      	b.n	8003120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d80a      	bhi.n	800311e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003108:	2200      	movs	r2, #0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003110:	f001 fbff 	bl	8004912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003114:	4a06      	ldr	r2, [pc, #24]	@ (8003130 <HAL_InitTick+0x5c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000004 	.word	0x20000004
 800312c:	2000000c 	.word	0x2000000c
 8003130:	20000008 	.word	0x20000008

08003134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_IncTick+0x20>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_IncTick+0x24>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_IncTick+0x24>)
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c
 8003158:	20006810 	.word	0x20006810

0800315c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_GetTick+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20006810 	.word	0x20006810

08003174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff ffee 	bl	800315c <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318c:	d005      	beq.n	800319a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_Delay+0x44>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800319a:	bf00      	nop
 800319c:	f7ff ffde 	bl	800315c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f7      	bhi.n	800319c <HAL_Delay+0x28>
  {
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000000c 	.word	0x2000000c

080031bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e033      	b.n	800323a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fb6e 	bl	80028bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003202:	f023 0302 	bic.w	r3, r3, #2
 8003206:	f043 0202 	orr.w	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fabe 	bl	8003790 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
 800322a:	e001      	b.n	8003230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Start_DMA+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e0e9      	b.n	8003436 <HAL_ADC_Start_DMA+0x1f2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d018      	beq.n	80032aa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003288:	4b6d      	ldr	r3, [pc, #436]	@ (8003440 <HAL_ADC_Start_DMA+0x1fc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6d      	ldr	r2, [pc, #436]	@ (8003444 <HAL_ADC_Start_DMA+0x200>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9a      	lsrs	r2, r3, #18
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800329c:	e002      	b.n	80032a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f9      	bne.n	800329e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b8:	d107      	bne.n	80032ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f040 80a1 	bne.w	800341c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003304:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003318:	d106      	bne.n	8003328 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	f023 0206 	bic.w	r2, r3, #6
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
 8003326:	e002      	b.n	800332e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003336:	4b44      	ldr	r3, [pc, #272]	@ (8003448 <HAL_ADC_Start_DMA+0x204>)
 8003338:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	4a43      	ldr	r2, [pc, #268]	@ (800344c <HAL_ADC_Start_DMA+0x208>)
 8003340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	4a42      	ldr	r2, [pc, #264]	@ (8003450 <HAL_ADC_Start_DMA+0x20c>)
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	4a41      	ldr	r2, [pc, #260]	@ (8003454 <HAL_ADC_Start_DMA+0x210>)
 8003350:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800335a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800336a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800337a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	334c      	adds	r3, #76	@ 0x4c
 8003386:	4619      	mov	r1, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f001 fba6 	bl	8004adc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12a      	bne.n	80033f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003458 <HAL_ADC_Start_DMA+0x214>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d015      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x18e>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <HAL_ADC_Start_DMA+0x218>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_Start_DMA+0x178>
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_ADC_Start_DMA+0x204>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a27      	ldr	r2, [pc, #156]	@ (8003460 <HAL_ADC_Start_DMA+0x21c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d136      	bne.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
 80033c6:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_ADC_Start_DMA+0x204>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d130      	bne.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d129      	bne.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e020      	b.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a18      	ldr	r2, [pc, #96]	@ (8003458 <HAL_ADC_Start_DMA+0x214>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d11b      	bne.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d114      	bne.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e00b      	b.n	8003434 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000004 	.word	0x20000004
 8003444:	431bde83 	.word	0x431bde83
 8003448:	40012300 	.word	0x40012300
 800344c:	08003989 	.word	0x08003989
 8003450:	08003a43 	.word	0x08003a43
 8003454:	08003a5f 	.word	0x08003a5f
 8003458:	40012000 	.word	0x40012000
 800345c:	40012100 	.word	0x40012100
 8003460:	40012200 	.word	0x40012200

08003464 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ADC_Stop_DMA+0x1a>
 800347a:	2302      	movs	r3, #2
 800347c:	e048      	b.n	8003510 <HAL_ADC_Stop_DMA+0xac>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d130      	bne.n	8003506 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d10f      	bne.n	80034e2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fb60 	bl	8004b8c <HAL_DMA_Abort>
 80034cc:	4603      	mov	r3, r0
 80034ce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80034f0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x1c>
 8003544:	2302      	movs	r3, #2
 8003546:	e113      	b.n	8003770 <HAL_ADC_ConfigChannel+0x244>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b09      	cmp	r3, #9
 8003556:	d925      	bls.n	80035a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68d9      	ldr	r1, [r3, #12]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	3b1e      	subs	r3, #30
 800356e:	2207      	movs	r2, #7
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43da      	mvns	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	400a      	ands	r2, r1
 800357c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68d9      	ldr	r1, [r3, #12]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	4618      	mov	r0, r3
 8003590:	4603      	mov	r3, r0
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4403      	add	r3, r0
 8003596:	3b1e      	subs	r3, #30
 8003598:	409a      	lsls	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e022      	b.n	80035ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6919      	ldr	r1, [r3, #16]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	2207      	movs	r2, #7
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	400a      	ands	r2, r1
 80035c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6919      	ldr	r1, [r3, #16]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4403      	add	r3, r0
 80035e0:	409a      	lsls	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d824      	bhi.n	800363c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b05      	subs	r3, #5
 8003604:	221f      	movs	r2, #31
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	400a      	ands	r2, r1
 8003612:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	4618      	mov	r0, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b05      	subs	r3, #5
 800362e:	fa00 f203 	lsl.w	r2, r0, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34
 800363a:	e04c      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d824      	bhi.n	800368e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b23      	subs	r3, #35	@ 0x23
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43da      	mvns	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	400a      	ands	r2, r1
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3b23      	subs	r3, #35	@ 0x23
 8003680:	fa00 f203 	lsl.w	r2, r0, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
 800368c:	e023      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b41      	subs	r3, #65	@ 0x41
 80036a0:	221f      	movs	r2, #31
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	400a      	ands	r2, r1
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4618      	mov	r0, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b41      	subs	r3, #65	@ 0x41
 80036ca:	fa00 f203 	lsl.w	r2, r0, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036d6:	4b29      	ldr	r3, [pc, #164]	@ (800377c <HAL_ADC_ConfigChannel+0x250>)
 80036d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a28      	ldr	r2, [pc, #160]	@ (8003780 <HAL_ADC_ConfigChannel+0x254>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10f      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1d8>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b12      	cmp	r3, #18
 80036ea:	d10b      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <HAL_ADC_ConfigChannel+0x254>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d12b      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x23a>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_ADC_ConfigChannel+0x258>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <HAL_ADC_ConfigChannel+0x1f4>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b11      	cmp	r3, #17
 800371e:	d122      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <HAL_ADC_ConfigChannel+0x258>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d111      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_ADC_ConfigChannel+0x25c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_ADC_ConfigChannel+0x260>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	0c9a      	lsrs	r2, r3, #18
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003758:	e002      	b.n	8003760 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40012300 	.word	0x40012300
 8003780:	40012000 	.word	0x40012000
 8003784:	10000012 	.word	0x10000012
 8003788:	20000004 	.word	0x20000004
 800378c:	431bde83 	.word	0x431bde83

08003790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003798:	4b79      	ldr	r3, [pc, #484]	@ (8003980 <ADC_Init+0x1f0>)
 800379a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	021a      	lsls	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	4a58      	ldr	r2, [pc, #352]	@ (8003984 <ADC_Init+0x1f4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e00f      	b.n	800388e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800387c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800388c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0202 	bic.w	r2, r2, #2
 800389c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7e1b      	ldrb	r3, [r3, #24]
 80038a8:	005a      	lsls	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	3b01      	subs	r3, #1
 80038e8:	035a      	lsls	r2, r3, #13
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e007      	b.n	8003904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	3b01      	subs	r3, #1
 8003920:	051a      	lsls	r2, r3, #20
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6899      	ldr	r1, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003946:	025a      	lsls	r2, r3, #9
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	029a      	lsls	r2, r3, #10
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40012300 	.word	0x40012300
 8003984:	0f000001 	.word	0x0f000001

08003988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d13c      	bne.n	8003a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d127      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fe fe63 	bl	80026e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a1a:	e00e      	b.n	8003a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff fd75 	bl	8003518 <HAL_ADC_ErrorCallback>
}
 8003a2e:	e004      	b.n	8003a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7fe fdef 	bl	8002634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	@ 0x40
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff fd4a 	bl	8003518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0ed      	b.n	8003c7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff f848 	bl	8002b40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac0:	f7ff fb4c 	bl	800315c <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ac6:	e012      	b.n	8003aee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ac8:	f7ff fb48 	bl	800315c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b0a      	cmp	r3, #10
 8003ad4:	d90b      	bls.n	8003aee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0c5      	b.n	8003c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0e5      	beq.n	8003ac8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0202 	bic.w	r2, r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b0c:	f7ff fb26 	bl	800315c <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b12:	e012      	b.n	8003b3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b14:	f7ff fb22 	bl	800315c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b0a      	cmp	r3, #10
 8003b20:	d90b      	bls.n	8003b3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2205      	movs	r2, #5
 8003b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e09f      	b.n	8003c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7e1b      	ldrb	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7e5b      	ldrb	r3, [r3, #25]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e007      	b.n	8003b9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7e9b      	ldrb	r3, [r3, #26]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0220 	bic.w	r2, r2, #32
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7edb      	ldrb	r3, [r3, #27]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e007      	b.n	8003bf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0210 	orr.w	r2, r2, #16
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7f1b      	ldrb	r3, [r3, #28]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0208 	orr.w	r2, r2, #8
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e007      	b.n	8003c1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0208 	bic.w	r2, r2, #8
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7f5b      	ldrb	r3, [r3, #29]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d108      	bne.n	8003c34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0204 	orr.w	r2, r2, #4
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e007      	b.n	8003c44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d003      	beq.n	8003caa <HAL_CAN_ConfigFilter+0x26>
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f040 80be 	bne.w	8003e26 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003caa:	4b65      	ldr	r3, [pc, #404]	@ (8003e40 <HAL_CAN_ConfigFilter+0x1bc>)
 8003cac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003cc4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d123      	bne.n	8003d54 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	401a      	ands	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3248      	adds	r2, #72	@ 0x48
 8003d34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	3348      	adds	r3, #72	@ 0x48
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d122      	bne.n	8003da2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3248      	adds	r2, #72	@ 0x48
 8003d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	3348      	adds	r3, #72	@ 0x48
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	401a      	ands	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003dbc:	e007      	b.n	8003dce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	401a      	ands	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003de8:	e007      	b.n	8003dfa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e18:	f023 0201 	bic.w	r2, r3, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e006      	b.n	8003e34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40006400 	.word	0x40006400

08003e44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d12e      	bne.n	8003eb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e70:	f7ff f974 	bl	800315c <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e76:	e012      	b.n	8003e9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e78:	f7ff f970 	bl	800315c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b0a      	cmp	r3, #10
 8003e84:	d90b      	bls.n	8003e9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2205      	movs	r2, #5
 8003e96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e012      	b.n	8003ec4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e006      	b.n	8003ec4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	@ 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d003      	beq.n	8003ef8 <HAL_CAN_AddTxMessage+0x2c>
 8003ef0:	7ffb      	ldrb	r3, [r7, #31]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	f040 80ad 	bne.w	8004052 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8095 	beq.w	8004042 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	0e1b      	lsrs	r3, r3, #24
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f22:	2201      	movs	r2, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	409a      	lsls	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	6809      	ldr	r1, [r1, #0]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3318      	adds	r3, #24
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	440b      	add	r3, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e00f      	b.n	8003f70 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	440b      	add	r3, r1
 8003f6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	440b      	add	r3, r1
 8003f80:	3304      	adds	r3, #4
 8003f82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	7d1b      	ldrb	r3, [r3, #20]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d111      	bne.n	8003fb0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3318      	adds	r3, #24
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	6811      	ldr	r1, [r2, #0]
 8003fa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3318      	adds	r3, #24
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	440b      	add	r3, r1
 8003fac:	3304      	adds	r3, #4
 8003fae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	061a      	lsls	r2, r3, #24
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3306      	adds	r3, #6
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3305      	adds	r3, #5
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	3204      	adds	r2, #4
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	6811      	ldr	r1, [r2, #0]
 8003fd8:	ea43 0200 	orr.w	r2, r3, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003fe6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3303      	adds	r3, #3
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	061a      	lsls	r2, r3, #24
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	4313      	orrs	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	4610      	mov	r0, r2
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	ea43 0200 	orr.w	r2, r3, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	440b      	add	r3, r1
 8004018:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800401c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3318      	adds	r3, #24
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	4413      	add	r3, r2
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6811      	ldr	r1, [r2, #0]
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3318      	adds	r3, #24
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	440b      	add	r3, r1
 800403c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e00e      	b.n	8004060 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e006      	b.n	8004060 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3724      	adds	r7, #36	@ 0x24
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004080:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d003      	beq.n	8004090 <HAL_CAN_GetRxMessage+0x24>
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b02      	cmp	r3, #2
 800408c:	f040 8103 	bne.w	8004296 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0f7      	b.n	80042a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0e8      	b.n	80042a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	331b      	adds	r3, #27
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0204 	and.w	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	331b      	adds	r3, #27
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0d5b      	lsrs	r3, r3, #21
 8004100:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e00b      	b.n	8004122 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	331b      	adds	r3, #27
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	331b      	adds	r3, #27
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0202 	and.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	331b      	adds	r3, #27
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2208      	movs	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	e00b      	b.n	8004170 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	331b      	adds	r3, #27
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	3304      	adds	r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	331b      	adds	r3, #27
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	331b      	adds	r3, #27
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	4413      	add	r3, r2
 80041c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0a1a      	lsrs	r2, r3, #8
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4413      	add	r3, r2
 80041da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0c1a      	lsrs	r2, r3, #16
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	3302      	adds	r3, #2
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0e1a      	lsrs	r2, r3, #24
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	3303      	adds	r3, #3
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0a1a      	lsrs	r2, r3, #8
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3305      	adds	r3, #5
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0c1a      	lsrs	r2, r3, #16
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	3306      	adds	r3, #6
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e1a      	lsrs	r2, r3, #24
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	3307      	adds	r3, #7
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d108      	bne.n	8004282 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0220 	orr.w	r2, r2, #32
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e007      	b.n	8004292 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0220 	orr.w	r2, r2, #32
 8004290:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e006      	b.n	80042a4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <HAL_CAN_ActivateNotification+0x1e>
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d109      	bne.n	80042e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6959      	ldr	r1, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e006      	b.n	80042f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004304:	2300      	movs	r3, #0
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d07c      	beq.n	800443c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d023      	beq.n	8004394 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f983 	bl	800466a <HAL_CAN_TxMailbox0CompleteCallback>
 8004364:	e016      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
 8004378:	e00c      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
 800438c:	e002      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f989 	bl	80046a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f963 	bl	800467e <HAL_CAN_TxMailbox1CompleteCallback>
 80043b8:	e016      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80043cc:	e00c      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e0:	e002      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f969 	bl	80046ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d024      	beq.n	800443c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f943 	bl	8004692 <HAL_CAN_TxMailbox2CompleteCallback>
 800440c:	e016      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004420:	e00c      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
 8004434:	e002      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f949 	bl	80046ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2208      	movs	r2, #8
 800447a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f930 	bl	80046e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe f8aa 	bl	80025f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2210      	movs	r2, #16
 80044c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f912 	bl	800470a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8f9 	bl	80046f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8fc 	bl	800471e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2208      	movs	r2, #8
 8004540:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8f5 	bl	8004732 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d07b      	beq.n	800464a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d072      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d043      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03e      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ca:	2b60      	cmp	r3, #96	@ 0x60
 80045cc:	d02b      	beq.n	8004626 <HAL_CAN_IRQHandler+0x32a>
 80045ce:	2b60      	cmp	r3, #96	@ 0x60
 80045d0:	d82e      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045d2:	2b50      	cmp	r3, #80	@ 0x50
 80045d4:	d022      	beq.n	800461c <HAL_CAN_IRQHandler+0x320>
 80045d6:	2b50      	cmp	r3, #80	@ 0x50
 80045d8:	d82a      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d019      	beq.n	8004612 <HAL_CAN_IRQHandler+0x316>
 80045de:	2b40      	cmp	r3, #64	@ 0x40
 80045e0:	d826      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045e2:	2b30      	cmp	r3, #48	@ 0x30
 80045e4:	d010      	beq.n	8004608 <HAL_CAN_IRQHandler+0x30c>
 80045e6:	2b30      	cmp	r3, #48	@ 0x30
 80045e8:	d822      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d002      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x2f8>
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d005      	beq.n	80045fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045f2:	e01d      	b.n	8004630 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045fc:	e019      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004606:	e014      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004610:	e00f      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800461a:	e00a      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004624:	e005      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800462e:	e000      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            break;
 8004630:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004640:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2204      	movs	r2, #4
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f872 	bl	8004746 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004662:	bf00      	nop
 8004664:	3728      	adds	r7, #40	@ 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <__NVIC_SetPriorityGrouping+0x44>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004778:	4013      	ands	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800478e:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	60d3      	str	r3, [r2, #12]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <__NVIC_GetPriorityGrouping+0x18>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f003 0307 	and.w	r3, r3, #7
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	db0b      	blt.n	80047ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	4907      	ldr	r1, [pc, #28]	@ (80047f8 <__NVIC_EnableIRQ+0x38>)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2001      	movs	r0, #1
 80047e2:	fa00 f202 	lsl.w	r2, r0, r2
 80047e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000e100 	.word	0xe000e100

080047fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db0a      	blt.n	8004826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	490c      	ldr	r1, [pc, #48]	@ (8004848 <__NVIC_SetPriority+0x4c>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	0112      	lsls	r2, r2, #4
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	440b      	add	r3, r1
 8004820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004824:	e00a      	b.n	800483c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <__NVIC_SetPriority+0x50>)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	3b04      	subs	r3, #4
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	440b      	add	r3, r1
 800483a:	761a      	strb	r2, [r3, #24]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000e100 	.word	0xe000e100
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f1c3 0307 	rsb	r3, r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf28      	it	cs
 800486e:	2304      	movcs	r3, #4
 8004870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3304      	adds	r3, #4
 8004876:	2b06      	cmp	r3, #6
 8004878:	d902      	bls.n	8004880 <NVIC_EncodePriority+0x30>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3b03      	subs	r3, #3
 800487e:	e000      	b.n	8004882 <NVIC_EncodePriority+0x32>
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	401a      	ands	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	43d9      	mvns	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	4313      	orrs	r3, r2
         );
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c8:	d301      	bcc.n	80048ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00f      	b.n	80048ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ce:	4a0a      	ldr	r2, [pc, #40]	@ (80048f8 <SysTick_Config+0x40>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d6:	210f      	movs	r1, #15
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048dc:	f7ff ff8e 	bl	80047fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <SysTick_Config+0x40>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e6:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <SysTick_Config+0x40>)
 80048e8:	2207      	movs	r2, #7
 80048ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000e010 	.word	0xe000e010

080048fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff29 	bl	800475c <__NVIC_SetPriorityGrouping>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004924:	f7ff ff3e 	bl	80047a4 <__NVIC_GetPriorityGrouping>
 8004928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	6978      	ldr	r0, [r7, #20]
 8004930:	f7ff ff8e 	bl	8004850 <NVIC_EncodePriority>
 8004934:	4602      	mov	r2, r0
 8004936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff5d 	bl	80047fc <__NVIC_SetPriority>
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff31 	bl	80047c0 <__NVIC_EnableIRQ>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ffa2 	bl	80048b8 <SysTick_Config>
 8004974:	4603      	mov	r3, r0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7fe fbe6 	bl	800315c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e099      	b.n	8004ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049bc:	e00f      	b.n	80049de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049be:	f7fe fbcd 	bl	800315c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d908      	bls.n	80049de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2203      	movs	r2, #3
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e078      	b.n	8004ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e8      	bne.n	80049be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4b38      	ldr	r3, [pc, #224]	@ (8004ad8 <HAL_DMA_Init+0x158>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	4313      	orrs	r3, r2
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d117      	bne.n	8004aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fadf 	bl	8005048 <DMA_CheckFifoParam>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2240      	movs	r2, #64	@ 0x40
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e016      	b.n	8004ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa96 	bl	8004fdc <DMA_CalcBaseAndBitshift>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	223f      	movs	r2, #63	@ 0x3f
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	f010803f 	.word	0xf010803f

08004adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_DMA_Start_IT+0x26>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e040      	b.n	8004b84 <HAL_DMA_Start_IT+0xa8>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d12f      	bne.n	8004b76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fa28 	bl	8004f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b34:	223f      	movs	r2, #63	@ 0x3f
 8004b36:	409a      	lsls	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0216 	orr.w	r2, r2, #22
 8004b4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e005      	b.n	8004b82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b9a:	f7fe fadf 	bl	800315c <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2280      	movs	r2, #128	@ 0x80
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e052      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0216 	bic.w	r2, r2, #22
 8004bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_DMA_Abort+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0e:	e013      	b.n	8004c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c10:	f7fe faa4 	bl	800315c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d90c      	bls.n	8004c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2203      	movs	r2, #3
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e015      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e4      	bne.n	8004c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	223f      	movs	r2, #63	@ 0x3f
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c78:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb4 <HAL_DMA_IRQHandler+0x248>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8004eb8 <HAL_DMA_IRQHandler+0x24c>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	2208      	movs	r2, #8
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	2201      	movs	r2, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	2204      	movs	r2, #4
 8004d14:	409a      	lsls	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	2204      	movs	r2, #4
 8004d32:	409a      	lsls	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	2210      	movs	r2, #16
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d043      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03c      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	2210      	movs	r2, #16
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d024      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
 8004d9a:	e01f      	b.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e016      	b.n	8004ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d107      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0208 	bic.w	r2, r2, #8
 8004dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	2220      	movs	r2, #32
 8004de2:	409a      	lsls	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 808f 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8087 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e02:	2220      	movs	r2, #32
 8004e04:	409a      	lsls	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d136      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0216 	bic.w	r2, r2, #22
 8004e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x1da>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0208 	bic.w	r2, r2, #8
 8004e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	223f      	movs	r2, #63	@ 0x3f
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07e      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
        }
        return;
 8004e82:	e079      	b.n	8004f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01d      	beq.n	8004ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d031      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
 8004eb0:	e02c      	b.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
 8004eb2:	bf00      	nop
 8004eb4:	20000004 	.word	0x20000004
 8004eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
 8004ecc:	e01e      	b.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0210 	bic.w	r2, r2, #16
 8004eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d032      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2205      	movs	r2, #5
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d307      	bcc.n	8004f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f2      	bne.n	8004f38 <HAL_DMA_IRQHandler+0x2cc>
 8004f52:	e000      	b.n	8004f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	e000      	b.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f78:	bf00      	nop
    }
  }
}
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d108      	bne.n	8004fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fbe:	e007      	b.n	8004fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3b10      	subs	r3, #16
 8004fec:	4a14      	ldr	r2, [pc, #80]	@ (8005040 <DMA_CalcBaseAndBitshift+0x64>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ff6:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <DMA_CalcBaseAndBitshift+0x68>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d909      	bls.n	800501e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58
 800501c:	e007      	b.n	800502e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	aaaaaaab 	.word	0xaaaaaaab
 8005044:	0800f1e8 	.word	0x0800f1e8

08005048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11f      	bne.n	80050a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d856      	bhi.n	8005116 <DMA_CheckFifoParam+0xce>
 8005068:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <DMA_CheckFifoParam+0x28>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005081 	.word	0x08005081
 8005074:	08005093 	.word	0x08005093
 8005078:	08005081 	.word	0x08005081
 800507c:	08005117 	.word	0x08005117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d046      	beq.n	800511a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e043      	b.n	800511a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800509a:	d140      	bne.n	800511e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a0:	e03d      	b.n	800511e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050aa:	d121      	bne.n	80050f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d837      	bhi.n	8005122 <DMA_CheckFifoParam+0xda>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <DMA_CheckFifoParam+0x70>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050cf 	.word	0x080050cf
 80050c0:	080050c9 	.word	0x080050c9
 80050c4:	080050e1 	.word	0x080050e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e030      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d025      	beq.n	8005126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050de:	e022      	b.n	8005126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050e8:	d11f      	bne.n	800512a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ee:	e01c      	b.n	800512a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d903      	bls.n	80050fe <DMA_CheckFifoParam+0xb6>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050fc:	e018      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      break;
 8005102:	e015      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e00b      	b.n	800512e <DMA_CheckFifoParam+0xe6>
      break;
 8005116:	bf00      	nop
 8005118:	e00a      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800511a:	bf00      	nop
 800511c:	e008      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800511e:	bf00      	nop
 8005120:	e006      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;   
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800512e:	bf00      	nop
    }
  } 
  
  return status; 
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e165      	b.n	8005428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800515c:	2201      	movs	r2, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	f040 8154 	bne.w	8005422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d005      	beq.n	8005192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800518e:	2b02      	cmp	r3, #2
 8005190:	d130      	bne.n	80051f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c8:	2201      	movs	r2, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 0201 	and.w	r2, r3, #1
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d017      	beq.n	8005230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d123      	bne.n	8005284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	08da      	lsrs	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3208      	adds	r2, #8
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	220f      	movs	r2, #15
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	08da      	lsrs	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3208      	adds	r2, #8
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	2203      	movs	r2, #3
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0203 	and.w	r2, r3, #3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80ae 	beq.w	8005422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052d6:	4b5a      	ldr	r3, [pc, #360]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052e2:	4a58      	ldr	r2, [pc, #352]	@ (8005444 <HAL_GPIO_Init+0x304>)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	220f      	movs	r2, #15
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4f      	ldr	r2, [pc, #316]	@ (8005448 <HAL_GPIO_Init+0x308>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d025      	beq.n	800535a <HAL_GPIO_Init+0x21a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a4e      	ldr	r2, [pc, #312]	@ (800544c <HAL_GPIO_Init+0x30c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <HAL_GPIO_Init+0x216>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a4d      	ldr	r2, [pc, #308]	@ (8005450 <HAL_GPIO_Init+0x310>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d019      	beq.n	8005352 <HAL_GPIO_Init+0x212>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a4c      	ldr	r2, [pc, #304]	@ (8005454 <HAL_GPIO_Init+0x314>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_GPIO_Init+0x20e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a4b      	ldr	r2, [pc, #300]	@ (8005458 <HAL_GPIO_Init+0x318>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_GPIO_Init+0x20a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a4a      	ldr	r2, [pc, #296]	@ (800545c <HAL_GPIO_Init+0x31c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <HAL_GPIO_Init+0x206>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a49      	ldr	r2, [pc, #292]	@ (8005460 <HAL_GPIO_Init+0x320>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_GPIO_Init+0x202>
 800533e:	2306      	movs	r3, #6
 8005340:	e00c      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005342:	2307      	movs	r3, #7
 8005344:	e00a      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005346:	2305      	movs	r3, #5
 8005348:	e008      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800534a:	2304      	movs	r3, #4
 800534c:	e006      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800534e:	2303      	movs	r3, #3
 8005350:	e004      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005352:	2302      	movs	r3, #2
 8005354:	e002      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800535a:	2300      	movs	r3, #0
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	f002 0203 	and.w	r2, r2, #3
 8005362:	0092      	lsls	r2, r2, #2
 8005364:	4093      	lsls	r3, r2
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800536c:	4935      	ldr	r1, [pc, #212]	@ (8005444 <HAL_GPIO_Init+0x304>)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537a:	4b3a      	ldr	r3, [pc, #232]	@ (8005464 <HAL_GPIO_Init+0x324>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800539e:	4a31      	ldr	r2, [pc, #196]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c8:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053ce:	4b25      	ldr	r3, [pc, #148]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800541c:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <HAL_GPIO_Init+0x324>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	f67f ae96 	bls.w	800515c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3724      	adds	r7, #36	@ 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	40013800 	.word	0x40013800
 8005448:	40020000 	.word	0x40020000
 800544c:	40020400 	.word	0x40020400
 8005450:	40020800 	.word	0x40020800
 8005454:	40020c00 	.word	0x40020c00
 8005458:	40021000 	.word	0x40021000
 800545c:	40021400 	.word	0x40021400
 8005460:	40021800 	.word	0x40021800
 8005464:	40013c00 	.word	0x40013c00

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005484:	e003      	b.n	800548e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0cc      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b68      	ldr	r3, [pc, #416]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90c      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b65      	ldr	r3, [pc, #404]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d044      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005556:	2b03      	cmp	r3, #3
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e067      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4934      	ldr	r1, [pc, #208]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7fd fde6 	bl	800315c <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fd fde2 	bl	800315c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20c      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f855 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd fd46 	bl	80030d4 <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	0800f1d0 	.word	0x0800f1d0
 8005660:	20000004 	.word	0x20000004
 8005664:	20000008 	.word	0x20000008

08005668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800566c:	4b03      	ldr	r3, [pc, #12]	@ (800567c <HAL_RCC_GetHCLKFreq+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000004 	.word	0x20000004

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005684:	f7ff fff0 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	0a9b      	lsrs	r3, r3, #10
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4903      	ldr	r1, [pc, #12]	@ (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40023800 	.word	0x40023800
 80056a4:	0800f1e0 	.word	0x0800f1e0

080056a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056ac:	f7ff ffdc 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0b5b      	lsrs	r3, r3, #13
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800f1e0 	.word	0x0800f1e0

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b0a6      	sub	sp, #152	@ 0x98
 80056d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f6:	4bc8      	ldr	r3, [pc, #800]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	f200 817e 	bhi.w	8005a00 <HAL_RCC_GetSysClockFreq+0x330>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005741 	.word	0x08005741
 8005710:	08005a01 	.word	0x08005a01
 8005714:	08005a01 	.word	0x08005a01
 8005718:	08005a01 	.word	0x08005a01
 800571c:	08005749 	.word	0x08005749
 8005720:	08005a01 	.word	0x08005a01
 8005724:	08005a01 	.word	0x08005a01
 8005728:	08005a01 	.word	0x08005a01
 800572c:	08005751 	.word	0x08005751
 8005730:	08005a01 	.word	0x08005a01
 8005734:	08005a01 	.word	0x08005a01
 8005738:	08005a01 	.word	0x08005a01
 800573c:	080058bb 	.word	0x080058bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4bb6      	ldr	r3, [pc, #728]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8005746:	e15f      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005748:	4bb5      	ldr	r3, [pc, #724]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x350>)
 800574a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800574e:	e15b      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005750:	4bb1      	ldr	r3, [pc, #708]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005758:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800575c:	4bae      	ldr	r3, [pc, #696]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d031      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005768:	4bab      	ldr	r3, [pc, #684]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	099b      	lsrs	r3, r3, #6
 800576e:	2200      	movs	r2, #0
 8005770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577a:	663b      	str	r3, [r7, #96]	@ 0x60
 800577c:	2300      	movs	r3, #0
 800577e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005780:	4ba7      	ldr	r3, [pc, #668]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x350>)
 8005782:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005786:	462a      	mov	r2, r5
 8005788:	fb03 f202 	mul.w	r2, r3, r2
 800578c:	2300      	movs	r3, #0
 800578e:	4621      	mov	r1, r4
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	4aa2      	ldr	r2, [pc, #648]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x350>)
 8005798:	4621      	mov	r1, r4
 800579a:	fba1 1202 	umull	r1, r2, r1, r2
 800579e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057a0:	460a      	mov	r2, r1
 80057a2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80057a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057a6:	4413      	add	r3, r2
 80057a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ae:	2200      	movs	r2, #0
 80057b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80057b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80057bc:	f7fb fa84 	bl	8000cc8 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4613      	mov	r3, r2
 80057c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057ca:	e064      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4b92      	ldr	r3, [pc, #584]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	2200      	movs	r2, #0
 80057d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80057d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e0:	2300      	movs	r3, #0
 80057e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80057e8:	4622      	mov	r2, r4
 80057ea:	462b      	mov	r3, r5
 80057ec:	f04f 0000 	mov.w	r0, #0
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	0159      	lsls	r1, r3, #5
 80057f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057fa:	0150      	lsls	r0, r2, #5
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4621      	mov	r1, r4
 8005802:	1a51      	subs	r1, r2, r1
 8005804:	6139      	str	r1, [r7, #16]
 8005806:	4629      	mov	r1, r5
 8005808:	eb63 0301 	sbc.w	r3, r3, r1
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800581a:	4659      	mov	r1, fp
 800581c:	018b      	lsls	r3, r1, #6
 800581e:	4651      	mov	r1, sl
 8005820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005824:	4651      	mov	r1, sl
 8005826:	018a      	lsls	r2, r1, #6
 8005828:	4651      	mov	r1, sl
 800582a:	ebb2 0801 	subs.w	r8, r2, r1
 800582e:	4659      	mov	r1, fp
 8005830:	eb63 0901 	sbc.w	r9, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005848:	4690      	mov	r8, r2
 800584a:	4699      	mov	r9, r3
 800584c:	4623      	mov	r3, r4
 800584e:	eb18 0303 	adds.w	r3, r8, r3
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	462b      	mov	r3, r5
 8005856:	eb49 0303 	adc.w	r3, r9, r3
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005868:	4629      	mov	r1, r5
 800586a:	028b      	lsls	r3, r1, #10
 800586c:	4621      	mov	r1, r4
 800586e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005872:	4621      	mov	r1, r4
 8005874:	028a      	lsls	r2, r1, #10
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800587e:	2200      	movs	r2, #0
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
 8005882:	647a      	str	r2, [r7, #68]	@ 0x44
 8005884:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005888:	f7fb fa1e 	bl	8000cc8 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005896:	4b60      	ldr	r3, [pc, #384]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	3301      	adds	r3, #1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80058a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058b8:	e0a6      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ba:	4b57      	ldr	r3, [pc, #348]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c6:	4b54      	ldr	r3, [pc, #336]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02a      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058d2:	4b51      	ldr	r3, [pc, #324]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	2200      	movs	r2, #0
 80058da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058e4:	2100      	movs	r1, #0
 80058e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x350>)
 80058e8:	fb03 f201 	mul.w	r2, r3, r1
 80058ec:	2300      	movs	r3, #0
 80058ee:	fb00 f303 	mul.w	r3, r0, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x350>)
 80058f6:	fba0 1202 	umull	r1, r2, r0, r2
 80058fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80058fc:	460a      	mov	r2, r1
 80058fe:	673a      	str	r2, [r7, #112]	@ 0x70
 8005900:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005902:	4413      	add	r3, r2
 8005904:	677b      	str	r3, [r7, #116]	@ 0x74
 8005906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800590a:	2200      	movs	r2, #0
 800590c:	633b      	str	r3, [r7, #48]	@ 0x30
 800590e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005910:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005914:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005918:	f7fb f9d6 	bl	8000cc8 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4613      	mov	r3, r2
 8005922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005926:	e05b      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005928:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	2200      	movs	r2, #0
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	f04f 0000 	mov.w	r0, #0
 800594c:	f04f 0100 	mov.w	r1, #0
 8005950:	0159      	lsls	r1, r3, #5
 8005952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005956:	0150      	lsls	r0, r2, #5
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4641      	mov	r1, r8
 800595e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005962:	4649      	mov	r1, r9
 8005964:	eb63 0b01 	sbc.w	fp, r3, r1
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800597c:	ebb2 040a 	subs.w	r4, r2, sl
 8005980:	eb63 050b 	sbc.w	r5, r3, fp
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	00eb      	lsls	r3, r5, #3
 800598e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005992:	00e2      	lsls	r2, r4, #3
 8005994:	4614      	mov	r4, r2
 8005996:	461d      	mov	r5, r3
 8005998:	4643      	mov	r3, r8
 800599a:	18e3      	adds	r3, r4, r3
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	464b      	mov	r3, r9
 80059a0:	eb45 0303 	adc.w	r3, r5, r3
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059b2:	4629      	mov	r1, r5
 80059b4:	028b      	lsls	r3, r1, #10
 80059b6:	4621      	mov	r1, r4
 80059b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059bc:	4621      	mov	r1, r4
 80059be:	028a      	lsls	r2, r1, #10
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059c8:	2200      	movs	r2, #0
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d2:	f7fb f979 	bl	8000cc8 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4613      	mov	r3, r2
 80059dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x348>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0f1b      	lsrs	r3, r3, #28
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80059ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80059fe:	e003      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3798      	adds	r7, #152	@ 0x98
 8005a10:	46bd      	mov	sp, r7
 8005a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a16:	bf00      	nop
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	017d7840 	.word	0x017d7840

08005a24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e28d      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8083 	beq.w	8005b4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a44:	4b94      	ldr	r3, [pc, #592]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d019      	beq.n	8005a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a50:	4b91      	ldr	r3, [pc, #580]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a68:	d00c      	beq.n	8005a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d112      	bne.n	8005a9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a76:	4b88      	ldr	r3, [pc, #544]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a82:	d10b      	bne.n	8005a9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	4b84      	ldr	r3, [pc, #528]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05b      	beq.n	8005b48 <HAL_RCC_OscConfig+0x124>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d157      	bne.n	8005b48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e25a      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x90>
 8005aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7b      	ldr	r2, [pc, #492]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e01d      	b.n	8005af0 <HAL_RCC_OscConfig+0xcc>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0xb4>
 8005abe:	4b76      	ldr	r3, [pc, #472]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a75      	ldr	r2, [pc, #468]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a72      	ldr	r2, [pc, #456]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0xcc>
 8005ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6e      	ldr	r2, [pc, #440]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6b      	ldr	r2, [pc, #428]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d013      	beq.n	8005b20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd fb30 	bl	800315c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fd fb2c 	bl	800315c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	@ 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e21f      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0xdc>
 8005b1e:	e014      	b.n	8005b4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fd fb1c 	bl	800315c <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fd fb18 	bl	800315c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	@ 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e20b      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3a:	4b57      	ldr	r3, [pc, #348]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x104>
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d06f      	beq.n	8005c36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b56:	4b50      	ldr	r3, [pc, #320]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d017      	beq.n	8005b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b62:	4b4d      	ldr	r3, [pc, #308]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d105      	bne.n	8005b7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7a:	4b47      	ldr	r3, [pc, #284]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d11c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b86:	4b44      	ldr	r3, [pc, #272]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d116      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	4b41      	ldr	r3, [pc, #260]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_RCC_OscConfig+0x186>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e1d3      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005baa:	4b3b      	ldr	r3, [pc, #236]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4937      	ldr	r1, [pc, #220]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	e03a      	b.n	8005c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d020      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc8:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HAL_RCC_OscConfig+0x278>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fd fac5 	bl	800315c <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd6:	f7fd fac1 	bl	800315c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1b4      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4925      	ldr	r1, [pc, #148]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
 8005c08:	e015      	b.n	8005c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c0a:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HAL_RCC_OscConfig+0x278>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd faa4 	bl	800315c <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd faa0 	bl	800315c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e193      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d036      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <HAL_RCC_OscConfig+0x27c>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fd fa84 	bl	800315c <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fd fa80 	bl	800315c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e173      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <HAL_RCC_OscConfig+0x274>)
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x234>
 8005c76:	e01b      	b.n	8005cb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c78:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fd fa6d 	bl	800315c <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c84:	e00e      	b.n	8005ca4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fd fa69 	bl	800315c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d907      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e15c      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	42470000 	.word	0x42470000
 8005ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ea      	bne.n	8005c86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8097 	beq.w	8005dec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc2:	4b83      	ldr	r3, [pc, #524]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cde:	4b7c      	ldr	r3, [pc, #496]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cee:	4b79      	ldr	r3, [pc, #484]	@ (8005ed4 <HAL_RCC_OscConfig+0x4b0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d118      	bne.n	8005d2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cfa:	4b76      	ldr	r3, [pc, #472]	@ (8005ed4 <HAL_RCC_OscConfig+0x4b0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a75      	ldr	r2, [pc, #468]	@ (8005ed4 <HAL_RCC_OscConfig+0x4b0>)
 8005d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d06:	f7fd fa29 	bl	800315c <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0e:	f7fd fa25 	bl	800315c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e118      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d20:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed4 <HAL_RCC_OscConfig+0x4b0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d106      	bne.n	8005d42 <HAL_RCC_OscConfig+0x31e>
 8005d34:	4b66      	ldr	r3, [pc, #408]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a65      	ldr	r2, [pc, #404]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d40:	e01c      	b.n	8005d7c <HAL_RCC_OscConfig+0x358>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b05      	cmp	r3, #5
 8005d48:	d10c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x340>
 8005d4a:	4b61      	ldr	r3, [pc, #388]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	4a60      	ldr	r2, [pc, #384]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	f043 0304 	orr.w	r3, r3, #4
 8005d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d56:	4b5e      	ldr	r3, [pc, #376]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5a:	4a5d      	ldr	r2, [pc, #372]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d62:	e00b      	b.n	8005d7c <HAL_RCC_OscConfig+0x358>
 8005d64:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	4a59      	ldr	r2, [pc, #356]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d70:	4b57      	ldr	r3, [pc, #348]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d74:	4a56      	ldr	r2, [pc, #344]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005d76:	f023 0304 	bic.w	r3, r3, #4
 8005d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d84:	f7fd f9ea 	bl	800315c <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8c:	f7fd f9e6 	bl	800315c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e0d7      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0ee      	beq.n	8005d8c <HAL_RCC_OscConfig+0x368>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db0:	f7fd f9d4 	bl	800315c <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db6:	e00a      	b.n	8005dce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db8:	f7fd f9d0 	bl	800315c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e0c1      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dce:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1ee      	bne.n	8005db8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d105      	bne.n	8005dec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80ad 	beq.w	8005f50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005df6:	4b36      	ldr	r3, [pc, #216]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d060      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d145      	bne.n	8005e96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b4>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e10:	f7fd f9a4 	bl	800315c <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e18:	f7fd f9a0 	bl	800315c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e093      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2a:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	019b      	lsls	r3, r3, #6
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e58:	061b      	lsls	r3, r3, #24
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e60:	071b      	lsls	r3, r3, #28
 8005e62:	491b      	ldr	r1, [pc, #108]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b4>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6e:	f7fd f975 	bl	800315c <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e76:	f7fd f971 	bl	800315c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e064      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCC_OscConfig+0x452>
 8005e94:	e05c      	b.n	8005f50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e96:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCC_OscConfig+0x4b4>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fd f95e 	bl	800315c <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea4:	f7fd f95a 	bl	800315c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e04d      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ac>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x480>
 8005ec2:	e045      	b.n	8005f50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e040      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005edc:	4b1f      	ldr	r3, [pc, #124]	@ (8005f5c <HAL_RCC_OscConfig+0x538>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d030      	beq.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d129      	bne.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d122      	bne.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d119      	bne.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	3b01      	subs	r3, #1
 8005f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d10f      	bne.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40023800 	.word	0x40023800

08005f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e07b      	b.n	800606a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f82:	d009      	beq.n	8005f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	e005      	b.n	8005f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc fe14 	bl	8002be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601c:	ea42 0103 	orr.w	r1, r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f003 0104 	and.w	r1, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	f003 0210 	and.w	r2, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_SPI_Transmit+0x22>
 8006090:	2302      	movs	r3, #2
 8006092:	e12d      	b.n	80062f0 <HAL_SPI_Transmit+0x27e>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800609c:	f7fd f85e 	bl	800315c <HAL_GetTick>
 80060a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
 80060b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060b6:	e116      	b.n	80062e6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Transmit+0x52>
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060c8:	e10d      	b.n	80062e6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2203      	movs	r2, #3
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006110:	d10f      	bne.n	8006132 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006130:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d007      	beq.n	8006150 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006158:	d14f      	bne.n	80061fa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_SPI_Transmit+0xf6>
 8006162:	8afb      	ldrh	r3, [r7, #22]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d142      	bne.n	80061ee <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	881a      	ldrh	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800618c:	e02f      	b.n	80061ee <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d112      	bne.n	80061c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061c0:	e015      	b.n	80061ee <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c2:	f7fc ffcb 	bl	800315c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d803      	bhi.n	80061da <HAL_SPI_Transmit+0x168>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061d8:	d102      	bne.n	80061e0 <HAL_SPI_Transmit+0x16e>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80061ec:	e07b      	b.n	80062e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ca      	bne.n	800618e <HAL_SPI_Transmit+0x11c>
 80061f8:	e050      	b.n	800629c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_SPI_Transmit+0x196>
 8006202:	8afb      	ldrh	r3, [r7, #22]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d144      	bne.n	8006292 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800622e:	e030      	b.n	8006292 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d113      	bne.n	8006266 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006264:	e015      	b.n	8006292 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006266:	f7fc ff79 	bl	800315c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d803      	bhi.n	800627e <HAL_SPI_Transmit+0x20c>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800627c:	d102      	bne.n	8006284 <HAL_SPI_Transmit+0x212>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006290:	e029      	b.n	80062e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1c9      	bne.n	8006230 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fa61 	bl	8006768 <SPI_EndRxTxTransaction>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e003      	b.n	80062e6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	@ 0x30
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006306:	2301      	movs	r3, #1
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_SPI_TransmitReceive+0x26>
 800631a:	2302      	movs	r3, #2
 800631c:	e198      	b.n	8006650 <HAL_SPI_TransmitReceive+0x358>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006326:	f7fc ff19 	bl	800315c <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006344:	2b01      	cmp	r3, #1
 8006346:	d00f      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x70>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800634e:	d107      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x68>
 8006358:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800635c:	2b04      	cmp	r3, #4
 800635e:	d003      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006360:	2302      	movs	r3, #2
 8006362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006366:	e16d      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_SPI_TransmitReceive+0x82>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_SPI_TransmitReceive+0x82>
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006380:	e160      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b04      	cmp	r3, #4
 800638c:	d003      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2205      	movs	r2, #5
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	887a      	ldrh	r2, [r7, #2]
 80063a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	887a      	ldrh	r2, [r7, #2]
 80063be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d007      	beq.n	80063ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f2:	d17c      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SPI_TransmitReceive+0x10a>
 80063fc:	8b7b      	ldrh	r3, [r7, #26]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d16a      	bne.n	80064d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006426:	e057      	b.n	80064d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d11b      	bne.n	800646e <HAL_SPI_TransmitReceive+0x176>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d016      	beq.n	800646e <HAL_SPI_TransmitReceive+0x176>
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	2b01      	cmp	r3, #1
 8006444:	d113      	bne.n	800646e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d119      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x1b8>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d014      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	b292      	uxth	r2, r2
 8006492:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064b0:	f7fc fe54 	bl	800315c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064bc:	429a      	cmp	r2, r3
 80064be:	d80b      	bhi.n	80064d8 <HAL_SPI_TransmitReceive+0x1e0>
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c6:	d007      	beq.n	80064d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80064d6:	e0b5      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1a2      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x130>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d19d      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x130>
 80064ec:	e080      	b.n	80065f0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x204>
 80064f6:	8b7b      	ldrh	r3, [r7, #26]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d16f      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006522:	e05b      	b.n	80065dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d11c      	bne.n	800656c <HAL_SPI_TransmitReceive+0x274>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_SPI_TransmitReceive+0x274>
 800653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d114      	bne.n	800656c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	d119      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x2b6>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d014      	beq.n	80065ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065aa:	2301      	movs	r3, #1
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065ae:	f7fc fdd5 	bl	800315c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d803      	bhi.n	80065c6 <HAL_SPI_TransmitReceive+0x2ce>
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c4:	d102      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x2d4>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80065da:	e033      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d19e      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x22c>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d199      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f8b7 	bl	8006768 <SPI_EndRxTxTransaction>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800660c:	e01a      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663a:	e003      	b.n	8006644 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800664c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006650:	4618      	mov	r0, r3
 8006652:	3730      	adds	r7, #48	@ 0x30
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006668:	f7fc fd78 	bl	800315c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	4413      	add	r3, r2
 8006676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006678:	f7fc fd70 	bl	800315c <HAL_GetTick>
 800667c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	015b      	lsls	r3, r3, #5
 8006684:	0d1b      	lsrs	r3, r3, #20
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668e:	e054      	b.n	800673a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006696:	d050      	beq.n	800673a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006698:	f7fc fd60 	bl	800315c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d902      	bls.n	80066ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d13d      	bne.n	800672a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c6:	d111      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d0:	d004      	beq.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066da:	d107      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f4:	d10f      	bne.n	8006716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e017      	b.n	800675a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3b01      	subs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d19b      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000004 	.word	0x20000004

08006768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2201      	movs	r2, #1
 800677c:	2102      	movs	r1, #2
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff6a 	bl	8006658 <SPI_WaitFlagStateUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e032      	b.n	8006800 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800679a:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <SPI_EndRxTxTransaction+0xa0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1b      	ldr	r2, [pc, #108]	@ (800680c <SPI_EndRxTxTransaction+0xa4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	0d5b      	lsrs	r3, r3, #21
 80067a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067b8:	d112      	bne.n	80067e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2180      	movs	r1, #128	@ 0x80
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff ff47 	bl	8006658 <SPI_WaitFlagStateUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d016      	beq.n	80067fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e00f      	b.n	8006800 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d0f2      	beq.n	80067e0 <SPI_EndRxTxTransaction+0x78>
 80067fa:	e000      	b.n	80067fe <SPI_EndRxTxTransaction+0x96>
        break;
 80067fc:	bf00      	nop
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000004 	.word	0x20000004
 800680c:	165e9f81 	.word	0x165e9f81

08006810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e041      	b.n	80068a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fc fa1a 	bl	8002c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f000 faac 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d001      	beq.n	80068c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e04e      	b.n	8006966 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <HAL_TIM_Base_Start_IT+0xc4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d022      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f2:	d01d      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006978 <HAL_TIM_Base_Start_IT+0xc8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1e      	ldr	r2, [pc, #120]	@ (800697c <HAL_TIM_Base_Start_IT+0xcc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <HAL_TIM_Base_Start_IT+0xd0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1b      	ldr	r2, [pc, #108]	@ (8006984 <HAL_TIM_Base_Start_IT+0xd4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <HAL_TIM_Base_Start_IT+0xd8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x80>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a18      	ldr	r2, [pc, #96]	@ (800698c <HAL_TIM_Base_Start_IT+0xdc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d111      	bne.n	8006954 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b06      	cmp	r3, #6
 8006940:	d010      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	e007      	b.n	8006964 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40010000 	.word	0x40010000
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40000c00 	.word	0x40000c00
 8006984:	40010400 	.word	0x40010400
 8006988:	40014000 	.word	0x40014000
 800698c:	40001800 	.word	0x40001800

08006990 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10f      	bne.n	80069d8 <HAL_TIM_Base_Stop_IT+0x48>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	f240 4344 	movw	r3, #1092	@ 0x444
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_TIM_Base_Stop_IT+0x48>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01b      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0202 	mvn.w	r2, #2
 8006a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f999 	bl	8006d70 <HAL_TIM_IC_CaptureCallback>
 8006a3e:	e005      	b.n	8006a4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f98b 	bl	8006d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f99c 	bl	8006d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d020      	beq.n	8006a9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01b      	beq.n	8006a9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0204 	mvn.w	r2, #4
 8006a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f973 	bl	8006d70 <HAL_TIM_IC_CaptureCallback>
 8006a8a:	e005      	b.n	8006a98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f965 	bl	8006d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f976 	bl	8006d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f06f 0208 	mvn.w	r2, #8
 8006aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f94d 	bl	8006d70 <HAL_TIM_IC_CaptureCallback>
 8006ad6:	e005      	b.n	8006ae4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f93f 	bl	8006d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f950 	bl	8006d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01b      	beq.n	8006b36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f06f 0210 	mvn.w	r2, #16
 8006b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f927 	bl	8006d70 <HAL_TIM_IC_CaptureCallback>
 8006b22:	e005      	b.n	8006b30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f919 	bl	8006d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f92a 	bl	8006d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f06f 0201 	mvn.w	r2, #1
 8006b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fb fd25 	bl	80025a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fae3 	bl	8007144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8fb 	bl	8006d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00c      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0220 	mvn.w	r2, #32
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fab5 	bl	8007130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_TIM_ConfigClockSource+0x1c>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e0b4      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x186>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c22:	d03e      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0xd4>
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c28:	f200 8087 	bhi.w	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c30:	f000 8086 	beq.w	8006d40 <HAL_TIM_ConfigClockSource+0x172>
 8006c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c38:	d87f      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c3a:	2b70      	cmp	r3, #112	@ 0x70
 8006c3c:	d01a      	beq.n	8006c74 <HAL_TIM_ConfigClockSource+0xa6>
 8006c3e:	2b70      	cmp	r3, #112	@ 0x70
 8006c40:	d87b      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c42:	2b60      	cmp	r3, #96	@ 0x60
 8006c44:	d050      	beq.n	8006ce8 <HAL_TIM_ConfigClockSource+0x11a>
 8006c46:	2b60      	cmp	r3, #96	@ 0x60
 8006c48:	d877      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c4a:	2b50      	cmp	r3, #80	@ 0x50
 8006c4c:	d03c      	beq.n	8006cc8 <HAL_TIM_ConfigClockSource+0xfa>
 8006c4e:	2b50      	cmp	r3, #80	@ 0x50
 8006c50:	d873      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c52:	2b40      	cmp	r3, #64	@ 0x40
 8006c54:	d058      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x13a>
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	d86f      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c5a:	2b30      	cmp	r3, #48	@ 0x30
 8006c5c:	d064      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x15a>
 8006c5e:	2b30      	cmp	r3, #48	@ 0x30
 8006c60:	d86b      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d060      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x15a>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d867      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d05c      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x15a>
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d05a      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x15a>
 8006c72:	e062      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c84:	f000 f9b8 	bl	8006ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]
      break;
 8006ca0:	e04f      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cb2:	f000 f9a1 	bl	8006ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc4:	609a      	str	r2, [r3, #8]
      break;
 8006cc6:	e03c      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f000 f915 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2150      	movs	r1, #80	@ 0x50
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f96e 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006ce6:	e02c      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f000 f934 	bl	8006f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2160      	movs	r1, #96	@ 0x60
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f95e 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006d06:	e01c      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d14:	461a      	mov	r2, r3
 8006d16:	f000 f8f5 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2140      	movs	r1, #64	@ 0x40
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f94e 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006d26:	e00c      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 f945 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006d38:	e003      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3e:	e000      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a46      	ldr	r2, [pc, #280]	@ (8006ed8 <TIM_Base_SetConfig+0x12c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <TIM_Base_SetConfig+0x40>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dca:	d00f      	beq.n	8006dec <TIM_Base_SetConfig+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a43      	ldr	r2, [pc, #268]	@ (8006edc <TIM_Base_SetConfig+0x130>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a42      	ldr	r2, [pc, #264]	@ (8006ee0 <TIM_Base_SetConfig+0x134>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <TIM_Base_SetConfig+0x40>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a41      	ldr	r2, [pc, #260]	@ (8006ee4 <TIM_Base_SetConfig+0x138>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_Base_SetConfig+0x40>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a40      	ldr	r2, [pc, #256]	@ (8006ee8 <TIM_Base_SetConfig+0x13c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a35      	ldr	r2, [pc, #212]	@ (8006ed8 <TIM_Base_SetConfig+0x12c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d02b      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0c:	d027      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a32      	ldr	r2, [pc, #200]	@ (8006edc <TIM_Base_SetConfig+0x130>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d023      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a31      	ldr	r2, [pc, #196]	@ (8006ee0 <TIM_Base_SetConfig+0x134>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01f      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a30      	ldr	r2, [pc, #192]	@ (8006ee4 <TIM_Base_SetConfig+0x138>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01b      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee8 <TIM_Base_SetConfig+0x13c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d017      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2e      	ldr	r2, [pc, #184]	@ (8006eec <TIM_Base_SetConfig+0x140>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef0 <TIM_Base_SetConfig+0x144>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00f      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef4 <TIM_Base_SetConfig+0x148>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00b      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ef8 <TIM_Base_SetConfig+0x14c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	@ (8006efc <TIM_Base_SetConfig+0x150>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a29      	ldr	r2, [pc, #164]	@ (8006f00 <TIM_Base_SetConfig+0x154>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d108      	bne.n	8006e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a10      	ldr	r2, [pc, #64]	@ (8006ed8 <TIM_Base_SetConfig+0x12c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_Base_SetConfig+0xf8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <TIM_Base_SetConfig+0x13c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d103      	bne.n	8006eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d105      	bne.n	8006eca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]
  }
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800
 8006ef8:	40001800 	.word	0x40001800
 8006efc:	40001c00 	.word	0x40001c00
 8006f00:	40002000 	.word	0x40002000

08006f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0201 	bic.w	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f023 030a 	bic.w	r3, r3, #10
 8006f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b087      	sub	sp, #28
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f023 0210 	bic.w	r2, r3, #16
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f043 0307 	orr.w	r3, r3, #7
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	431a      	orrs	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4313      	orrs	r3, r2
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	609a      	str	r2, [r3, #8]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800704c:	2302      	movs	r3, #2
 800704e:	e05a      	b.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a21      	ldr	r2, [pc, #132]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d022      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800709c:	d01d      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d018      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1b      	ldr	r2, [pc, #108]	@ (800711c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00e      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a18      	ldr	r2, [pc, #96]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d009      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a17      	ldr	r2, [pc, #92]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a15      	ldr	r2, [pc, #84]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10c      	bne.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010000 	.word	0x40010000
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40010400 	.word	0x40010400
 8007128:	40014000 	.word	0x40014000
 800712c:	40001800 	.word	0x40001800

08007130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e042      	b.n	80071f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fb fdd0 	bl	8002d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800719a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f82b 	bl	80071f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b0c0      	sub	sp, #256	@ 0x100
 80071fe:	af00      	add	r7, sp, #0
 8007200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	ea40 0301 	orr.w	r3, r0, r1
 8007220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	431a      	orrs	r2, r3
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	431a      	orrs	r2, r3
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007250:	f021 010c 	bic.w	r1, r1, #12
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800725e:	430b      	orrs	r3, r1
 8007260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	6999      	ldr	r1, [r3, #24]
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	ea40 0301 	orr.w	r3, r0, r1
 800727e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b8f      	ldr	r3, [pc, #572]	@ (80074c4 <UART_SetConfig+0x2cc>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d005      	beq.n	8007298 <UART_SetConfig+0xa0>
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b8d      	ldr	r3, [pc, #564]	@ (80074c8 <UART_SetConfig+0x2d0>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d104      	bne.n	80072a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fe fa06 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 800729c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072a0:	e003      	b.n	80072aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fe f9ed 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80072a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b4:	f040 810c 	bne.w	80074d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	1891      	adds	r1, r2, r2
 80072d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072d2:	415b      	adcs	r3, r3
 80072d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072da:	4621      	mov	r1, r4
 80072dc:	eb12 0801 	adds.w	r8, r2, r1
 80072e0:	4629      	mov	r1, r5
 80072e2:	eb43 0901 	adc.w	r9, r3, r1
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fa:	4690      	mov	r8, r2
 80072fc:	4699      	mov	r9, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	eb18 0303 	adds.w	r3, r8, r3
 8007304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007308:	462b      	mov	r3, r5
 800730a:	eb49 0303 	adc.w	r3, r9, r3
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800731e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007326:	460b      	mov	r3, r1
 8007328:	18db      	adds	r3, r3, r3
 800732a:	653b      	str	r3, [r7, #80]	@ 0x50
 800732c:	4613      	mov	r3, r2
 800732e:	eb42 0303 	adc.w	r3, r2, r3
 8007332:	657b      	str	r3, [r7, #84]	@ 0x54
 8007334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800733c:	f7f9 fcc4 	bl	8000cc8 <__aeabi_uldivmod>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4b61      	ldr	r3, [pc, #388]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	011c      	lsls	r4, r3, #4
 800734e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800735c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	1891      	adds	r1, r2, r2
 8007366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007368:	415b      	adcs	r3, r3
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007370:	4641      	mov	r1, r8
 8007372:	eb12 0a01 	adds.w	sl, r2, r1
 8007376:	4649      	mov	r1, r9
 8007378:	eb43 0b01 	adc.w	fp, r3, r1
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800738c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007390:	4692      	mov	sl, r2
 8007392:	469b      	mov	fp, r3
 8007394:	4643      	mov	r3, r8
 8007396:	eb1a 0303 	adds.w	r3, sl, r3
 800739a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800739e:	464b      	mov	r3, r9
 80073a0:	eb4b 0303 	adc.w	r3, fp, r3
 80073a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073bc:	460b      	mov	r3, r1
 80073be:	18db      	adds	r3, r3, r3
 80073c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c2:	4613      	mov	r3, r2
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073d2:	f7f9 fc79 	bl	8000cc8 <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	4b3b      	ldr	r3, [pc, #236]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073de:	fba3 2301 	umull	r2, r3, r3, r1
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2264      	movs	r2, #100	@ 0x64
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	1acb      	subs	r3, r1, r3
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073f2:	4b36      	ldr	r3, [pc, #216]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073f4:	fba3 2302 	umull	r2, r3, r3, r2
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007400:	441c      	add	r4, r3
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800740c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	1891      	adds	r1, r2, r2
 800741a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800741c:	415b      	adcs	r3, r3
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007424:	4641      	mov	r1, r8
 8007426:	1851      	adds	r1, r2, r1
 8007428:	6339      	str	r1, [r7, #48]	@ 0x30
 800742a:	4649      	mov	r1, r9
 800742c:	414b      	adcs	r3, r1
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800743c:	4659      	mov	r1, fp
 800743e:	00cb      	lsls	r3, r1, #3
 8007440:	4651      	mov	r1, sl
 8007442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007446:	4651      	mov	r1, sl
 8007448:	00ca      	lsls	r2, r1, #3
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	4603      	mov	r3, r0
 8007450:	4642      	mov	r2, r8
 8007452:	189b      	adds	r3, r3, r2
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007458:	464b      	mov	r3, r9
 800745a:	460a      	mov	r2, r1
 800745c:	eb42 0303 	adc.w	r3, r2, r3
 8007460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007478:	460b      	mov	r3, r1
 800747a:	18db      	adds	r3, r3, r3
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747e:	4613      	mov	r3, r2
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800748a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800748e:	f7f9 fc1b 	bl	8000cc8 <__aeabi_uldivmod>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007498:	fba3 1302 	umull	r1, r3, r3, r2
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	2164      	movs	r1, #100	@ 0x64
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	3332      	adds	r3, #50	@ 0x32
 80074aa:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <UART_SetConfig+0x2d4>)
 80074ac:	fba2 2303 	umull	r2, r3, r2, r3
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	f003 0207 	and.w	r2, r3, #7
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4422      	add	r2, r4
 80074be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c0:	e106      	b.n	80076d0 <UART_SetConfig+0x4d8>
 80074c2:	bf00      	nop
 80074c4:	40011000 	.word	0x40011000
 80074c8:	40011400 	.word	0x40011400
 80074cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074e2:	4642      	mov	r2, r8
 80074e4:	464b      	mov	r3, r9
 80074e6:	1891      	adds	r1, r2, r2
 80074e8:	6239      	str	r1, [r7, #32]
 80074ea:	415b      	adcs	r3, r3
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f2:	4641      	mov	r1, r8
 80074f4:	1854      	adds	r4, r2, r1
 80074f6:	4649      	mov	r1, r9
 80074f8:	eb43 0501 	adc.w	r5, r3, r1
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	00eb      	lsls	r3, r5, #3
 8007506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750a:	00e2      	lsls	r2, r4, #3
 800750c:	4614      	mov	r4, r2
 800750e:	461d      	mov	r5, r3
 8007510:	4643      	mov	r3, r8
 8007512:	18e3      	adds	r3, r4, r3
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007518:	464b      	mov	r3, r9
 800751a:	eb45 0303 	adc.w	r3, r5, r3
 800751e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800752e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800753e:	4629      	mov	r1, r5
 8007540:	008b      	lsls	r3, r1, #2
 8007542:	4621      	mov	r1, r4
 8007544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007548:	4621      	mov	r1, r4
 800754a:	008a      	lsls	r2, r1, #2
 800754c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007550:	f7f9 fbba 	bl	8000cc8 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4b60      	ldr	r3, [pc, #384]	@ (80076dc <UART_SetConfig+0x4e4>)
 800755a:	fba3 2302 	umull	r2, r3, r3, r2
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	011c      	lsls	r4, r3, #4
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	61b9      	str	r1, [r7, #24]
 800757c:	415b      	adcs	r3, r3
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007584:	4641      	mov	r1, r8
 8007586:	1851      	adds	r1, r2, r1
 8007588:	6139      	str	r1, [r7, #16]
 800758a:	4649      	mov	r1, r9
 800758c:	414b      	adcs	r3, r1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800759c:	4659      	mov	r1, fp
 800759e:	00cb      	lsls	r3, r1, #3
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075a6:	4651      	mov	r1, sl
 80075a8:	00ca      	lsls	r2, r1, #3
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	4642      	mov	r2, r8
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075b8:	464b      	mov	r3, r9
 80075ba:	460a      	mov	r2, r1
 80075bc:	eb42 0303 	adc.w	r3, r2, r3
 80075c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075ee:	f7f9 fb6b 	bl	8000cc8 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	4b38      	ldr	r3, [pc, #224]	@ (80076dc <UART_SetConfig+0x4e4>)
 80075fa:	fba3 2301 	umull	r2, r3, r3, r1
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2264      	movs	r2, #100	@ 0x64
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	1acb      	subs	r3, r1, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	@ 0x32
 800760c:	4a33      	ldr	r2, [pc, #204]	@ (80076dc <UART_SetConfig+0x4e4>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007618:	441c      	add	r4, r3
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	673b      	str	r3, [r7, #112]	@ 0x70
 8007622:	677a      	str	r2, [r7, #116]	@ 0x74
 8007624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	415b      	adcs	r3, r3
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800766a:	464b      	mov	r3, r9
 800766c:	460a      	mov	r2, r1
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	663b      	str	r3, [r7, #96]	@ 0x60
 800767e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800768c:	4649      	mov	r1, r9
 800768e:	008b      	lsls	r3, r1, #2
 8007690:	4641      	mov	r1, r8
 8007692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007696:	4641      	mov	r1, r8
 8007698:	008a      	lsls	r2, r1, #2
 800769a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800769e:	f7f9 fb13 	bl	8000cc8 <__aeabi_uldivmod>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076a8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	2164      	movs	r1, #100	@ 0x64
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	3332      	adds	r3, #50	@ 0x32
 80076ba:	4a08      	ldr	r2, [pc, #32]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076bc:	fba2 2303 	umull	r2, r3, r2, r3
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4422      	add	r2, r4
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076dc:	51eb851f 	.word	0x51eb851f

080076e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80076e4:	4904      	ldr	r1, [pc, #16]	@ (80076f8 <MX_FATFS_Init+0x18>)
 80076e6:	4805      	ldr	r0, [pc, #20]	@ (80076fc <MX_FATFS_Init+0x1c>)
 80076e8:	f002 ff80 	bl	800a5ec <FATFS_LinkDriver>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <MX_FATFS_Init+0x20>)
 80076f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20006818 	.word	0x20006818
 80076fc:	20000010 	.word	0x20000010
 8007700:	20006814 	.word	0x20006814

08007704 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007708:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800770a:	4618      	mov	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f9d3 	bl	8007acc <USER_SPI_initialize>
 8007726:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return USER_SPI_status(pdrv); //ADD THIS LINE
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 faaf 	bl	8007ca0 <USER_SPI_status>
 8007742:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	 return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800775c:	7bf8      	ldrb	r0, [r7, #15]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	f000 fab2 	bl	8007ccc <USER_SPI_read>
 8007768:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007782:	7bf8      	ldrb	r0, [r7, #15]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	f000 fb05 	bl	8007d98 <USER_SPI_write>
 800778e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	603a      	str	r2, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
 80077a4:	460b      	mov	r3, r1
 80077a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	 return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80077a8:	79b9      	ldrb	r1, [r7, #6]
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fb6e 	bl	8007e90 <USER_SPI_ioctl>
 80077b4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80077c8:	f7fb fcc8 	bl	800315c <HAL_GetTick>
 80077cc:	4603      	mov	r3, r0
 80077ce:	4a04      	ldr	r2, [pc, #16]	@ (80077e0 <SPI_Timer_On+0x20>)
 80077d0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80077d2:	4a04      	ldr	r2, [pc, #16]	@ (80077e4 <SPI_Timer_On+0x24>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6013      	str	r3, [r2, #0]
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20006820 	.word	0x20006820
 80077e4:	20006824 	.word	0x20006824

080077e8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80077ec:	f7fb fcb6 	bl	800315c <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	4b06      	ldr	r3, [pc, #24]	@ (800780c <SPI_Timer_Status+0x24>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	1ad2      	subs	r2, r2, r3
 80077f8:	4b05      	ldr	r3, [pc, #20]	@ (8007810 <SPI_Timer_Status+0x28>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	bf34      	ite	cc
 8007800:	2301      	movcc	r3, #1
 8007802:	2300      	movcs	r3, #0
 8007804:	b2db      	uxtb	r3, r3
}
 8007806:	4618      	mov	r0, r3
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20006820 	.word	0x20006820
 8007810:	20006824 	.word	0x20006824

08007814 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af02      	add	r7, sp, #8
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800781e:	f107 020f 	add.w	r2, r7, #15
 8007822:	1df9      	adds	r1, r7, #7
 8007824:	2332      	movs	r3, #50	@ 0x32
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2301      	movs	r3, #1
 800782a:	4804      	ldr	r0, [pc, #16]	@ (800783c <xchg_spi+0x28>)
 800782c:	f7fe fd64 	bl	80062f8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	2000042c 	.word	0x2000042c

08007840 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e00a      	b.n	8007866 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	18d4      	adds	r4, r2, r3
 8007856:	20ff      	movs	r0, #255	@ 0xff
 8007858:	f7ff ffdc 	bl	8007814 <xchg_spi>
 800785c:	4603      	mov	r3, r0
 800785e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3f0      	bcc.n	8007850 <rcvr_spi_multi+0x10>
	}
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	bd90      	pop	{r4, r7, pc}

08007878 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4803      	ldr	r0, [pc, #12]	@ (800789c <xmit_spi_multi+0x24>)
 800788e:	f7fe fbf0 	bl	8006072 <HAL_SPI_Transmit>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	2000042c 	.word	0x2000042c

080078a0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80078a8:	f7fb fc58 	bl	800315c <HAL_GetTick>
 80078ac:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80078b2:	20ff      	movs	r0, #255	@ 0xff
 80078b4:	f7ff ffae 	bl	8007814 <xchg_spi>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	2bff      	cmp	r3, #255	@ 0xff
 80078c0:	d007      	beq.n	80078d2 <wait_ready+0x32>
 80078c2:	f7fb fc4b 	bl	800315c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d8ef      	bhi.n	80078b2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2bff      	cmp	r3, #255	@ 0xff
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80078ec:	2201      	movs	r2, #1
 80078ee:	2110      	movs	r1, #16
 80078f0:	4803      	ldr	r0, [pc, #12]	@ (8007900 <despiselect+0x18>)
 80078f2:	f7fd fdb9 	bl	8005468 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80078f6:	20ff      	movs	r0, #255	@ 0xff
 80078f8:	f7ff ff8c 	bl	8007814 <xchg_spi>

}
 80078fc:	bf00      	nop
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40020000 	.word	0x40020000

08007904 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007908:	2200      	movs	r2, #0
 800790a:	2110      	movs	r1, #16
 800790c:	4809      	ldr	r0, [pc, #36]	@ (8007934 <spiselect+0x30>)
 800790e:	f7fd fdab 	bl	8005468 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007912:	20ff      	movs	r0, #255	@ 0xff
 8007914:	f7ff ff7e 	bl	8007814 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007918:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800791c:	f7ff ffc0 	bl	80078a0 <wait_ready>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <spiselect+0x26>
 8007926:	2301      	movs	r3, #1
 8007928:	e002      	b.n	8007930 <spiselect+0x2c>

	despiselect();
 800792a:	f7ff ffdd 	bl	80078e8 <despiselect>
	return 0;	/* Timeout */
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40020000 	.word	0x40020000

08007938 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007942:	20c8      	movs	r0, #200	@ 0xc8
 8007944:	f7ff ff3c 	bl	80077c0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007948:	20ff      	movs	r0, #255	@ 0xff
 800794a:	f7ff ff63 	bl	8007814 <xchg_spi>
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2bff      	cmp	r3, #255	@ 0xff
 8007956:	d104      	bne.n	8007962 <rcvr_datablock+0x2a>
 8007958:	f7ff ff46 	bl	80077e8 <SPI_Timer_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f2      	bne.n	8007948 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2bfe      	cmp	r3, #254	@ 0xfe
 8007966:	d001      	beq.n	800796c <rcvr_datablock+0x34>
 8007968:	2300      	movs	r3, #0
 800796a:	e00a      	b.n	8007982 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff ff66 	bl	8007840 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007974:	20ff      	movs	r0, #255	@ 0xff
 8007976:	f7ff ff4d 	bl	8007814 <xchg_spi>
 800797a:	20ff      	movs	r0, #255	@ 0xff
 800797c:	f7ff ff4a 	bl	8007814 <xchg_spi>

	return 1;						/* Function succeeded */
 8007980:	2301      	movs	r3, #1
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007996:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800799a:	f7ff ff81 	bl	80078a0 <wait_ready>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <xmit_datablock+0x1e>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e01e      	b.n	80079e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff ff32 	bl	8007814 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	2bfd      	cmp	r3, #253	@ 0xfd
 80079b4:	d016      	beq.n	80079e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80079b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff ff5c 	bl	8007878 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80079c0:	20ff      	movs	r0, #255	@ 0xff
 80079c2:	f7ff ff27 	bl	8007814 <xchg_spi>
 80079c6:	20ff      	movs	r0, #255	@ 0xff
 80079c8:	f7ff ff24 	bl	8007814 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80079cc:	20ff      	movs	r0, #255	@ 0xff
 80079ce:	f7ff ff21 	bl	8007814 <xchg_spi>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2b05      	cmp	r3, #5
 80079de:	d001      	beq.n	80079e4 <xmit_datablock+0x5a>
 80079e0:	2300      	movs	r3, #0
 80079e2:	e000      	b.n	80079e6 <xmit_datablock+0x5c>
	}
	return 1;
 80079e4:	2301      	movs	r3, #1
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4603      	mov	r3, r0
 80079f6:	6039      	str	r1, [r7, #0]
 80079f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80079fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	da0e      	bge.n	8007a20 <send_cmd+0x32>
		cmd &= 0x7F;
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a08:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	2037      	movs	r0, #55	@ 0x37
 8007a0e:	f7ff ffee 	bl	80079ee <send_cmd>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d901      	bls.n	8007a20 <send_cmd+0x32>
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	e051      	b.n	8007ac4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b0c      	cmp	r3, #12
 8007a24:	d008      	beq.n	8007a38 <send_cmd+0x4a>
		despiselect();
 8007a26:	f7ff ff5f 	bl	80078e8 <despiselect>
		if (!spiselect()) return 0xFF;
 8007a2a:	f7ff ff6b 	bl	8007904 <spiselect>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <send_cmd+0x4a>
 8007a34:	23ff      	movs	r3, #255	@ 0xff
 8007a36:	e045      	b.n	8007ac4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fee7 	bl	8007814 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fee1 	bl	8007814 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fedb 	bl	8007814 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff fed5 	bl	8007814 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fed0 	bl	8007814 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <send_cmd+0x94>
 8007a7e:	2395      	movs	r3, #149	@ 0x95
 8007a80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d101      	bne.n	8007a8c <send_cmd+0x9e>
 8007a88:	2387      	movs	r3, #135	@ 0x87
 8007a8a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fec0 	bl	8007814 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	2b0c      	cmp	r3, #12
 8007a98:	d102      	bne.n	8007aa0 <send_cmd+0xb2>
 8007a9a:	20ff      	movs	r0, #255	@ 0xff
 8007a9c:	f7ff feba 	bl	8007814 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007aa0:	230a      	movs	r3, #10
 8007aa2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007aa4:	20ff      	movs	r0, #255	@ 0xff
 8007aa6:	f7ff feb5 	bl	8007814 <xchg_spi>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da05      	bge.n	8007ac2 <send_cmd+0xd4>
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007acc:	b590      	push	{r4, r7, lr}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <USER_SPI_initialize+0x14>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0d4      	b.n	8007c8a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <USER_SPI_initialize+0x2a>
 8007aee:	4b69      	ldr	r3, [pc, #420]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e0c9      	b.n	8007c8a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8007af6:	4b68      	ldr	r3, [pc, #416]	@ (8007c98 <USER_SPI_initialize+0x1cc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	4b66      	ldr	r3, [pc, #408]	@ (8007c98 <USER_SPI_initialize+0x1cc>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 8007b04:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007b06:	230a      	movs	r3, #10
 8007b08:	73fb      	strb	r3, [r7, #15]
 8007b0a:	e005      	b.n	8007b18 <USER_SPI_initialize+0x4c>
 8007b0c:	20ff      	movs	r0, #255	@ 0xff
 8007b0e:	f7ff fe81 	bl	8007814 <xchg_spi>
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f6      	bne.n	8007b0c <USER_SPI_initialize+0x40>

	ty = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007b22:	2100      	movs	r1, #0
 8007b24:	2000      	movs	r0, #0
 8007b26:	f7ff ff62 	bl	80079ee <send_cmd>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f040 808b 	bne.w	8007c48 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007b32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b36:	f7ff fe43 	bl	80077c0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007b3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007b3e:	2008      	movs	r0, #8
 8007b40:	f7ff ff55 	bl	80079ee <send_cmd>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d151      	bne.n	8007bee <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
 8007b4e:	e00d      	b.n	8007b6c <USER_SPI_initialize+0xa0>
 8007b50:	7bfc      	ldrb	r4, [r7, #15]
 8007b52:	20ff      	movs	r0, #255	@ 0xff
 8007b54:	f7ff fe5e 	bl	8007814 <xchg_spi>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f104 0310 	add.w	r3, r4, #16
 8007b60:	443b      	add	r3, r7
 8007b62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d9ee      	bls.n	8007b50 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007b72:	7abb      	ldrb	r3, [r7, #10]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d167      	bne.n	8007c48 <USER_SPI_initialize+0x17c>
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	2baa      	cmp	r3, #170	@ 0xaa
 8007b7c:	d164      	bne.n	8007c48 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007b7e:	bf00      	nop
 8007b80:	f7ff fe32 	bl	80077e8 <SPI_Timer_Status>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <USER_SPI_initialize+0xce>
 8007b8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007b8e:	20a9      	movs	r0, #169	@ 0xa9
 8007b90:	f7ff ff2d 	bl	80079ee <send_cmd>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f2      	bne.n	8007b80 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007b9a:	f7ff fe25 	bl	80077e8 <SPI_Timer_Status>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d051      	beq.n	8007c48 <USER_SPI_initialize+0x17c>
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	203a      	movs	r0, #58	@ 0x3a
 8007ba8:	f7ff ff21 	bl	80079ee <send_cmd>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d14a      	bne.n	8007c48 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
 8007bb6:	e00d      	b.n	8007bd4 <USER_SPI_initialize+0x108>
 8007bb8:	7bfc      	ldrb	r4, [r7, #15]
 8007bba:	20ff      	movs	r0, #255	@ 0xff
 8007bbc:	f7ff fe2a 	bl	8007814 <xchg_spi>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f104 0310 	add.w	r3, r4, #16
 8007bc8:	443b      	add	r3, r7
 8007bca:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d9ee      	bls.n	8007bb8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007bda:	7a3b      	ldrb	r3, [r7, #8]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <USER_SPI_initialize+0x11c>
 8007be4:	230c      	movs	r3, #12
 8007be6:	e000      	b.n	8007bea <USER_SPI_initialize+0x11e>
 8007be8:	2304      	movs	r3, #4
 8007bea:	737b      	strb	r3, [r7, #13]
 8007bec:	e02c      	b.n	8007c48 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007bee:	2100      	movs	r1, #0
 8007bf0:	20a9      	movs	r0, #169	@ 0xa9
 8007bf2:	f7ff fefc 	bl	80079ee <send_cmd>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d804      	bhi.n	8007c06 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	737b      	strb	r3, [r7, #13]
 8007c00:	23a9      	movs	r3, #169	@ 0xa9
 8007c02:	73bb      	strb	r3, [r7, #14]
 8007c04:	e003      	b.n	8007c0e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007c06:	2301      	movs	r3, #1
 8007c08:	737b      	strb	r3, [r7, #13]
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007c0e:	bf00      	nop
 8007c10:	f7ff fdea 	bl	80077e8 <SPI_Timer_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <USER_SPI_initialize+0x15e>
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fee5 	bl	80079ee <send_cmd>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f2      	bne.n	8007c10 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007c2a:	f7ff fddd 	bl	80077e8 <SPI_Timer_Status>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <USER_SPI_initialize+0x178>
 8007c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f7ff fed8 	bl	80079ee <send_cmd>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USER_SPI_initialize+0x17c>
				ty = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007c48:	4a14      	ldr	r2, [pc, #80]	@ (8007c9c <USER_SPI_initialize+0x1d0>)
 8007c4a:	7b7b      	ldrb	r3, [r7, #13]
 8007c4c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007c4e:	f7ff fe4b 	bl	80078e8 <despiselect>

	if (ty) {			/* OK */
 8007c52:	7b7b      	ldrb	r3, [r7, #13]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d012      	beq.n	8007c7e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8007c58:	4b0f      	ldr	r3, [pc, #60]	@ (8007c98 <USER_SPI_initialize+0x1cc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <USER_SPI_initialize+0x1cc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0218 	orr.w	r2, r2, #24
 8007c6a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007c6c:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e002      	b.n	8007c84 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007c7e:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007c84:	4b03      	ldr	r3, [pc, #12]	@ (8007c94 <USER_SPI_initialize+0x1c8>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b2db      	uxtb	r3, r3
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd90      	pop	{r4, r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000024 	.word	0x20000024
 8007c98:	2000042c 	.word	0x2000042c
 8007c9c:	2000681c 	.word	0x2000681c

08007ca0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USER_SPI_status+0x14>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e002      	b.n	8007cba <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007cb4:	4b04      	ldr	r3, [pc, #16]	@ (8007cc8 <USER_SPI_status+0x28>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b2db      	uxtb	r3, r3
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000024 	.word	0x20000024

08007ccc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <USER_SPI_read+0x1c>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USER_SPI_read+0x20>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	e04d      	b.n	8007d88 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007cec:	4b28      	ldr	r3, [pc, #160]	@ (8007d90 <USER_SPI_read+0xc4>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <USER_SPI_read+0x32>
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e044      	b.n	8007d88 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007cfe:	4b25      	ldr	r3, [pc, #148]	@ (8007d94 <USER_SPI_read+0xc8>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <USER_SPI_read+0x44>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	025b      	lsls	r3, r3, #9
 8007d0e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d111      	bne.n	8007d3a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	2011      	movs	r0, #17
 8007d1a:	f7ff fe68 	bl	80079ee <send_cmd>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d129      	bne.n	8007d78 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007d24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f7ff fe05 	bl	8007938 <rcvr_datablock>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d021      	beq.n	8007d78 <USER_SPI_read+0xac>
			count = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	e01e      	b.n	8007d78 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	2012      	movs	r0, #18
 8007d3e:	f7ff fe56 	bl	80079ee <send_cmd>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d117      	bne.n	8007d78 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d4c:	68b8      	ldr	r0, [r7, #8]
 8007d4e:	f7ff fdf3 	bl	8007938 <rcvr_datablock>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <USER_SPI_read+0xa2>
				buff += 512;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007d5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ed      	bne.n	8007d48 <USER_SPI_read+0x7c>
 8007d6c:	e000      	b.n	8007d70 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007d6e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007d70:	2100      	movs	r1, #0
 8007d72:	200c      	movs	r0, #12
 8007d74:	f7ff fe3b 	bl	80079ee <send_cmd>
		}
	}
	despiselect();
 8007d78:	f7ff fdb6 	bl	80078e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bf14      	ite	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	2300      	moveq	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000024 	.word	0x20000024
 8007d94:	2000681c 	.word	0x2000681c

08007d98 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <USER_SPI_write+0x1c>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USER_SPI_write+0x20>
 8007db4:	2304      	movs	r3, #4
 8007db6:	e063      	b.n	8007e80 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007db8:	4b33      	ldr	r3, [pc, #204]	@ (8007e88 <USER_SPI_write+0xf0>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <USER_SPI_write+0x32>
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e05a      	b.n	8007e80 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007dca:	4b2f      	ldr	r3, [pc, #188]	@ (8007e88 <USER_SPI_write+0xf0>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <USER_SPI_write+0x44>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e051      	b.n	8007e80 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <USER_SPI_write+0xf4>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <USER_SPI_write+0x56>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	025b      	lsls	r3, r3, #9
 8007dec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d110      	bne.n	8007e16 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	2018      	movs	r0, #24
 8007df8:	f7ff fdf9 	bl	80079ee <send_cmd>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d136      	bne.n	8007e70 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007e02:	21fe      	movs	r1, #254	@ 0xfe
 8007e04:	68b8      	ldr	r0, [r7, #8]
 8007e06:	f7ff fdc0 	bl	800798a <xmit_datablock>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02f      	beq.n	8007e70 <USER_SPI_write+0xd8>
			count = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	e02c      	b.n	8007e70 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007e16:	4b1d      	ldr	r3, [pc, #116]	@ (8007e8c <USER_SPI_write+0xf4>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 0306 	and.w	r3, r3, #6
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <USER_SPI_write+0x92>
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	2097      	movs	r0, #151	@ 0x97
 8007e26:	f7ff fde2 	bl	80079ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	2019      	movs	r0, #25
 8007e2e:	f7ff fdde 	bl	80079ee <send_cmd>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d11b      	bne.n	8007e70 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007e38:	21fc      	movs	r1, #252	@ 0xfc
 8007e3a:	68b8      	ldr	r0, [r7, #8]
 8007e3c:	f7ff fda5 	bl	800798a <xmit_datablock>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <USER_SPI_write+0xc4>
				buff += 512;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007e4c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1ee      	bne.n	8007e38 <USER_SPI_write+0xa0>
 8007e5a:	e000      	b.n	8007e5e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007e5c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007e5e:	21fd      	movs	r1, #253	@ 0xfd
 8007e60:	2000      	movs	r0, #0
 8007e62:	f7ff fd92 	bl	800798a <xmit_datablock>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <USER_SPI_write+0xd8>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007e70:	f7ff fd3a 	bl	80078e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bf14      	ite	ne
 8007e7a:	2301      	movne	r3, #1
 8007e7c:	2300      	moveq	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000024 	.word	0x20000024
 8007e8c:	2000681c 	.word	0x2000681c

08007e90 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	@ 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	603a      	str	r2, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <USER_SPI_ioctl+0x1a>
 8007ea6:	2304      	movs	r3, #4
 8007ea8:	e15a      	b.n	8008160 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007eaa:	4baf      	ldr	r3, [pc, #700]	@ (8008168 <USER_SPI_ioctl+0x2d8>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USER_SPI_ioctl+0x2c>
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e151      	b.n	8008160 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007ec2:	79bb      	ldrb	r3, [r7, #6]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	f200 8136 	bhi.w	8008136 <USER_SPI_ioctl+0x2a6>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <USER_SPI_ioctl+0x40>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee5 	.word	0x08007ee5
 8007ed4:	08007ef9 	.word	0x08007ef9
 8007ed8:	08008137 	.word	0x08008137
 8007edc:	08007fa5 	.word	0x08007fa5
 8007ee0:	0800809b 	.word	0x0800809b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007ee4:	f7ff fd0e 	bl	8007904 <spiselect>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8127 	beq.w	800813e <USER_SPI_ioctl+0x2ae>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007ef6:	e122      	b.n	800813e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007ef8:	2100      	movs	r1, #0
 8007efa:	2009      	movs	r0, #9
 8007efc:	f7ff fd77 	bl	80079ee <send_cmd>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 811d 	bne.w	8008142 <USER_SPI_ioctl+0x2b2>
 8007f08:	f107 030c 	add.w	r3, r7, #12
 8007f0c:	2110      	movs	r1, #16
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fd12 	bl	8007938 <rcvr_datablock>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8113 	beq.w	8008142 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007f1c:	7b3b      	ldrb	r3, [r7, #12]
 8007f1e:	099b      	lsrs	r3, r3, #6
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d111      	bne.n	8007f4a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007f26:	7d7b      	ldrb	r3, [r7, #21]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	7d3b      	ldrb	r3, [r7, #20]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	4413      	add	r3, r2
 8007f30:	461a      	mov	r2, r3
 8007f32:	7cfb      	ldrb	r3, [r7, #19]
 8007f34:	041b      	lsls	r3, r3, #16
 8007f36:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	029a      	lsls	r2, r3, #10
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e028      	b.n	8007f9c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007f4a:	7c7b      	ldrb	r3, [r7, #17]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	7dbb      	ldrb	r3, [r7, #22]
 8007f54:	09db      	lsrs	r3, r3, #7
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	4413      	add	r3, r2
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	7d7b      	ldrb	r3, [r7, #21]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0306 	and.w	r3, r3, #6
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007f72:	7d3b      	ldrb	r3, [r7, #20]
 8007f74:	099b      	lsrs	r3, r3, #6
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	7cbb      	ldrb	r3, [r7, #18]
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f88:	4413      	add	r3, r2
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007f8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f92:	3b09      	subs	r3, #9
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	409a      	lsls	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007fa2:	e0ce      	b.n	8008142 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007fa4:	4b71      	ldr	r3, [pc, #452]	@ (800816c <USER_SPI_ioctl+0x2dc>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d031      	beq.n	8008014 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	208d      	movs	r0, #141	@ 0x8d
 8007fb4:	f7ff fd1b 	bl	80079ee <send_cmd>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 80c3 	bne.w	8008146 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007fc0:	20ff      	movs	r0, #255	@ 0xff
 8007fc2:	f7ff fc27 	bl	8007814 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	2110      	movs	r1, #16
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fcb3 	bl	8007938 <rcvr_datablock>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80b6 	beq.w	8008146 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007fda:	2330      	movs	r3, #48	@ 0x30
 8007fdc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007fe0:	e007      	b.n	8007ff2 <USER_SPI_ioctl+0x162>
 8007fe2:	20ff      	movs	r0, #255	@ 0xff
 8007fe4:	f7ff fc16 	bl	8007814 <xchg_spi>
 8007fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fec:	3b01      	subs	r3, #1
 8007fee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007ff2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f3      	bne.n	8007fe2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	2310      	movs	r3, #16
 8008004:	fa03 f202 	lsl.w	r2, r3, r2
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008012:	e098      	b.n	8008146 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008014:	2100      	movs	r1, #0
 8008016:	2009      	movs	r0, #9
 8008018:	f7ff fce9 	bl	80079ee <send_cmd>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 8091 	bne.w	8008146 <USER_SPI_ioctl+0x2b6>
 8008024:	f107 030c 	add.w	r3, r7, #12
 8008028:	2110      	movs	r1, #16
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fc84 	bl	8007938 <rcvr_datablock>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8087 	beq.w	8008146 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008038:	4b4c      	ldr	r3, [pc, #304]	@ (800816c <USER_SPI_ioctl+0x2dc>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d012      	beq.n	800806a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008044:	7dbb      	ldrb	r3, [r7, #22]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800804c:	7dfa      	ldrb	r2, [r7, #23]
 800804e:	09d2      	lsrs	r2, r2, #7
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	4413      	add	r3, r2
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	7e7b      	ldrb	r3, [r7, #25]
 8008058:	099b      	lsrs	r3, r3, #6
 800805a:	b2db      	uxtb	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	461a      	mov	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e013      	b.n	8008092 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800806a:	7dbb      	ldrb	r3, [r7, #22]
 800806c:	109b      	asrs	r3, r3, #2
 800806e:	b29b      	uxth	r3, r3
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	3301      	adds	r3, #1
 8008076:	7dfa      	ldrb	r2, [r7, #23]
 8008078:	00d2      	lsls	r2, r2, #3
 800807a:	f002 0218 	and.w	r2, r2, #24
 800807e:	7df9      	ldrb	r1, [r7, #23]
 8008080:	0949      	lsrs	r1, r1, #5
 8008082:	b2c9      	uxtb	r1, r1
 8008084:	440a      	add	r2, r1
 8008086:	3201      	adds	r2, #1
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	461a      	mov	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008098:	e055      	b.n	8008146 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800809a:	4b34      	ldr	r3, [pc, #208]	@ (800816c <USER_SPI_ioctl+0x2dc>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 0306 	and.w	r3, r3, #6
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d051      	beq.n	800814a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80080a6:	f107 020c 	add.w	r2, r7, #12
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	210b      	movs	r1, #11
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff feee 	bl	8007e90 <USER_SPI_ioctl>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d149      	bne.n	800814e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80080ba:	7b3b      	ldrb	r3, [r7, #12]
 80080bc:	099b      	lsrs	r3, r3, #6
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <USER_SPI_ioctl+0x23e>
 80080c4:	7dbb      	ldrb	r3, [r7, #22]
 80080c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d041      	beq.n	8008152 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80080de:	4b23      	ldr	r3, [pc, #140]	@ (800816c <USER_SPI_ioctl+0x2dc>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80080ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ec:	025b      	lsls	r3, r3, #9
 80080ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	025b      	lsls	r3, r3, #9
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80080f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080f8:	2020      	movs	r0, #32
 80080fa:	f7ff fc78 	bl	80079ee <send_cmd>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d128      	bne.n	8008156 <USER_SPI_ioctl+0x2c6>
 8008104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008106:	2021      	movs	r0, #33	@ 0x21
 8008108:	f7ff fc71 	bl	80079ee <send_cmd>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d121      	bne.n	8008156 <USER_SPI_ioctl+0x2c6>
 8008112:	2100      	movs	r1, #0
 8008114:	2026      	movs	r0, #38	@ 0x26
 8008116:	f7ff fc6a 	bl	80079ee <send_cmd>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d11a      	bne.n	8008156 <USER_SPI_ioctl+0x2c6>
 8008120:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008124:	f7ff fbbc 	bl	80078a0 <wait_ready>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d013      	beq.n	8008156 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800812e:	2300      	movs	r3, #0
 8008130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008134:	e00f      	b.n	8008156 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008136:	2304      	movs	r3, #4
 8008138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800813c:	e00c      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		break;
 800813e:	bf00      	nop
 8008140:	e00a      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		break;
 8008142:	bf00      	nop
 8008144:	e008      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		break;
 8008146:	bf00      	nop
 8008148:	e006      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800814a:	bf00      	nop
 800814c:	e004      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800814e:	bf00      	nop
 8008150:	e002      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <USER_SPI_ioctl+0x2c8>
		break;
 8008156:	bf00      	nop
	}

	despiselect();
 8008158:	f7ff fbc6 	bl	80078e8 <despiselect>

	return res;
 800815c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008160:	4618      	mov	r0, r3
 8008162:	3730      	adds	r7, #48	@ 0x30
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000024 	.word	0x20000024
 800816c:	2000681c 	.word	0x2000681c

08008170 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <disk_status+0x30>)
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	79fa      	ldrb	r2, [r7, #7]
 8008188:	4905      	ldr	r1, [pc, #20]	@ (80081a0 <disk_status+0x30>)
 800818a:	440a      	add	r2, r1
 800818c:	7a12      	ldrb	r2, [r2, #8]
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20006850 	.word	0x20006850

080081a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <disk_initialize+0x4c>)
 80081b6:	5cd3      	ldrb	r3, [r2, r3]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d114      	bne.n	80081e6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	4a0c      	ldr	r2, [pc, #48]	@ (80081f0 <disk_initialize+0x4c>)
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	79fa      	ldrb	r2, [r7, #7]
 80081ca:	4909      	ldr	r1, [pc, #36]	@ (80081f0 <disk_initialize+0x4c>)
 80081cc:	440a      	add	r2, r1
 80081ce:	7a12      	ldrb	r2, [r2, #8]
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	4a03      	ldr	r2, [pc, #12]	@ (80081f0 <disk_initialize+0x4c>)
 80081e2:	2101      	movs	r1, #1
 80081e4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20006850 	.word	0x20006850

080081f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <disk_read+0x3c>)
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	689c      	ldr	r4, [r3, #8]
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4a07      	ldr	r2, [pc, #28]	@ (8008230 <disk_read+0x3c>)
 8008214:	4413      	add	r3, r2
 8008216:	7a18      	ldrb	r0, [r3, #8]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	47a0      	blx	r4
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
  return res;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	bd90      	pop	{r4, r7, pc}
 800822e:	bf00      	nop
 8008230:	20006850 	.word	0x20006850

08008234 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	4a0a      	ldr	r2, [pc, #40]	@ (8008270 <disk_write+0x3c>)
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	68dc      	ldr	r4, [r3, #12]
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	4a07      	ldr	r2, [pc, #28]	@ (8008270 <disk_write+0x3c>)
 8008254:	4413      	add	r3, r2
 8008256:	7a18      	ldrb	r0, [r3, #8]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	47a0      	blx	r4
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]
  return res;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
}
 8008266:	4618      	mov	r0, r3
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}
 800826e:	bf00      	nop
 8008270:	20006850 	.word	0x20006850

08008274 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	603a      	str	r2, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
 8008280:	460b      	mov	r3, r1
 8008282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <disk_ioctl+0x38>)
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	79fa      	ldrb	r2, [r7, #7]
 8008292:	4906      	ldr	r1, [pc, #24]	@ (80082ac <disk_ioctl+0x38>)
 8008294:	440a      	add	r2, r1
 8008296:	7a10      	ldrb	r0, [r2, #8]
 8008298:	79b9      	ldrb	r1, [r7, #6]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20006850 	.word	0x20006850

080082b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3301      	adds	r3, #1
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80082c0:	89fb      	ldrh	r3, [r7, #14]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	b21a      	sxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b21b      	sxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b21b      	sxth	r3, r3
 80082d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80082d2:	89fb      	ldrh	r3, [r7, #14]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3303      	adds	r3, #3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	3202      	adds	r2, #2
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	3201      	adds	r2, #1
 8008306:	7812      	ldrb	r2, [r2, #0]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7812      	ldrb	r2, [r2, #0]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
	return rv;
 8008318:	68fb      	ldr	r3, [r7, #12]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	887a      	ldrh	r2, [r7, #2]
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	887a      	ldrh	r2, [r7, #2]
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	0a1b      	lsrs	r3, r3, #8
 800839a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	1c53      	adds	r3, r2, #1
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1c59      	adds	r1, r3, #1
 80083d8:	6179      	str	r1, [r7, #20]
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	607b      	str	r3, [r7, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f1      	bne.n	80083ce <mem_cpy+0x1a>
	}
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80083f6:	b480      	push	{r7}
 80083f8:	b087      	sub	sp, #28
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	617a      	str	r2, [r7, #20]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f3      	bne.n	8008406 <mem_set+0x10>
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	@ 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	61fa      	str	r2, [r7, #28]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	61ba      	str	r2, [r7, #24]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	1acb      	subs	r3, r1, r3
 8008458:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3b01      	subs	r3, #1
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <mem_cmp+0x40>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0eb      	beq.n	8008444 <mem_cmp+0x18>

	return r;
 800846c:	697b      	ldr	r3, [r7, #20]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3724      	adds	r7, #36	@ 0x24
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008484:	e002      	b.n	800848c <chk_chr+0x12>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3301      	adds	r3, #1
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <chk_chr+0x26>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	4293      	cmp	r3, r2
 800849e:	d1f2      	bne.n	8008486 <chk_chr+0xc>
	return *str;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	781b      	ldrb	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	e029      	b.n	8008518 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80084c4:	4a27      	ldr	r2, [pc, #156]	@ (8008564 <chk_lock+0xb4>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4413      	add	r3, r2
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01d      	beq.n	800850e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084d2:	4a24      	ldr	r2, [pc, #144]	@ (8008564 <chk_lock+0xb4>)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	4413      	add	r3, r2
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d116      	bne.n	8008512 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80084e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008564 <chk_lock+0xb4>)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d10c      	bne.n	8008512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008564 <chk_lock+0xb4>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	4413      	add	r3, r2
 8008500:	3308      	adds	r3, #8
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008508:	429a      	cmp	r2, r3
 800850a:	d102      	bne.n	8008512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800850c:	e007      	b.n	800851e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800850e:	2301      	movs	r3, #1
 8008510:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d9d2      	bls.n	80084c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d109      	bne.n	8008538 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <chk_lock+0x80>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d101      	bne.n	8008534 <chk_lock+0x84>
 8008530:	2300      	movs	r3, #0
 8008532:	e010      	b.n	8008556 <chk_lock+0xa6>
 8008534:	2312      	movs	r3, #18
 8008536:	e00e      	b.n	8008556 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <chk_lock+0xa0>
 800853e:	4a09      	ldr	r2, [pc, #36]	@ (8008564 <chk_lock+0xb4>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	4413      	add	r3, r2
 8008546:	330c      	adds	r3, #12
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800854e:	d101      	bne.n	8008554 <chk_lock+0xa4>
 8008550:	2310      	movs	r3, #16
 8008552:	e000      	b.n	8008556 <chk_lock+0xa6>
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20006830 	.word	0x20006830

08008568 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
 8008572:	e002      	b.n	800857a <enq_lock+0x12>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3301      	adds	r3, #1
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d806      	bhi.n	800858e <enq_lock+0x26>
 8008580:	4a09      	ldr	r2, [pc, #36]	@ (80085a8 <enq_lock+0x40>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	4413      	add	r3, r2
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f2      	bne.n	8008574 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b02      	cmp	r3, #2
 8008592:	bf14      	ite	ne
 8008594:	2301      	movne	r3, #1
 8008596:	2300      	moveq	r3, #0
 8008598:	b2db      	uxtb	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20006830 	.word	0x20006830

080085ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e01f      	b.n	80085fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80085bc:	4a41      	ldr	r2, [pc, #260]	@ (80086c4 <inc_lock+0x118>)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	4413      	add	r3, r2
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d113      	bne.n	80085f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80085ce:	4a3d      	ldr	r2, [pc, #244]	@ (80086c4 <inc_lock+0x118>)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	4413      	add	r3, r2
 80085d6:	3304      	adds	r3, #4
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80085de:	429a      	cmp	r2, r3
 80085e0:	d109      	bne.n	80085f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80085e2:	4a38      	ldr	r2, [pc, #224]	@ (80086c4 <inc_lock+0x118>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	4413      	add	r3, r2
 80085ea:	3308      	adds	r3, #8
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d006      	beq.n	8008604 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d9dc      	bls.n	80085bc <inc_lock+0x10>
 8008602:	e000      	b.n	8008606 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d132      	bne.n	8008672 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e002      	b.n	8008618 <inc_lock+0x6c>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d806      	bhi.n	800862c <inc_lock+0x80>
 800861e:	4a29      	ldr	r2, [pc, #164]	@ (80086c4 <inc_lock+0x118>)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	4413      	add	r3, r2
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f2      	bne.n	8008612 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d101      	bne.n	8008636 <inc_lock+0x8a>
 8008632:	2300      	movs	r3, #0
 8008634:	e040      	b.n	80086b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4922      	ldr	r1, [pc, #136]	@ (80086c4 <inc_lock+0x118>)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	440b      	add	r3, r1
 8008642:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	491e      	ldr	r1, [pc, #120]	@ (80086c4 <inc_lock+0x118>)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	440b      	add	r3, r1
 8008650:	3304      	adds	r3, #4
 8008652:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	695a      	ldr	r2, [r3, #20]
 8008658:	491a      	ldr	r1, [pc, #104]	@ (80086c4 <inc_lock+0x118>)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	440b      	add	r3, r1
 8008660:	3308      	adds	r3, #8
 8008662:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008664:	4a17      	ldr	r2, [pc, #92]	@ (80086c4 <inc_lock+0x118>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	4413      	add	r3, r2
 800866c:	330c      	adds	r3, #12
 800866e:	2200      	movs	r2, #0
 8008670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <inc_lock+0xe0>
 8008678:	4a12      	ldr	r2, [pc, #72]	@ (80086c4 <inc_lock+0x118>)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	4413      	add	r3, r2
 8008680:	330c      	adds	r3, #12
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <inc_lock+0xe0>
 8008688:	2300      	movs	r3, #0
 800868a:	e015      	b.n	80086b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d108      	bne.n	80086a4 <inc_lock+0xf8>
 8008692:	4a0c      	ldr	r2, [pc, #48]	@ (80086c4 <inc_lock+0x118>)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	4413      	add	r3, r2
 800869a:	330c      	adds	r3, #12
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	3301      	adds	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	e001      	b.n	80086a8 <inc_lock+0xfc>
 80086a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086a8:	4906      	ldr	r1, [pc, #24]	@ (80086c4 <inc_lock+0x118>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	440b      	add	r3, r1
 80086b0:	330c      	adds	r3, #12
 80086b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	20006830 	.word	0x20006830

080086c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d825      	bhi.n	8008728 <dec_lock+0x60>
		n = Files[i].ctr;
 80086dc:	4a17      	ldr	r2, [pc, #92]	@ (800873c <dec_lock+0x74>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	4413      	add	r3, r2
 80086e4:	330c      	adds	r3, #12
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086f0:	d101      	bne.n	80086f6 <dec_lock+0x2e>
 80086f2:	2300      	movs	r3, #0
 80086f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086f6:	89fb      	ldrh	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <dec_lock+0x3a>
 80086fc:	89fb      	ldrh	r3, [r7, #14]
 80086fe:	3b01      	subs	r3, #1
 8008700:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008702:	4a0e      	ldr	r2, [pc, #56]	@ (800873c <dec_lock+0x74>)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	4413      	add	r3, r2
 800870a:	330c      	adds	r3, #12
 800870c:	89fa      	ldrh	r2, [r7, #14]
 800870e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008710:	89fb      	ldrh	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <dec_lock+0x5a>
 8008716:	4a09      	ldr	r2, [pc, #36]	@ (800873c <dec_lock+0x74>)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	4413      	add	r3, r2
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	737b      	strb	r3, [r7, #13]
 8008726:	e001      	b.n	800872c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008728:	2302      	movs	r3, #2
 800872a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800872c:	7b7b      	ldrb	r3, [r7, #13]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20006830 	.word	0x20006830

08008740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e010      	b.n	8008770 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800874e:	4a0d      	ldr	r2, [pc, #52]	@ (8008784 <clear_lock+0x44>)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	4413      	add	r3, r2
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d105      	bne.n	800876a <clear_lock+0x2a>
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <clear_lock+0x44>)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d9eb      	bls.n	800874e <clear_lock+0xe>
	}
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20006830 	.word	0x20006830

08008788 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d034      	beq.n	8008806 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7858      	ldrb	r0, [r3, #1]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087ac:	2301      	movs	r3, #1
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	f7ff fd40 	bl	8008234 <disk_write>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
 80087be:	e022      	b.n	8008806 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d217      	bcs.n	8008806 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	789b      	ldrb	r3, [r3, #2]
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	e010      	b.n	8008800 <sync_window+0x78>
					wsect += fs->fsize;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7858      	ldrb	r0, [r3, #1]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087f2:	2301      	movs	r3, #1
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	f7ff fd1d 	bl	8008234 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d8eb      	bhi.n	80087de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d01b      	beq.n	8008860 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ffad 	bl	8008788 <sync_window>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d113      	bne.n	8008860 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7858      	ldrb	r0, [r3, #1]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008842:	2301      	movs	r3, #1
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	f7ff fcd5 	bl	80081f4 <disk_read>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008854:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008856:	2301      	movs	r3, #1
 8008858:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff ff87 	bl	8008788 <sync_window>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d158      	bne.n	8008936 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b03      	cmp	r3, #3
 800888a:	d148      	bne.n	800891e <sync_fs+0xb2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	791b      	ldrb	r3, [r3, #4]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d144      	bne.n	800891e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3330      	adds	r3, #48	@ 0x30
 8008898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7ff fda9 	bl	80083f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3330      	adds	r3, #48	@ 0x30
 80088a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80088ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff fd38 	bl	8008326 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3330      	adds	r3, #48	@ 0x30
 80088ba:	4921      	ldr	r1, [pc, #132]	@ (8008940 <sync_fs+0xd4>)
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff fd4d 	bl	800835c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3330      	adds	r3, #48	@ 0x30
 80088c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80088ca:	491e      	ldr	r1, [pc, #120]	@ (8008944 <sync_fs+0xd8>)
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff fd45 	bl	800835c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3330      	adds	r3, #48	@ 0x30
 80088d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	4619      	mov	r1, r3
 80088e0:	4610      	mov	r0, r2
 80088e2:	f7ff fd3b 	bl	800835c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3330      	adds	r3, #48	@ 0x30
 80088ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7ff fd31 	bl	800835c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7858      	ldrb	r0, [r3, #1]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008912:	2301      	movs	r3, #1
 8008914:	f7ff fc8e 	bl	8008234 <disk_write>
			fs->fsi_flag = 0;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2200      	movs	r2, #0
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fca4 	bl	8008274 <disk_ioctl>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <sync_fs+0xca>
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	41615252 	.word	0x41615252
 8008944:	61417272 	.word	0x61417272

08008948 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	3b02      	subs	r3, #2
 8008956:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	3b02      	subs	r3, #2
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d301      	bcc.n	8008968 <clust2sect+0x20>
 8008964:	2300      	movs	r3, #0
 8008966:	e008      	b.n	800897a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	895b      	ldrh	r3, [r3, #10]
 800896c:	461a      	mov	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	fb03 f202 	mul.w	r2, r3, r2
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008978:	4413      	add	r3, r2
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d904      	bls.n	80089a6 <get_fat+0x20>
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d302      	bcc.n	80089ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80089a6:	2301      	movs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e08e      	b.n	8008aca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80089ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d061      	beq.n	8008a7e <get_fat+0xf8>
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	dc7b      	bgt.n	8008ab6 <get_fat+0x130>
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d002      	beq.n	80089c8 <get_fat+0x42>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d041      	beq.n	8008a4a <get_fat+0xc4>
 80089c6:	e076      	b.n	8008ab6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	4413      	add	r3, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f7ff ff14 	bl	8008810 <move_window>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d166      	bne.n	8008abc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	60fa      	str	r2, [r7, #12]
 80089f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4413      	add	r3, r2
 80089fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	0a5b      	lsrs	r3, r3, #9
 8008a0a:	4413      	add	r3, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6938      	ldr	r0, [r7, #16]
 8008a10:	f7ff fefe 	bl	8008810 <move_window>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d152      	bne.n	8008ac0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <get_fat+0xba>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	091b      	lsrs	r3, r3, #4
 8008a3e:	e002      	b.n	8008a46 <get_fat+0xc0>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a46:	617b      	str	r3, [r7, #20]
			break;
 8008a48:	e03f      	b.n	8008aca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6a1a      	ldr	r2, [r3, #32]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	4413      	add	r3, r2
 8008a54:	4619      	mov	r1, r3
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f7ff feda 	bl	8008810 <move_window>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d130      	bne.n	8008ac4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008a70:	4413      	add	r3, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fc1c 	bl	80082b0 <ld_word>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	617b      	str	r3, [r7, #20]
			break;
 8008a7c:	e025      	b.n	8008aca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	6a1a      	ldr	r2, [r3, #32]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	09db      	lsrs	r3, r3, #7
 8008a86:	4413      	add	r3, r2
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6938      	ldr	r0, [r7, #16]
 8008a8c:	f7ff fec0 	bl	8008810 <move_window>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d118      	bne.n	8008ac8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fc1a 	bl	80082e0 <ld_dword>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008ab2:	617b      	str	r3, [r7, #20]
			break;
 8008ab4:	e009      	b.n	8008aca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e006      	b.n	8008aca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008abc:	bf00      	nop
 8008abe:	e004      	b.n	8008aca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ac8:	bf00      	nop
		}
	}

	return val;
 8008aca:	697b      	ldr	r3, [r7, #20]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b089      	sub	sp, #36	@ 0x24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	f240 80d9 	bls.w	8008c9e <put_fat+0x1ca>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	f080 80d3 	bcs.w	8008c9e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	f000 8096 	beq.w	8008c2e <put_fat+0x15a>
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f300 80cb 	bgt.w	8008c9e <put_fat+0x1ca>
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d002      	beq.n	8008b12 <put_fat+0x3e>
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d06e      	beq.n	8008bee <put_fat+0x11a>
 8008b10:	e0c5      	b.n	8008c9e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	0a5b      	lsrs	r3, r3, #9
 8008b28:	4413      	add	r3, r2
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff fe6f 	bl	8008810 <move_window>
 8008b32:	4603      	mov	r3, r0
 8008b34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b36:	7ffb      	ldrb	r3, [r7, #31]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 80a9 	bne.w	8008c90 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	1c59      	adds	r1, r3, #1
 8008b48:	61b9      	str	r1, [r7, #24]
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	4413      	add	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00d      	beq.n	8008b78 <put_fat+0xa4>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	b25a      	sxtb	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	e001      	b.n	8008b7c <put_fat+0xa8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	0a5b      	lsrs	r3, r3, #9
 8008b8e:	4413      	add	r3, r2
 8008b90:	4619      	mov	r1, r3
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff fe3c 	bl	8008810 <move_window>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b9c:	7ffb      	ldrb	r3, [r7, #31]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d178      	bne.n	8008c94 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	4413      	add	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <put_fat+0xf0>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e00e      	b.n	8008be2 <put_fat+0x10e>
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	f023 030f 	bic.w	r3, r3, #15
 8008bce:	b25a      	sxtb	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	70da      	strb	r2, [r3, #3]
			break;
 8008bec:	e057      	b.n	8008c9e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	0a1b      	lsrs	r3, r3, #8
 8008bf6:	4413      	add	r3, r2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fe08 	bl	8008810 <move_window>
 8008c00:	4603      	mov	r3, r0
 8008c02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c04:	7ffb      	ldrb	r3, [r7, #31]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d146      	bne.n	8008c98 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008c18:	4413      	add	r3, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff fb80 	bl	8008326 <st_word>
			fs->wflag = 1;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	70da      	strb	r2, [r3, #3]
			break;
 8008c2c:	e037      	b.n	8008c9e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	09db      	lsrs	r3, r3, #7
 8008c36:	4413      	add	r3, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fde8 	bl	8008810 <move_window>
 8008c40:	4603      	mov	r3, r0
 8008c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c44:	7ffb      	ldrb	r3, [r7, #31]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d128      	bne.n	8008c9c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008c5e:	4413      	add	r3, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fb3d 	bl	80082e0 <ld_dword>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008c6c:	4323      	orrs	r3, r4
 8008c6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008c7e:	4413      	add	r3, r2
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fb6a 	bl	800835c <st_dword>
			fs->wflag = 1;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	70da      	strb	r2, [r3, #3]
			break;
 8008c8e:	e006      	b.n	8008c9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008c90:	bf00      	nop
 8008c92:	e004      	b.n	8008c9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008c94:	bf00      	nop
 8008c96:	e002      	b.n	8008c9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008c98:	bf00      	nop
 8008c9a:	e000      	b.n	8008c9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008c9c:	bf00      	nop
		}
	}
	return res;
 8008c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3724      	adds	r7, #36	@ 0x24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d904      	bls.n	8008cce <remove_chain+0x26>
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d301      	bcc.n	8008cd2 <remove_chain+0x2a>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e04b      	b.n	8008d6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00c      	beq.n	8008cf2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	69b8      	ldr	r0, [r7, #24]
 8008ce0:	f7ff fef8 	bl	8008ad4 <put_fat>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ce8:	7ffb      	ldrb	r3, [r7, #31]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <remove_chain+0x4a>
 8008cee:	7ffb      	ldrb	r3, [r7, #31]
 8008cf0:	e03b      	b.n	8008d6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff fe46 	bl	8008986 <get_fat>
 8008cfa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d031      	beq.n	8008d66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <remove_chain+0x64>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e02e      	b.n	8008d6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d12:	d101      	bne.n	8008d18 <remove_chain+0x70>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e028      	b.n	8008d6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008d18:	2200      	movs	r2, #0
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	69b8      	ldr	r0, [r7, #24]
 8008d1e:	f7ff fed9 	bl	8008ad4 <put_fat>
 8008d22:	4603      	mov	r3, r0
 8008d24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d26:	7ffb      	ldrb	r3, [r7, #31]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <remove_chain+0x88>
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
 8008d2e:	e01c      	b.n	8008d6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	3b02      	subs	r3, #2
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d20b      	bcs.n	8008d56 <remove_chain+0xae>
			fs->free_clst++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	791b      	ldrb	r3, [r3, #4]
 8008d4c:	f043 0301 	orr.w	r3, r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d3c6      	bcc.n	8008cf2 <remove_chain+0x4a>
 8008d64:	e000      	b.n	8008d68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b088      	sub	sp, #32
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10d      	bne.n	8008da4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <create_chain+0x2c>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d31b      	bcc.n	8008dd6 <create_chain+0x64>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e018      	b.n	8008dd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fded 	bl	8008986 <get_fat>
 8008dac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d801      	bhi.n	8008db8 <create_chain+0x46>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e070      	b.n	8008e9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dbe:	d101      	bne.n	8008dc4 <create_chain+0x52>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	e06a      	b.n	8008e9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d201      	bcs.n	8008dd2 <create_chain+0x60>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	e063      	b.n	8008e9a <create_chain+0x128>
		scl = clst;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d307      	bcc.n	8008dfa <create_chain+0x88>
				ncl = 2;
 8008dea:	2302      	movs	r3, #2
 8008dec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d901      	bls.n	8008dfa <create_chain+0x88>
 8008df6:	2300      	movs	r3, #0
 8008df8:	e04f      	b.n	8008e9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff fdc2 	bl	8008986 <get_fat>
 8008e02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00e      	beq.n	8008e28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d003      	beq.n	8008e18 <create_chain+0xa6>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e16:	d101      	bne.n	8008e1c <create_chain+0xaa>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	e03e      	b.n	8008e9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d1da      	bne.n	8008dda <create_chain+0x68>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e038      	b.n	8008e9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e2e:	69f9      	ldr	r1, [r7, #28]
 8008e30:	6938      	ldr	r0, [r7, #16]
 8008e32:	f7ff fe4f 	bl	8008ad4 <put_fat>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <create_chain+0xe2>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d006      	beq.n	8008e54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f7ff fe42 	bl	8008ad4 <put_fat>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d116      	bne.n	8008e88 <create_chain+0x116>
		fs->last_clst = ncl;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	3b02      	subs	r3, #2
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d804      	bhi.n	8008e78 <create_chain+0x106>
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	1e5a      	subs	r2, r3, #1
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	791b      	ldrb	r3, [r3, #4]
 8008e7c:	f043 0301 	orr.w	r3, r3, #1
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	711a      	strb	r2, [r3, #4]
 8008e86:	e007      	b.n	8008e98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d102      	bne.n	8008e94 <create_chain+0x122>
 8008e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e92:	e000      	b.n	8008e96 <create_chain+0x124>
 8008e94:	2301      	movs	r3, #1
 8008e96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e98:	69fb      	ldr	r3, [r7, #28]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b087      	sub	sp, #28
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	0a5b      	lsrs	r3, r3, #9
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	8952      	ldrh	r2, [r2, #10]
 8008ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	613a      	str	r2, [r7, #16]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <clmt_clust+0x3a>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e010      	b.n	8008efe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d307      	bcc.n	8008ef4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ef2:	e7e9      	b.n	8008ec8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008ef4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4413      	add	r3, r2
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f20:	d204      	bcs.n	8008f2c <dir_sdi+0x22>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e063      	b.n	8008ff8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <dir_sdi+0x46>
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d902      	bls.n	8008f50 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10c      	bne.n	8008f70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	8912      	ldrh	r2, [r2, #8]
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d301      	bcc.n	8008f66 <dir_sdi+0x5c>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e048      	b.n	8008ff8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	61da      	str	r2, [r3, #28]
 8008f6e:	e029      	b.n	8008fc4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	895b      	ldrh	r3, [r3, #10]
 8008f74:	025b      	lsls	r3, r3, #9
 8008f76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f78:	e019      	b.n	8008fae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6979      	ldr	r1, [r7, #20]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff fd01 	bl	8008986 <get_fat>
 8008f84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f8c:	d101      	bne.n	8008f92 <dir_sdi+0x88>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e032      	b.n	8008ff8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d904      	bls.n	8008fa2 <dir_sdi+0x98>
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d301      	bcc.n	8008fa6 <dir_sdi+0x9c>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e028      	b.n	8008ff8 <dir_sdi+0xee>
			ofs -= csz;
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d2e1      	bcs.n	8008f7a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	6938      	ldr	r0, [r7, #16]
 8008fba:	f7ff fcc5 	bl	8008948 <clust2sect>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <dir_sdi+0xcc>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e010      	b.n	8008ff8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69da      	ldr	r2, [r3, #28]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	0a5b      	lsrs	r3, r3, #9
 8008fde:	441a      	add	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	3320      	adds	r3, #32
 8009016:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <dir_next+0x28>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009026:	d301      	bcc.n	800902c <dir_next+0x2c>
 8009028:	2304      	movs	r3, #4
 800902a:	e0aa      	b.n	8009182 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 8098 	bne.w	8009168 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10b      	bne.n	8009062 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	8912      	ldrh	r2, [r2, #8]
 8009052:	4293      	cmp	r3, r2
 8009054:	f0c0 8088 	bcc.w	8009168 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	61da      	str	r2, [r3, #28]
 800905e:	2304      	movs	r3, #4
 8009060:	e08f      	b.n	8009182 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	0a5b      	lsrs	r3, r3, #9
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	8952      	ldrh	r2, [r2, #10]
 800906a:	3a01      	subs	r2, #1
 800906c:	4013      	ands	r3, r2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d17a      	bne.n	8009168 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7ff fc83 	bl	8008986 <get_fat>
 8009080:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d801      	bhi.n	800908c <dir_next+0x8c>
 8009088:	2302      	movs	r3, #2
 800908a:	e07a      	b.n	8009182 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009092:	d101      	bne.n	8009098 <dir_next+0x98>
 8009094:	2301      	movs	r3, #1
 8009096:	e074      	b.n	8009182 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d358      	bcc.n	8009154 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	61da      	str	r2, [r3, #28]
 80090ae:	2304      	movs	r3, #4
 80090b0:	e067      	b.n	8009182 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7ff fe59 	bl	8008d72 <create_chain>
 80090c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <dir_next+0xcc>
 80090c8:	2307      	movs	r3, #7
 80090ca:	e05a      	b.n	8009182 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <dir_next+0xd6>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e055      	b.n	8009182 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090dc:	d101      	bne.n	80090e2 <dir_next+0xe2>
 80090de:	2301      	movs	r3, #1
 80090e0:	e04f      	b.n	8009182 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fb50 	bl	8008788 <sync_window>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <dir_next+0xf2>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e047      	b.n	8009182 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3330      	adds	r3, #48	@ 0x30
 80090f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff f97a 	bl	80083f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	6979      	ldr	r1, [r7, #20]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7ff fc1d 	bl	8008948 <clust2sect>
 800910e:	4602      	mov	r2, r0
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009114:	e012      	b.n	800913c <dir_next+0x13c>
						fs->wflag = 1;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fb33 	bl	8008788 <sync_window>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <dir_next+0x12c>
 8009128:	2301      	movs	r3, #1
 800912a:	e02a      	b.n	8009182 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3301      	adds	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	895b      	ldrh	r3, [r3, #10]
 8009140:	461a      	mov	r2, r3
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4293      	cmp	r3, r2
 8009146:	d3e6      	bcc.n	8009116 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800915a:	6979      	ldr	r1, [r7, #20]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fbf3 	bl	8008948 <clust2sect>
 8009162:	4602      	mov	r2, r0
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	441a      	add	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff feb4 	bl	8008f0a <dir_sdi>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d12b      	bne.n	8009204 <dir_alloc+0x7a>
		n = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4619      	mov	r1, r3
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fb2a 	bl	8008810 <move_window>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11d      	bne.n	8009202 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2be5      	cmp	r3, #229	@ 0xe5
 80091ce:	d004      	beq.n	80091da <dir_alloc+0x50>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d107      	bne.n	80091ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3301      	adds	r3, #1
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d102      	bne.n	80091ee <dir_alloc+0x64>
 80091e8:	e00c      	b.n	8009204 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091ee:	2101      	movs	r1, #1
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff05 	bl	8009000 <dir_next>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0d7      	beq.n	80091b0 <dir_alloc+0x26>
 8009200:	e000      	b.n	8009204 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009202:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b04      	cmp	r3, #4
 8009208:	d101      	bne.n	800920e <dir_alloc+0x84>
 800920a:	2307      	movs	r3, #7
 800920c:	75fb      	strb	r3, [r7, #23]
	return res;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	331a      	adds	r3, #26
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff f842 	bl	80082b0 <ld_word>
 800922c:	4603      	mov	r3, r0
 800922e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d109      	bne.n	800924c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	3314      	adds	r3, #20
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff f837 	bl	80082b0 <ld_word>
 8009242:	4603      	mov	r3, r0
 8009244:	041b      	lsls	r3, r3, #16
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	331a      	adds	r3, #26
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	b292      	uxth	r2, r2
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff f85a 	bl	8008326 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b03      	cmp	r3, #3
 8009278:	d109      	bne.n	800928e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f103 0214 	add.w	r2, r3, #20
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	b29b      	uxth	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7ff f84c 	bl	8008326 <st_word>
	}
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff fe2f 	bl	8008f0a <dir_sdi>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <dir_find+0x24>
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	e03e      	b.n	8009338 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4619      	mov	r1, r3
 80092c0:	6938      	ldr	r0, [r7, #16]
 80092c2:	f7ff faa5 	bl	8008810 <move_window>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d12f      	bne.n	8009330 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <dir_find+0x4e>
 80092de:	2304      	movs	r3, #4
 80092e0:	75fb      	strb	r3, [r7, #23]
 80092e2:	e028      	b.n	8009336 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	330b      	adds	r3, #11
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	330b      	adds	r3, #11
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <dir_find+0x86>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a18      	ldr	r0, [r3, #32]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3324      	adds	r3, #36	@ 0x24
 800930e:	220b      	movs	r2, #11
 8009310:	4619      	mov	r1, r3
 8009312:	f7ff f88b 	bl	800842c <mem_cmp>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fe6e 	bl	8009000 <dir_next>
 8009324:	4603      	mov	r3, r0
 8009326:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0c5      	beq.n	80092ba <dir_find+0x24>
 800932e:	e002      	b.n	8009336 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009330:	bf00      	nop
 8009332:	e000      	b.n	8009336 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009334:	bf00      	nop

	return res;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800934e:	2101      	movs	r1, #1
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff1a 	bl	800918a <dir_alloc>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11c      	bne.n	800939a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	4619      	mov	r1, r3
 8009366:	68b8      	ldr	r0, [r7, #8]
 8009368:	f7ff fa52 	bl	8008810 <move_window>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d111      	bne.n	800939a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	2220      	movs	r2, #32
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff f839 	bl	80083f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a18      	ldr	r0, [r3, #32]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3324      	adds	r3, #36	@ 0x24
 800938c:	220b      	movs	r2, #11
 800938e:	4619      	mov	r1, r3
 8009390:	f7ff f810 	bl	80083b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2201      	movs	r2, #1
 8009398:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2200      	movs	r2, #0
 80093b2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d04f      	beq.n	800945c <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	613b      	str	r3, [r7, #16]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80093c4:	e022      	b.n	800940c <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	1c59      	adds	r1, r3, #1
 80093ce:	6179      	str	r1, [r7, #20]
 80093d0:	4413      	add	r3, r2
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d016      	beq.n	800940a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d101      	bne.n	80093e6 <get_fileinfo+0x42>
 80093e2:	23e5      	movs	r3, #229	@ 0xe5
 80093e4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d106      	bne.n	80093fa <get_fileinfo+0x56>
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	613a      	str	r2, [r7, #16]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4413      	add	r3, r2
 80093f6:	222e      	movs	r2, #46	@ 0x2e
 80093f8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	613a      	str	r2, [r7, #16]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	4413      	add	r3, r2
 8009404:	7bfa      	ldrb	r2, [r7, #15]
 8009406:	725a      	strb	r2, [r3, #9]
 8009408:	e000      	b.n	800940c <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800940a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b0a      	cmp	r3, #10
 8009410:	d9d9      	bls.n	80093c6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4413      	add	r3, r2
 8009418:	3309      	adds	r3, #9
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	7ada      	ldrb	r2, [r3, #11]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	331c      	adds	r3, #28
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe ff56 	bl	80082e0 <ld_dword>
 8009434:	4602      	mov	r2, r0
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	3316      	adds	r3, #22
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe ff4d 	bl	80082e0 <ld_dword>
 8009446:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	b29a      	uxth	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	80da      	strh	r2, [r3, #6]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	0c1b      	lsrs	r3, r3, #16
 8009454:	b29a      	uxth	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	809a      	strh	r2, [r3, #4]
 800945a:	e000      	b.n	800945e <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800945c:	bf00      	nop
}
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3324      	adds	r3, #36	@ 0x24
 8009478:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800947a:	220b      	movs	r2, #11
 800947c:	2120      	movs	r1, #32
 800947e:	68b8      	ldr	r0, [r7, #8]
 8009480:	f7fe ffb9 	bl	80083f6 <mem_set>
	si = i = 0; ni = 8;
 8009484:	2300      	movs	r3, #0
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	61fb      	str	r3, [r7, #28]
 800948c:	2308      	movs	r3, #8
 800948e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	61fa      	str	r2, [r7, #28]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800949e:	7efb      	ldrb	r3, [r7, #27]
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d94e      	bls.n	8009542 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80094a4:	7efb      	ldrb	r3, [r7, #27]
 80094a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80094a8:	d006      	beq.n	80094b8 <create_name+0x54>
 80094aa:	7efb      	ldrb	r3, [r7, #27]
 80094ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80094ae:	d110      	bne.n	80094d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80094b0:	e002      	b.n	80094b8 <create_name+0x54>
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	3301      	adds	r3, #1
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80094c2:	d0f6      	beq.n	80094b2 <create_name+0x4e>
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80094ce:	d0f0      	beq.n	80094b2 <create_name+0x4e>
			break;
 80094d0:	e038      	b.n	8009544 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80094d2:	7efb      	ldrb	r3, [r7, #27]
 80094d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80094d6:	d003      	beq.n	80094e0 <create_name+0x7c>
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d30c      	bcc.n	80094fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b0b      	cmp	r3, #11
 80094e4:	d002      	beq.n	80094ec <create_name+0x88>
 80094e6:	7efb      	ldrb	r3, [r7, #27]
 80094e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ea:	d001      	beq.n	80094f0 <create_name+0x8c>
 80094ec:	2306      	movs	r3, #6
 80094ee:	e044      	b.n	800957a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80094f0:	2308      	movs	r3, #8
 80094f2:	613b      	str	r3, [r7, #16]
 80094f4:	230b      	movs	r3, #11
 80094f6:	617b      	str	r3, [r7, #20]
			continue;
 80094f8:	e022      	b.n	8009540 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80094fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	da04      	bge.n	800950c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009502:	7efb      	ldrb	r3, [r7, #27]
 8009504:	3b80      	subs	r3, #128	@ 0x80
 8009506:	4a1f      	ldr	r2, [pc, #124]	@ (8009584 <create_name+0x120>)
 8009508:	5cd3      	ldrb	r3, [r2, r3]
 800950a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800950c:	7efb      	ldrb	r3, [r7, #27]
 800950e:	4619      	mov	r1, r3
 8009510:	481d      	ldr	r0, [pc, #116]	@ (8009588 <create_name+0x124>)
 8009512:	f7fe ffb2 	bl	800847a <chk_chr>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <create_name+0xbc>
 800951c:	2306      	movs	r3, #6
 800951e:	e02c      	b.n	800957a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009520:	7efb      	ldrb	r3, [r7, #27]
 8009522:	2b60      	cmp	r3, #96	@ 0x60
 8009524:	d905      	bls.n	8009532 <create_name+0xce>
 8009526:	7efb      	ldrb	r3, [r7, #27]
 8009528:	2b7a      	cmp	r3, #122	@ 0x7a
 800952a:	d802      	bhi.n	8009532 <create_name+0xce>
 800952c:	7efb      	ldrb	r3, [r7, #27]
 800952e:	3b20      	subs	r3, #32
 8009530:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	613a      	str	r2, [r7, #16]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	4413      	add	r3, r2
 800953c:	7efa      	ldrb	r2, [r7, #27]
 800953e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009540:	e7a6      	b.n	8009490 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009542:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	441a      	add	r2, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <create_name+0xf4>
 8009554:	2306      	movs	r3, #6
 8009556:	e010      	b.n	800957a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2be5      	cmp	r3, #229	@ 0xe5
 800955e:	d102      	bne.n	8009566 <create_name+0x102>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2205      	movs	r2, #5
 8009564:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009566:	7efb      	ldrb	r3, [r7, #27]
 8009568:	2b20      	cmp	r3, #32
 800956a:	d801      	bhi.n	8009570 <create_name+0x10c>
 800956c:	2204      	movs	r2, #4
 800956e:	e000      	b.n	8009572 <create_name+0x10e>
 8009570:	2200      	movs	r2, #0
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	330b      	adds	r3, #11
 8009576:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009578:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	0800f1f0 	.word	0x0800f1f0
 8009588:	0800f18c 	.word	0x0800f18c

0800958c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80095a0:	e002      	b.n	80095a8 <follow_path+0x1c>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80095ae:	d0f8      	beq.n	80095a2 <follow_path+0x16>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80095b6:	d0f4      	beq.n	80095a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	2200      	movs	r2, #0
 80095bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b1f      	cmp	r3, #31
 80095c4:	d80a      	bhi.n	80095dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2280      	movs	r2, #128	@ 0x80
 80095ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff fc9a 	bl	8008f0a <dir_sdi>
 80095d6:	4603      	mov	r3, r0
 80095d8:	75fb      	strb	r3, [r7, #23]
 80095da:	e043      	b.n	8009664 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80095dc:	463b      	mov	r3, r7
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ff3f 	bl	8009464 <create_name>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d134      	bne.n	800965a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fe50 	bl	8009296 <dir_find>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009600:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b04      	cmp	r3, #4
 800960c:	d127      	bne.n	800965e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800960e:	7afb      	ldrb	r3, [r7, #11]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d122      	bne.n	800965e <follow_path+0xd2>
 8009618:	2305      	movs	r3, #5
 800961a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800961c:	e01f      	b.n	800965e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11c      	bne.n	8009662 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	799b      	ldrb	r3, [r3, #6]
 800962c:	f003 0310 	and.w	r3, r3, #16
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009634:	2305      	movs	r3, #5
 8009636:	75fb      	strb	r3, [r7, #23]
 8009638:	e014      	b.n	8009664 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009648:	4413      	add	r3, r2
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fde3 	bl	8009218 <ld_clust>
 8009652:	4602      	mov	r2, r0
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009658:	e7c0      	b.n	80095dc <follow_path+0x50>
			if (res != FR_OK) break;
 800965a:	bf00      	nop
 800965c:	e002      	b.n	8009664 <follow_path+0xd8>
				break;
 800965e:	bf00      	nop
 8009660:	e000      	b.n	8009664 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009662:	bf00      	nop
			}
		}
	}

	return res;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800966e:	b480      	push	{r7}
 8009670:	b087      	sub	sp, #28
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800967a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d031      	beq.n	80096e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	617b      	str	r3, [r7, #20]
 800968a:	e002      	b.n	8009692 <get_ldnumber+0x24>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3301      	adds	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b20      	cmp	r3, #32
 8009698:	d903      	bls.n	80096a2 <get_ldnumber+0x34>
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b3a      	cmp	r3, #58	@ 0x3a
 80096a0:	d1f4      	bne.n	800968c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80096a8:	d11c      	bne.n	80096e4 <get_ldnumber+0x76>
			tp = *path;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	60fa      	str	r2, [r7, #12]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	3b30      	subs	r3, #48	@ 0x30
 80096ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d80e      	bhi.n	80096e0 <get_ldnumber+0x72>
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d10a      	bne.n	80096e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d107      	bne.n	80096e0 <get_ldnumber+0x72>
					vol = (int)i;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	3301      	adds	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	e002      	b.n	80096ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80096e4:	2300      	movs	r3, #0
 80096e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80096e8:	693b      	ldr	r3, [r7, #16]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	70da      	strb	r2, [r3, #3]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800970e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff f87c 	bl	8008810 <move_window>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <check_fs+0x2a>
 800971e:	2304      	movs	r3, #4
 8009720:	e038      	b.n	8009794 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3330      	adds	r3, #48	@ 0x30
 8009726:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fdc0 	bl	80082b0 <ld_word>
 8009730:	4603      	mov	r3, r0
 8009732:	461a      	mov	r2, r3
 8009734:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009738:	429a      	cmp	r2, r3
 800973a:	d001      	beq.n	8009740 <check_fs+0x48>
 800973c:	2303      	movs	r3, #3
 800973e:	e029      	b.n	8009794 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009746:	2be9      	cmp	r3, #233	@ 0xe9
 8009748:	d009      	beq.n	800975e <check_fs+0x66>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009750:	2beb      	cmp	r3, #235	@ 0xeb
 8009752:	d11e      	bne.n	8009792 <check_fs+0x9a>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800975a:	2b90      	cmp	r3, #144	@ 0x90
 800975c:	d119      	bne.n	8009792 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3330      	adds	r3, #48	@ 0x30
 8009762:	3336      	adds	r3, #54	@ 0x36
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fdbb 	bl	80082e0 <ld_dword>
 800976a:	4603      	mov	r3, r0
 800976c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009770:	4a0a      	ldr	r2, [pc, #40]	@ (800979c <check_fs+0xa4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d101      	bne.n	800977a <check_fs+0x82>
 8009776:	2300      	movs	r3, #0
 8009778:	e00c      	b.n	8009794 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3330      	adds	r3, #48	@ 0x30
 800977e:	3352      	adds	r3, #82	@ 0x52
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fdad 	bl	80082e0 <ld_dword>
 8009786:	4603      	mov	r3, r0
 8009788:	4a05      	ldr	r2, [pc, #20]	@ (80097a0 <check_fs+0xa8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d101      	bne.n	8009792 <check_fs+0x9a>
 800978e:	2300      	movs	r3, #0
 8009790:	e000      	b.n	8009794 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009792:	2302      	movs	r3, #2
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	00544146 	.word	0x00544146
 80097a0:	33544146 	.word	0x33544146

080097a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b096      	sub	sp, #88	@ 0x58
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff ff58 	bl	800966e <get_ldnumber>
 80097be:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80097c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da01      	bge.n	80097ca <find_volume+0x26>
 80097c6:	230b      	movs	r3, #11
 80097c8:	e22d      	b.n	8009c26 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80097ca:	4aa1      	ldr	r2, [pc, #644]	@ (8009a50 <find_volume+0x2ac>)
 80097cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <find_volume+0x3a>
 80097da:	230c      	movs	r3, #12
 80097dc:	e223      	b.n	8009c26 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	f023 0301 	bic.w	r3, r3, #1
 80097ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01a      	beq.n	800982a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fcb9 	bl	8008170 <disk_status>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009804:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10c      	bne.n	800982a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <find_volume+0x82>
 8009816:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009822:	230a      	movs	r3, #10
 8009824:	e1ff      	b.n	8009c26 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009826:	2300      	movs	r3, #0
 8009828:	e1fd      	b.n	8009c26 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009832:	b2da      	uxtb	r2, r3
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fcb1 	bl	80081a4 <disk_initialize>
 8009842:	4603      	mov	r3, r0
 8009844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009848:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009854:	2303      	movs	r3, #3
 8009856:	e1e6      	b.n	8009c26 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d007      	beq.n	800986e <find_volume+0xca>
 800985e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009862:	f003 0304 	and.w	r3, r3, #4
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800986a:	230a      	movs	r3, #10
 800986c:	e1db      	b.n	8009c26 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009872:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009874:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009876:	f7ff ff3f 	bl	80096f8 <check_fs>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009884:	2b02      	cmp	r3, #2
 8009886:	d149      	bne.n	800991c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009888:	2300      	movs	r3, #0
 800988a:	643b      	str	r3, [r7, #64]	@ 0x40
 800988c:	e01e      	b.n	80098cc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800989c:	4413      	add	r3, r2
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	3304      	adds	r3, #4
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <find_volume+0x114>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	3308      	adds	r3, #8
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fd16 	bl	80082e0 <ld_dword>
 80098b4:	4602      	mov	r2, r0
 80098b6:	e000      	b.n	80098ba <find_volume+0x116>
 80098b8:	2200      	movs	r2, #0
 80098ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	3358      	adds	r3, #88	@ 0x58
 80098c0:	443b      	add	r3, r7
 80098c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80098c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c8:	3301      	adds	r3, #1
 80098ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80098cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d9dd      	bls.n	800988e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80098d2:	2300      	movs	r3, #0
 80098d4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80098d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <find_volume+0x13e>
 80098dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098de:	3b01      	subs	r3, #1
 80098e0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80098e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	3358      	adds	r3, #88	@ 0x58
 80098e8:	443b      	add	r3, r7
 80098ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80098ee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80098f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <find_volume+0x15e>
 80098f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098fa:	f7ff fefd 	bl	80096f8 <check_fs>
 80098fe:	4603      	mov	r3, r0
 8009900:	e000      	b.n	8009904 <find_volume+0x160>
 8009902:	2303      	movs	r3, #3
 8009904:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800990c:	2b01      	cmp	r3, #1
 800990e:	d905      	bls.n	800991c <find_volume+0x178>
 8009910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009912:	3301      	adds	r3, #1
 8009914:	643b      	str	r3, [r7, #64]	@ 0x40
 8009916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009918:	2b03      	cmp	r3, #3
 800991a:	d9e2      	bls.n	80098e2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800991c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009920:	2b04      	cmp	r3, #4
 8009922:	d101      	bne.n	8009928 <find_volume+0x184>
 8009924:	2301      	movs	r3, #1
 8009926:	e17e      	b.n	8009c26 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800992c:	2b01      	cmp	r3, #1
 800992e:	d901      	bls.n	8009934 <find_volume+0x190>
 8009930:	230d      	movs	r3, #13
 8009932:	e178      	b.n	8009c26 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009936:	3330      	adds	r3, #48	@ 0x30
 8009938:	330b      	adds	r3, #11
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fcb8 	bl	80082b0 <ld_word>
 8009940:	4603      	mov	r3, r0
 8009942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009946:	d001      	beq.n	800994c <find_volume+0x1a8>
 8009948:	230d      	movs	r3, #13
 800994a:	e16c      	b.n	8009c26 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	3330      	adds	r3, #48	@ 0x30
 8009950:	3316      	adds	r3, #22
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fcac 	bl	80082b0 <ld_word>
 8009958:	4603      	mov	r3, r0
 800995a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800995c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <find_volume+0x1cc>
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	3330      	adds	r3, #48	@ 0x30
 8009966:	3324      	adds	r3, #36	@ 0x24
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fcb9 	bl	80082e0 <ld_dword>
 800996e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009974:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d005      	beq.n	8009994 <find_volume+0x1f0>
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	789b      	ldrb	r3, [r3, #2]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d001      	beq.n	8009994 <find_volume+0x1f0>
 8009990:	230d      	movs	r3, #13
 8009992:	e148      	b.n	8009c26 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	789b      	ldrb	r3, [r3, #2]
 8009998:	461a      	mov	r2, r3
 800999a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800999c:	fb02 f303 	mul.w	r3, r2, r3
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099a8:	461a      	mov	r2, r3
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b0:	895b      	ldrh	r3, [r3, #10]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <find_volume+0x224>
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	895b      	ldrh	r3, [r3, #10]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	895b      	ldrh	r3, [r3, #10]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	4013      	ands	r3, r2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <find_volume+0x228>
 80099c8:	230d      	movs	r3, #13
 80099ca:	e12c      	b.n	8009c26 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	3330      	adds	r3, #48	@ 0x30
 80099d0:	3311      	adds	r3, #17
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fc6c 	bl	80082b0 <ld_word>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	891b      	ldrh	r3, [r3, #8]
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <find_volume+0x24e>
 80099ee:	230d      	movs	r3, #13
 80099f0:	e119      	b.n	8009c26 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	3330      	adds	r3, #48	@ 0x30
 80099f6:	3313      	adds	r3, #19
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fc59 	bl	80082b0 <ld_word>
 80099fe:	4603      	mov	r3, r0
 8009a00:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <find_volume+0x272>
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	3330      	adds	r3, #48	@ 0x30
 8009a0c:	3320      	adds	r3, #32
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fc66 	bl	80082e0 <ld_dword>
 8009a14:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	3330      	adds	r3, #48	@ 0x30
 8009a1a:	330e      	adds	r3, #14
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fc47 	bl	80082b0 <ld_word>
 8009a22:	4603      	mov	r3, r0
 8009a24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009a26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <find_volume+0x28c>
 8009a2c:	230d      	movs	r3, #13
 8009a2e:	e0fa      	b.n	8009c26 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009a30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a34:	4413      	add	r3, r2
 8009a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a38:	8912      	ldrh	r2, [r2, #8]
 8009a3a:	0912      	lsrs	r2, r2, #4
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	4413      	add	r3, r2
 8009a40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d204      	bcs.n	8009a54 <find_volume+0x2b0>
 8009a4a:	230d      	movs	r3, #13
 8009a4c:	e0eb      	b.n	8009c26 <find_volume+0x482>
 8009a4e:	bf00      	nop
 8009a50:	20006828 	.word	0x20006828
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009a54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a5c:	8952      	ldrh	r2, [r2, #10]
 8009a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <find_volume+0x2ca>
 8009a6a:	230d      	movs	r3, #13
 8009a6c:	e0db      	b.n	8009c26 <find_volume+0x482>
		fmt = FS_FAT32;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a76:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d802      	bhi.n	8009a84 <find_volume+0x2e0>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d802      	bhi.n	8009a94 <find_volume+0x2f0>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	1c9a      	adds	r2, r3, #2
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009aa0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009aa2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aa6:	441a      	add	r2, r3
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009aac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	441a      	add	r2, r3
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009ab6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d11e      	bne.n	8009afc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	3330      	adds	r3, #48	@ 0x30
 8009ac2:	332a      	adds	r3, #42	@ 0x2a
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fbf3 	bl	80082b0 <ld_word>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <find_volume+0x330>
 8009ad0:	230d      	movs	r3, #13
 8009ad2:	e0a8      	b.n	8009c26 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	891b      	ldrh	r3, [r3, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <find_volume+0x33c>
 8009adc:	230d      	movs	r3, #13
 8009ade:	e0a2      	b.n	8009c26 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	3330      	adds	r3, #48	@ 0x30
 8009ae4:	332c      	adds	r3, #44	@ 0x2c
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fbfa 	bl	80082e0 <ld_dword>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009afa:	e01f      	b.n	8009b3c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	891b      	ldrh	r3, [r3, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <find_volume+0x364>
 8009b04:	230d      	movs	r3, #13
 8009b06:	e08e      	b.n	8009c26 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	6a1a      	ldr	r2, [r3, #32]
 8009b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b0e:	441a      	add	r2, r3
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009b14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d103      	bne.n	8009b24 <find_volume+0x380>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	e00a      	b.n	8009b3a <find_volume+0x396>
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	695a      	ldr	r2, [r3, #20]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	4413      	add	r3, r2
 8009b2e:	085a      	lsrs	r2, r3, #1
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009b3a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	699a      	ldr	r2, [r3, #24]
 8009b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b42:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009b46:	0a5b      	lsrs	r3, r3, #9
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d201      	bcs.n	8009b50 <find_volume+0x3ac>
 8009b4c:	230d      	movs	r3, #13
 8009b4e:	e06a      	b.n	8009c26 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b56:	611a      	str	r2, [r3, #16]
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	2280      	movs	r2, #128	@ 0x80
 8009b64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009b66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d149      	bne.n	8009c02 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	3330      	adds	r3, #48	@ 0x30
 8009b72:	3330      	adds	r3, #48	@ 0x30
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fb9b 	bl	80082b0 <ld_word>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d140      	bne.n	8009c02 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b82:	3301      	adds	r3, #1
 8009b84:	4619      	mov	r1, r3
 8009b86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b88:	f7fe fe42 	bl	8008810 <move_window>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d137      	bne.n	8009c02 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	2200      	movs	r2, #0
 8009b96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	3330      	adds	r3, #48	@ 0x30
 8009b9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe fb85 	bl	80082b0 <ld_word>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d127      	bne.n	8009c02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb4:	3330      	adds	r3, #48	@ 0x30
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fb92 	bl	80082e0 <ld_dword>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8009c30 <find_volume+0x48c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d11e      	bne.n	8009c02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc6:	3330      	adds	r3, #48	@ 0x30
 8009bc8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fb87 	bl	80082e0 <ld_dword>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4a17      	ldr	r2, [pc, #92]	@ (8009c34 <find_volume+0x490>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d113      	bne.n	8009c02 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	3330      	adds	r3, #48	@ 0x30
 8009bde:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fb7c 	bl	80082e0 <ld_dword>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	3330      	adds	r3, #48	@ 0x30
 8009bf2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fb72 	bl	80082e0 <ld_dword>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009c08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c38 <find_volume+0x494>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	4b09      	ldr	r3, [pc, #36]	@ (8009c38 <find_volume+0x494>)
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	4b08      	ldr	r3, [pc, #32]	@ (8009c38 <find_volume+0x494>)
 8009c18:	881a      	ldrh	r2, [r3, #0]
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009c1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c20:	f7fe fd8e 	bl	8008740 <clear_lock>
#endif
	return FR_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3758      	adds	r7, #88	@ 0x58
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	41615252 	.word	0x41615252
 8009c34:	61417272 	.word	0x61417272
 8009c38:	2000682c 	.word	0x2000682c

08009c3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009c46:	2309      	movs	r3, #9
 8009c48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01c      	beq.n	8009c8a <validate+0x4e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d018      	beq.n	8009c8a <validate+0x4e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d013      	beq.n	8009c8a <validate+0x4e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	889a      	ldrh	r2, [r3, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	88db      	ldrh	r3, [r3, #6]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d10c      	bne.n	8009c8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fa7a 	bl	8008170 <disk_status>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <validate+0x4e>
			res = FR_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <validate+0x5a>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	e000      	b.n	8009c98 <validate+0x5c>
 8009c96:	2300      	movs	r3, #0
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	6013      	str	r3, [r2, #0]
	return res;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009cba:	f107 0310 	add.w	r3, r7, #16
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff fcd5 	bl	800966e <get_ldnumber>
 8009cc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da01      	bge.n	8009cd0 <f_mount+0x28>
 8009ccc:	230b      	movs	r3, #11
 8009cce:	e02b      	b.n	8009d28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009cd0:	4a17      	ldr	r2, [pc, #92]	@ (8009d30 <f_mount+0x88>)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ce0:	69b8      	ldr	r0, [r7, #24]
 8009ce2:	f7fe fd2d 	bl	8008740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	490d      	ldr	r1, [pc, #52]	@ (8009d30 <f_mount+0x88>)
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <f_mount+0x66>
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d001      	beq.n	8009d12 <f_mount+0x6a>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e00a      	b.n	8009d28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009d12:	f107 010c 	add.w	r1, r7, #12
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff fd41 	bl	80097a4 <find_volume>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20006828 	.word	0x20006828

08009d34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b098      	sub	sp, #96	@ 0x60
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <f_open+0x18>
 8009d48:	2309      	movs	r3, #9
 8009d4a:	e1a9      	b.n	800a0a0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009d54:	79fa      	ldrb	r2, [r7, #7]
 8009d56:	f107 0110 	add.w	r1, r7, #16
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff fd20 	bl	80097a4 <find_volume>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 818d 	bne.w	800a08e <f_open+0x35a>
		dj.obj.fs = fs;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	f107 0314 	add.w	r3, r7, #20
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fc03 	bl	800958c <follow_path>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d118      	bne.n	8009dc6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d98:	b25b      	sxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da03      	bge.n	8009da6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009d9e:	2306      	movs	r3, #6
 8009da0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009da4:	e00f      	b.n	8009dc6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	bf8c      	ite	hi
 8009dac:	2301      	movhi	r3, #1
 8009dae:	2300      	movls	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	f107 0314 	add.w	r3, r7, #20
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fb78 	bl	80084b0 <chk_lock>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	f003 031c 	and.w	r3, r3, #28
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d07f      	beq.n	8009ed0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d017      	beq.n	8009e08 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d10e      	bne.n	8009dfe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009de0:	f7fe fbc2 	bl	8008568 <enq_lock>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d006      	beq.n	8009df8 <f_open+0xc4>
 8009dea:	f107 0314 	add.w	r3, r7, #20
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff faa6 	bl	8009340 <dir_register>
 8009df4:	4603      	mov	r3, r0
 8009df6:	e000      	b.n	8009dfa <f_open+0xc6>
 8009df8:	2312      	movs	r3, #18
 8009dfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	f043 0308 	orr.w	r3, r3, #8
 8009e04:	71fb      	strb	r3, [r7, #7]
 8009e06:	e010      	b.n	8009e2a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009e08:	7ebb      	ldrb	r3, [r7, #26]
 8009e0a:	f003 0311 	and.w	r3, r3, #17
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <f_open+0xe6>
					res = FR_DENIED;
 8009e12:	2307      	movs	r3, #7
 8009e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e18:	e007      	b.n	8009e2a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <f_open+0xf6>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d168      	bne.n	8009f04 <f_open+0x1d0>
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d063      	beq.n	8009f04 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009e3c:	f7fd fc62 	bl	8007704 <get_fattime>
 8009e40:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e44:	330e      	adds	r3, #14
 8009e46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fa87 	bl	800835c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e50:	3316      	adds	r3, #22
 8009e52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe fa81 	bl	800835c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	2220      	movs	r2, #32
 8009e60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff f9d5 	bl	8009218 <ld_clust>
 8009e6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009e74:	2200      	movs	r2, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff f9ed 	bl	8009256 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7e:	331c      	adds	r3, #28
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fa6a 	bl	800835c <st_dword>
					fs->wflag = 1;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d037      	beq.n	8009f04 <f_open+0x1d0>
						dw = fs->winsect;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009e9a:	f107 0314 	add.w	r3, r7, #20
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe ff00 	bl	8008ca8 <remove_chain>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009eae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d126      	bne.n	8009f04 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fca8 	bl	8008810 <move_window>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eca:	3a01      	subs	r2, #1
 8009ecc:	60da      	str	r2, [r3, #12]
 8009ece:	e019      	b.n	8009f04 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d115      	bne.n	8009f04 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ed8:	7ebb      	ldrb	r3, [r7, #26]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <f_open+0x1b6>
					res = FR_NO_FILE;
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009ee8:	e00c      	b.n	8009f04 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d007      	beq.n	8009f04 <f_open+0x1d0>
 8009ef4:	7ebb      	ldrb	r3, [r7, #26]
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <f_open+0x1d0>
						res = FR_DENIED;
 8009efe:	2307      	movs	r3, #7
 8009f00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009f04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d126      	bne.n	8009f5a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	bf8c      	ite	hi
 8009f32:	2301      	movhi	r3, #1
 8009f34:	2300      	movls	r3, #0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f107 0314 	add.w	r3, r7, #20
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fb33 	bl	80085ac <inc_lock>
 8009f46:	4602      	mov	r2, r0
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <f_open+0x226>
 8009f54:	2302      	movs	r3, #2
 8009f56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f040 8095 	bne.w	800a08e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff f954 	bl	8009218 <ld_clust>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f78:	331c      	adds	r3, #28
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f9b0 	bl	80082e0 <ld_dword>
 8009f80:	4602      	mov	r2, r0
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	88da      	ldrh	r2, [r3, #6]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	79fa      	ldrb	r2, [r7, #7]
 8009f9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3330      	adds	r3, #48	@ 0x30
 8009fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe fa1a 	bl	80083f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	f003 0320 	and.w	r3, r3, #32
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d060      	beq.n	800a08e <f_open+0x35a>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d05c      	beq.n	800a08e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	025b      	lsls	r3, r3, #9
 8009fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ff0:	e016      	b.n	800a020 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fcc5 	bl	8008986 <get_fat>
 8009ffc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a000:	2b01      	cmp	r3, #1
 800a002:	d802      	bhi.n	800a00a <f_open+0x2d6>
 800a004:	2302      	movs	r3, #2
 800a006:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a00a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a010:	d102      	bne.n	800a018 <f_open+0x2e4>
 800a012:	2301      	movs	r3, #1
 800a014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a020:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <f_open+0x2fc>
 800a028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a02a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d8e0      	bhi.n	8009ff2 <f_open+0x2be>
				}
				fp->clust = clst;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a034:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d127      	bne.n	800a08e <f_open+0x35a>
 800a03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a044:	2b00      	cmp	r3, #0
 800a046:	d022      	beq.n	800a08e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fc7b 	bl	8008948 <clust2sect>
 800a052:	6478      	str	r0, [r7, #68]	@ 0x44
 800a054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a056:	2b00      	cmp	r3, #0
 800a058:	d103      	bne.n	800a062 <f_open+0x32e>
						res = FR_INT_ERR;
 800a05a:	2302      	movs	r3, #2
 800a05c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a060:	e015      	b.n	800a08e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a064:	0a5a      	lsrs	r2, r3, #9
 800a066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a068:	441a      	add	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	7858      	ldrb	r0, [r3, #1]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a1a      	ldr	r2, [r3, #32]
 800a07c:	2301      	movs	r3, #1
 800a07e:	f7fe f8b9 	bl	80081f4 <disk_read>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <f_open+0x35a>
 800a088:	2301      	movs	r3, #1
 800a08a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a08e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <f_open+0x368>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a09c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3760      	adds	r7, #96	@ 0x60
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08c      	sub	sp, #48	@ 0x30
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f107 0210 	add.w	r2, r7, #16
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff fdb7 	bl	8009c3c <validate>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a0d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d107      	bne.n	800a0ec <f_write+0x44>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	7d5b      	ldrb	r3, [r3, #21]
 800a0e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <f_write+0x4a>
 800a0ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0f0:	e14b      	b.n	800a38a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	7d1b      	ldrb	r3, [r3, #20]
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <f_write+0x5a>
 800a0fe:	2307      	movs	r3, #7
 800a100:	e143      	b.n	800a38a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	699a      	ldr	r2, [r3, #24]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	441a      	add	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	429a      	cmp	r2, r3
 800a110:	f080 812d 	bcs.w	800a36e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	43db      	mvns	r3, r3
 800a11a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a11c:	e127      	b.n	800a36e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a126:	2b00      	cmp	r3, #0
 800a128:	f040 80e3 	bne.w	800a2f2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	0a5b      	lsrs	r3, r3, #9
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	8952      	ldrh	r2, [r2, #10]
 800a136:	3a01      	subs	r2, #1
 800a138:	4013      	ands	r3, r2
 800a13a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d143      	bne.n	800a1ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10c      	bne.n	800a164 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d11a      	bne.n	800a18c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fe09 	bl	8008d72 <create_chain>
 800a160:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a162:	e013      	b.n	800a18c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d007      	beq.n	800a17c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	4619      	mov	r1, r3
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7fe fe95 	bl	8008ea2 <clmt_clust>
 800a178:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a17a:	e007      	b.n	800a18c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	4619      	mov	r1, r3
 800a184:	4610      	mov	r0, r2
 800a186:	f7fe fdf4 	bl	8008d72 <create_chain>
 800a18a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 80f2 	beq.w	800a378 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a196:	2b01      	cmp	r3, #1
 800a198:	d104      	bne.n	800a1a4 <f_write+0xfc>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2202      	movs	r2, #2
 800a19e:	755a      	strb	r2, [r3, #21]
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e0f2      	b.n	800a38a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1aa:	d104      	bne.n	800a1b6 <f_write+0x10e>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	755a      	strb	r2, [r3, #21]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e0e9      	b.n	800a38a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <f_write+0x122>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	7d1b      	ldrb	r3, [r3, #20]
 800a1ce:	b25b      	sxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da18      	bge.n	800a206 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	7858      	ldrb	r0, [r3, #1]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6a1a      	ldr	r2, [r3, #32]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	f7fe f826 	bl	8008234 <disk_write>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <f_write+0x150>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	755a      	strb	r2, [r3, #21]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e0c8      	b.n	800a38a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	7d1b      	ldrb	r3, [r3, #20]
 800a1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a200:	b2da      	uxtb	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f7fe fb9a 	bl	8008948 <clust2sect>
 800a214:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d104      	bne.n	800a226 <f_write+0x17e>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2202      	movs	r2, #2
 800a220:	755a      	strb	r2, [r3, #21]
 800a222:	2302      	movs	r3, #2
 800a224:	e0b1      	b.n	800a38a <f_write+0x2e2>
			sect += csect;
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	4413      	add	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	0a5b      	lsrs	r3, r3, #9
 800a232:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d03c      	beq.n	800a2b4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	4413      	add	r3, r2
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	8952      	ldrh	r2, [r2, #10]
 800a244:	4293      	cmp	r3, r2
 800a246:	d905      	bls.n	800a254 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	895b      	ldrh	r3, [r3, #10]
 800a24c:	461a      	mov	r2, r3
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	7858      	ldrb	r0, [r3, #1]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	f7fd ffe9 	bl	8008234 <disk_write>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <f_write+0x1ca>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2201      	movs	r2, #1
 800a26c:	755a      	strb	r2, [r3, #21]
 800a26e:	2301      	movs	r3, #1
 800a270:	e08b      	b.n	800a38a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1a      	ldr	r2, [r3, #32]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d915      	bls.n	800a2ac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6a1a      	ldr	r2, [r3, #32]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	025b      	lsls	r3, r3, #9
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a298:	4619      	mov	r1, r3
 800a29a:	f7fe f88b 	bl	80083b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	7d1b      	ldrb	r3, [r3, #20]
 800a2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	025b      	lsls	r3, r3, #9
 800a2b0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a2b2:	e03f      	b.n	800a334 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d016      	beq.n	800a2ec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	699a      	ldr	r2, [r3, #24]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d210      	bcs.n	800a2ec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	7858      	ldrb	r0, [r3, #1]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	f7fd ff8c 	bl	80081f4 <disk_read>
 800a2dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	755a      	strb	r2, [r3, #21]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e04e      	b.n	800a38a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d901      	bls.n	800a30c <f_write+0x264>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31a:	4413      	add	r3, r2
 800a31c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31e:	69f9      	ldr	r1, [r7, #28]
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe f847 	bl	80083b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	7d1b      	ldrb	r3, [r3, #20]
 800a32a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	4413      	add	r3, r2
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	699a      	ldr	r2, [r3, #24]
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	441a      	add	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	619a      	str	r2, [r3, #24]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	429a      	cmp	r2, r3
 800a352:	bf38      	it	cc
 800a354:	461a      	movcc	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	441a      	add	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f47f aed4 	bne.w	800a11e <f_write+0x76>
 800a376:	e000      	b.n	800a37a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a378:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	7d1b      	ldrb	r3, [r3, #20]
 800a37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a382:	b2da      	uxtb	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3730      	adds	r7, #48	@ 0x30
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f107 0208 	add.w	r2, r7, #8
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fc4a 	bl	8009c3c <validate>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d168      	bne.n	800a484 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7d1b      	ldrb	r3, [r3, #20]
 800a3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d062      	beq.n	800a484 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7d1b      	ldrb	r3, [r3, #20]
 800a3c2:	b25b      	sxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	da15      	bge.n	800a3f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	7858      	ldrb	r0, [r3, #1]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1a      	ldr	r2, [r3, #32]
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f7fd ff2c 	bl	8008234 <disk_write>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <f_sync+0x54>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e04f      	b.n	800a486 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	7d1b      	ldrb	r3, [r3, #20]
 800a3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a3f4:	f7fd f986 	bl	8007704 <get_fattime>
 800a3f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe fa04 	bl	8008810 <move_window>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d138      	bne.n	800a484 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a416:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	330b      	adds	r3, #11
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	330b      	adds	r3, #11
 800a422:	f042 0220 	orr.w	r2, r2, #32
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	461a      	mov	r2, r3
 800a434:	68f9      	ldr	r1, [r7, #12]
 800a436:	f7fe ff0e 	bl	8009256 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f103 021c 	add.w	r2, r3, #28
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f7fd ff88 	bl	800835c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3316      	adds	r3, #22
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	4618      	mov	r0, r3
 800a454:	f7fd ff82 	bl	800835c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3312      	adds	r3, #18
 800a45c:	2100      	movs	r1, #0
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fd ff61 	bl	8008326 <st_word>
					fs->wflag = 1;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2201      	movs	r2, #1
 800a468:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe f9fd 	bl	800886c <sync_fs>
 800a472:	4603      	mov	r3, r0
 800a474:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a484:	7dfb      	ldrb	r3, [r7, #23]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff ff7b 	bl	800a392 <f_sync>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d118      	bne.n	800a4d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f107 0208 	add.w	r2, r7, #8
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff fbc4 	bl	8009c3c <validate>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10c      	bne.n	800a4d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe f900 	bl	80086c8 <dec_lock>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d102      	bne.n	800a4d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b090      	sub	sp, #64	@ 0x40
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a4ec:	f107 010c 	add.w	r1, r7, #12
 800a4f0:	1d3b      	adds	r3, r7, #4
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff f955 	bl	80097a4 <find_volume>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800a500:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11f      	bne.n	800a548 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	f107 030c 	add.w	r3, r7, #12
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff f83b 	bl	800958c <follow_path>
 800a516:	4603      	mov	r3, r0
 800a518:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a51c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a520:	2b00      	cmp	r3, #0
 800a522:	d111      	bne.n	800a548 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a524:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da03      	bge.n	800a536 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a52e:	2306      	movs	r3, #6
 800a530:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a534:	e008      	b.n	800a548 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <f_stat+0x66>
 800a53c:	f107 030c 	add.w	r3, r7, #12
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe ff2e 	bl	80093a4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a548:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3740      	adds	r7, #64	@ 0x40
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4613      	mov	r3, r2
 800a560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a562:	2301      	movs	r3, #1
 800a564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a56a:	4b1f      	ldr	r3, [pc, #124]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a56c:	7a5b      	ldrb	r3, [r3, #9]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d131      	bne.n	800a5d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a574:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a576:	7a5b      	ldrb	r3, [r3, #9]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a57e:	2100      	movs	r1, #0
 800a580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a582:	4b19      	ldr	r3, [pc, #100]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a584:	7a5b      	ldrb	r3, [r3, #9]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	4a17      	ldr	r2, [pc, #92]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a592:	4b15      	ldr	r3, [pc, #84]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a594:	7a5b      	ldrb	r3, [r3, #9]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	461a      	mov	r2, r3
 800a59a:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a59c:	4413      	add	r3, r2
 800a59e:	79fa      	ldrb	r2, [r7, #7]
 800a5a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5a2:	4b11      	ldr	r3, [pc, #68]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a5a4:	7a5b      	ldrb	r3, [r3, #9]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	b2d1      	uxtb	r1, r2
 800a5ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a5e8 <FATFS_LinkDriverEx+0x94>)
 800a5ae:	7251      	strb	r1, [r2, #9]
 800a5b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a5b2:	7dbb      	ldrb	r3, [r7, #22]
 800a5b4:	3330      	adds	r3, #48	@ 0x30
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	223a      	movs	r2, #58	@ 0x3a
 800a5c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	222f      	movs	r2, #47	@ 0x2f
 800a5ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	20006850 	.word	0x20006850

0800a5ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff ffaa 	bl	800a554 <FATFS_LinkDriverEx>
 800a600:	4603      	mov	r3, r0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <__cvt>:
 800a60a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a60e:	ec57 6b10 	vmov	r6, r7, d0
 800a612:	2f00      	cmp	r7, #0
 800a614:	460c      	mov	r4, r1
 800a616:	4619      	mov	r1, r3
 800a618:	463b      	mov	r3, r7
 800a61a:	bfbb      	ittet	lt
 800a61c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a620:	461f      	movlt	r7, r3
 800a622:	2300      	movge	r3, #0
 800a624:	232d      	movlt	r3, #45	@ 0x2d
 800a626:	700b      	strb	r3, [r1, #0]
 800a628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a62a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a62e:	4691      	mov	r9, r2
 800a630:	f023 0820 	bic.w	r8, r3, #32
 800a634:	bfbc      	itt	lt
 800a636:	4632      	movlt	r2, r6
 800a638:	4616      	movlt	r6, r2
 800a63a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a63e:	d005      	beq.n	800a64c <__cvt+0x42>
 800a640:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a644:	d100      	bne.n	800a648 <__cvt+0x3e>
 800a646:	3401      	adds	r4, #1
 800a648:	2102      	movs	r1, #2
 800a64a:	e000      	b.n	800a64e <__cvt+0x44>
 800a64c:	2103      	movs	r1, #3
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	ab02      	add	r3, sp, #8
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	ec47 6b10 	vmov	d0, r6, r7
 800a65a:	4653      	mov	r3, sl
 800a65c:	4622      	mov	r2, r4
 800a65e:	f001 fecf 	bl	800c400 <_dtoa_r>
 800a662:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a666:	4605      	mov	r5, r0
 800a668:	d119      	bne.n	800a69e <__cvt+0x94>
 800a66a:	f019 0f01 	tst.w	r9, #1
 800a66e:	d00e      	beq.n	800a68e <__cvt+0x84>
 800a670:	eb00 0904 	add.w	r9, r0, r4
 800a674:	2200      	movs	r2, #0
 800a676:	2300      	movs	r3, #0
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7f6 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 800a680:	b108      	cbz	r0, 800a686 <__cvt+0x7c>
 800a682:	f8cd 900c 	str.w	r9, [sp, #12]
 800a686:	2230      	movs	r2, #48	@ 0x30
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	454b      	cmp	r3, r9
 800a68c:	d31e      	bcc.n	800a6cc <__cvt+0xc2>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a692:	1b5b      	subs	r3, r3, r5
 800a694:	4628      	mov	r0, r5
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	b004      	add	sp, #16
 800a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6a2:	eb00 0904 	add.w	r9, r0, r4
 800a6a6:	d1e5      	bne.n	800a674 <__cvt+0x6a>
 800a6a8:	7803      	ldrb	r3, [r0, #0]
 800a6aa:	2b30      	cmp	r3, #48	@ 0x30
 800a6ac:	d10a      	bne.n	800a6c4 <__cvt+0xba>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f6 fa27 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ba:	b918      	cbnz	r0, 800a6c4 <__cvt+0xba>
 800a6bc:	f1c4 0401 	rsb	r4, r4, #1
 800a6c0:	f8ca 4000 	str.w	r4, [sl]
 800a6c4:	f8da 3000 	ldr.w	r3, [sl]
 800a6c8:	4499      	add	r9, r3
 800a6ca:	e7d3      	b.n	800a674 <__cvt+0x6a>
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	9103      	str	r1, [sp, #12]
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e7d9      	b.n	800a688 <__cvt+0x7e>

0800a6d4 <__exponent>:
 800a6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	bfba      	itte	lt
 800a6da:	4249      	neglt	r1, r1
 800a6dc:	232d      	movlt	r3, #45	@ 0x2d
 800a6de:	232b      	movge	r3, #43	@ 0x2b
 800a6e0:	2909      	cmp	r1, #9
 800a6e2:	7002      	strb	r2, [r0, #0]
 800a6e4:	7043      	strb	r3, [r0, #1]
 800a6e6:	dd29      	ble.n	800a73c <__exponent+0x68>
 800a6e8:	f10d 0307 	add.w	r3, sp, #7
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	270a      	movs	r7, #10
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6f6:	fb07 1416 	mls	r4, r7, r6, r1
 800a6fa:	3430      	adds	r4, #48	@ 0x30
 800a6fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a700:	460c      	mov	r4, r1
 800a702:	2c63      	cmp	r4, #99	@ 0x63
 800a704:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a708:	4631      	mov	r1, r6
 800a70a:	dcf1      	bgt.n	800a6f0 <__exponent+0x1c>
 800a70c:	3130      	adds	r1, #48	@ 0x30
 800a70e:	1e94      	subs	r4, r2, #2
 800a710:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a714:	1c41      	adds	r1, r0, #1
 800a716:	4623      	mov	r3, r4
 800a718:	42ab      	cmp	r3, r5
 800a71a:	d30a      	bcc.n	800a732 <__exponent+0x5e>
 800a71c:	f10d 0309 	add.w	r3, sp, #9
 800a720:	1a9b      	subs	r3, r3, r2
 800a722:	42ac      	cmp	r4, r5
 800a724:	bf88      	it	hi
 800a726:	2300      	movhi	r3, #0
 800a728:	3302      	adds	r3, #2
 800a72a:	4403      	add	r3, r0
 800a72c:	1a18      	subs	r0, r3, r0
 800a72e:	b003      	add	sp, #12
 800a730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a732:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a736:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a73a:	e7ed      	b.n	800a718 <__exponent+0x44>
 800a73c:	2330      	movs	r3, #48	@ 0x30
 800a73e:	3130      	adds	r1, #48	@ 0x30
 800a740:	7083      	strb	r3, [r0, #2]
 800a742:	70c1      	strb	r1, [r0, #3]
 800a744:	1d03      	adds	r3, r0, #4
 800a746:	e7f1      	b.n	800a72c <__exponent+0x58>

0800a748 <_printf_float>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b08d      	sub	sp, #52	@ 0x34
 800a74e:	460c      	mov	r4, r1
 800a750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a754:	4616      	mov	r6, r2
 800a756:	461f      	mov	r7, r3
 800a758:	4605      	mov	r5, r0
 800a75a:	f001 fd77 	bl	800c24c <_localeconv_r>
 800a75e:	6803      	ldr	r3, [r0, #0]
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	4618      	mov	r0, r3
 800a764:	f7f5 fda4 	bl	80002b0 <strlen>
 800a768:	2300      	movs	r3, #0
 800a76a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	9005      	str	r0, [sp, #20]
 800a772:	3307      	adds	r3, #7
 800a774:	f023 0307 	bic.w	r3, r3, #7
 800a778:	f103 0208 	add.w	r2, r3, #8
 800a77c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a780:	f8d4 b000 	ldr.w	fp, [r4]
 800a784:	f8c8 2000 	str.w	r2, [r8]
 800a788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a78c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	f8cd 8018 	str.w	r8, [sp, #24]
 800a796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a79a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a79e:	4b9c      	ldr	r3, [pc, #624]	@ (800aa10 <_printf_float+0x2c8>)
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7a4:	f7f6 f9e2 	bl	8000b6c <__aeabi_dcmpun>
 800a7a8:	bb70      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ae:	4b98      	ldr	r3, [pc, #608]	@ (800aa10 <_printf_float+0x2c8>)
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7b4:	f7f6 f9bc 	bl	8000b30 <__aeabi_dcmple>
 800a7b8:	bb30      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f6 f9ab 	bl	8000b1c <__aeabi_dcmplt>
 800a7c6:	b110      	cbz	r0, 800a7ce <_printf_float+0x86>
 800a7c8:	232d      	movs	r3, #45	@ 0x2d
 800a7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ce:	4a91      	ldr	r2, [pc, #580]	@ (800aa14 <_printf_float+0x2cc>)
 800a7d0:	4b91      	ldr	r3, [pc, #580]	@ (800aa18 <_printf_float+0x2d0>)
 800a7d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7d6:	bf94      	ite	ls
 800a7d8:	4690      	movls	r8, r2
 800a7da:	4698      	movhi	r8, r3
 800a7dc:	2303      	movs	r3, #3
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	f02b 0304 	bic.w	r3, fp, #4
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	9700      	str	r7, [sp, #0]
 800a7ec:	4633      	mov	r3, r6
 800a7ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f9d2 	bl	800ab9c <_printf_common>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f040 808d 	bne.w	800a918 <_printf_float+0x1d0>
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a802:	b00d      	add	sp, #52	@ 0x34
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f9ac 	bl	8000b6c <__aeabi_dcmpun>
 800a814:	b140      	cbz	r0, 800a828 <_printf_float+0xe0>
 800a816:	464b      	mov	r3, r9
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbc      	itt	lt
 800a81c:	232d      	movlt	r3, #45	@ 0x2d
 800a81e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a822:	4a7e      	ldr	r2, [pc, #504]	@ (800aa1c <_printf_float+0x2d4>)
 800a824:	4b7e      	ldr	r3, [pc, #504]	@ (800aa20 <_printf_float+0x2d8>)
 800a826:	e7d4      	b.n	800a7d2 <_printf_float+0x8a>
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a82e:	9206      	str	r2, [sp, #24]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	d13b      	bne.n	800a8ac <_printf_float+0x164>
 800a834:	2306      	movs	r3, #6
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a83c:	2300      	movs	r3, #0
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	ab0a      	add	r3, sp, #40	@ 0x28
 800a844:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a848:	ab09      	add	r3, sp, #36	@ 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	ec49 8b10 	vmov	d0, r8, r9
 800a852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff fed7 	bl	800a60a <__cvt>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a860:	2b47      	cmp	r3, #71	@ 0x47
 800a862:	4680      	mov	r8, r0
 800a864:	d129      	bne.n	800a8ba <_printf_float+0x172>
 800a866:	1cc8      	adds	r0, r1, #3
 800a868:	db02      	blt.n	800a870 <_printf_float+0x128>
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	4299      	cmp	r1, r3
 800a86e:	dd41      	ble.n	800a8f4 <_printf_float+0x1ac>
 800a870:	f1aa 0a02 	sub.w	sl, sl, #2
 800a874:	fa5f fa8a 	uxtb.w	sl, sl
 800a878:	3901      	subs	r1, #1
 800a87a:	4652      	mov	r2, sl
 800a87c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a880:	9109      	str	r1, [sp, #36]	@ 0x24
 800a882:	f7ff ff27 	bl	800a6d4 <__exponent>
 800a886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a888:	1813      	adds	r3, r2, r0
 800a88a:	2a01      	cmp	r2, #1
 800a88c:	4681      	mov	r9, r0
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	dc02      	bgt.n	800a898 <_printf_float+0x150>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	07d2      	lsls	r2, r2, #31
 800a896:	d501      	bpl.n	800a89c <_printf_float+0x154>
 800a898:	3301      	adds	r3, #1
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0a2      	beq.n	800a7ea <_printf_float+0xa2>
 800a8a4:	232d      	movs	r3, #45	@ 0x2d
 800a8a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8aa:	e79e      	b.n	800a7ea <_printf_float+0xa2>
 800a8ac:	9a06      	ldr	r2, [sp, #24]
 800a8ae:	2a47      	cmp	r2, #71	@ 0x47
 800a8b0:	d1c2      	bne.n	800a838 <_printf_float+0xf0>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1c0      	bne.n	800a838 <_printf_float+0xf0>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7bd      	b.n	800a836 <_printf_float+0xee>
 800a8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8be:	d9db      	bls.n	800a878 <_printf_float+0x130>
 800a8c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a8c4:	d118      	bne.n	800a8f8 <_printf_float+0x1b0>
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	6863      	ldr	r3, [r4, #4]
 800a8ca:	dd0b      	ble.n	800a8e4 <_printf_float+0x19c>
 800a8cc:	6121      	str	r1, [r4, #16]
 800a8ce:	b913      	cbnz	r3, 800a8d6 <_printf_float+0x18e>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	07d0      	lsls	r0, r2, #31
 800a8d4:	d502      	bpl.n	800a8dc <_printf_float+0x194>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	440b      	add	r3, r1
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8de:	f04f 0900 	mov.w	r9, #0
 800a8e2:	e7db      	b.n	800a89c <_printf_float+0x154>
 800a8e4:	b913      	cbnz	r3, 800a8ec <_printf_float+0x1a4>
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	07d2      	lsls	r2, r2, #31
 800a8ea:	d501      	bpl.n	800a8f0 <_printf_float+0x1a8>
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	e7f4      	b.n	800a8da <_printf_float+0x192>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7f2      	b.n	800a8da <_printf_float+0x192>
 800a8f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	db05      	blt.n	800a90a <_printf_float+0x1c2>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	6121      	str	r1, [r4, #16]
 800a902:	07d8      	lsls	r0, r3, #31
 800a904:	d5ea      	bpl.n	800a8dc <_printf_float+0x194>
 800a906:	1c4b      	adds	r3, r1, #1
 800a908:	e7e7      	b.n	800a8da <_printf_float+0x192>
 800a90a:	2900      	cmp	r1, #0
 800a90c:	bfd4      	ite	le
 800a90e:	f1c1 0202 	rsble	r2, r1, #2
 800a912:	2201      	movgt	r2, #1
 800a914:	4413      	add	r3, r2
 800a916:	e7e0      	b.n	800a8da <_printf_float+0x192>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	055a      	lsls	r2, r3, #21
 800a91c:	d407      	bmi.n	800a92e <_printf_float+0x1e6>
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	4642      	mov	r2, r8
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	d12b      	bne.n	800a984 <_printf_float+0x23c>
 800a92c:	e767      	b.n	800a7fe <_printf_float+0xb6>
 800a92e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a932:	f240 80dd 	bls.w	800aaf0 <_printf_float+0x3a8>
 800a936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a93a:	2200      	movs	r2, #0
 800a93c:	2300      	movs	r3, #0
 800a93e:	f7f6 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 800a942:	2800      	cmp	r0, #0
 800a944:	d033      	beq.n	800a9ae <_printf_float+0x266>
 800a946:	4a37      	ldr	r2, [pc, #220]	@ (800aa24 <_printf_float+0x2dc>)
 800a948:	2301      	movs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f af54 	beq.w	800a7fe <_printf_float+0xb6>
 800a956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a95a:	4543      	cmp	r3, r8
 800a95c:	db02      	blt.n	800a964 <_printf_float+0x21c>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07d8      	lsls	r0, r3, #31
 800a962:	d50f      	bpl.n	800a984 <_printf_float+0x23c>
 800a964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	f43f af45 	beq.w	800a7fe <_printf_float+0xb6>
 800a974:	f04f 0900 	mov.w	r9, #0
 800a978:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a97c:	f104 0a1a 	add.w	sl, r4, #26
 800a980:	45c8      	cmp	r8, r9
 800a982:	dc09      	bgt.n	800a998 <_printf_float+0x250>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	079b      	lsls	r3, r3, #30
 800a988:	f100 8103 	bmi.w	800ab92 <_printf_float+0x44a>
 800a98c:	68e0      	ldr	r0, [r4, #12]
 800a98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a990:	4298      	cmp	r0, r3
 800a992:	bfb8      	it	lt
 800a994:	4618      	movlt	r0, r3
 800a996:	e734      	b.n	800a802 <_printf_float+0xba>
 800a998:	2301      	movs	r3, #1
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f af2b 	beq.w	800a7fe <_printf_float+0xb6>
 800a9a8:	f109 0901 	add.w	r9, r9, #1
 800a9ac:	e7e8      	b.n	800a980 <_printf_float+0x238>
 800a9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dc39      	bgt.n	800aa28 <_printf_float+0x2e0>
 800a9b4:	4a1b      	ldr	r2, [pc, #108]	@ (800aa24 <_printf_float+0x2dc>)
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f43f af1d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a9cc:	d102      	bne.n	800a9d4 <_printf_float+0x28c>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	07d9      	lsls	r1, r3, #31
 800a9d2:	d5d7      	bpl.n	800a984 <_printf_float+0x23c>
 800a9d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af0d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9e4:	f04f 0a00 	mov.w	sl, #0
 800a9e8:	f104 0b1a 	add.w	fp, r4, #26
 800a9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ee:	425b      	negs	r3, r3
 800a9f0:	4553      	cmp	r3, sl
 800a9f2:	dc01      	bgt.n	800a9f8 <_printf_float+0x2b0>
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	e793      	b.n	800a920 <_printf_float+0x1d8>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	465a      	mov	r2, fp
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f aefb 	beq.w	800a7fe <_printf_float+0xb6>
 800aa08:	f10a 0a01 	add.w	sl, sl, #1
 800aa0c:	e7ee      	b.n	800a9ec <_printf_float+0x2a4>
 800aa0e:	bf00      	nop
 800aa10:	7fefffff 	.word	0x7fefffff
 800aa14:	0800f270 	.word	0x0800f270
 800aa18:	0800f274 	.word	0x0800f274
 800aa1c:	0800f278 	.word	0x0800f278
 800aa20:	0800f27c 	.word	0x0800f27c
 800aa24:	0800f280 	.word	0x0800f280
 800aa28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa2e:	4553      	cmp	r3, sl
 800aa30:	bfa8      	it	ge
 800aa32:	4653      	movge	r3, sl
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	4699      	mov	r9, r3
 800aa38:	dc36      	bgt.n	800aaa8 <_printf_float+0x360>
 800aa3a:	f04f 0b00 	mov.w	fp, #0
 800aa3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa42:	f104 021a 	add.w	r2, r4, #26
 800aa46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa48:	9306      	str	r3, [sp, #24]
 800aa4a:	eba3 0309 	sub.w	r3, r3, r9
 800aa4e:	455b      	cmp	r3, fp
 800aa50:	dc31      	bgt.n	800aab6 <_printf_float+0x36e>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	459a      	cmp	sl, r3
 800aa56:	dc3a      	bgt.n	800aace <_printf_float+0x386>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	07da      	lsls	r2, r3, #31
 800aa5c:	d437      	bmi.n	800aace <_printf_float+0x386>
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	ebaa 0903 	sub.w	r9, sl, r3
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6a:	4599      	cmp	r9, r3
 800aa6c:	bfa8      	it	ge
 800aa6e:	4699      	movge	r9, r3
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	dc33      	bgt.n	800aade <_printf_float+0x396>
 800aa76:	f04f 0800 	mov.w	r8, #0
 800aa7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa7e:	f104 0b1a 	add.w	fp, r4, #26
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	ebaa 0303 	sub.w	r3, sl, r3
 800aa88:	eba3 0309 	sub.w	r3, r3, r9
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	f77f af79 	ble.w	800a984 <_printf_float+0x23c>
 800aa92:	2301      	movs	r3, #1
 800aa94:	465a      	mov	r2, fp
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b8      	blx	r7
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f43f aeae 	beq.w	800a7fe <_printf_float+0xb6>
 800aaa2:	f108 0801 	add.w	r8, r8, #1
 800aaa6:	e7ec      	b.n	800aa82 <_printf_float+0x33a>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d1c2      	bne.n	800aa3a <_printf_float+0x2f2>
 800aab4:	e6a3      	b.n	800a7fe <_printf_float+0xb6>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	9206      	str	r2, [sp, #24]
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae9c 	beq.w	800a7fe <_printf_float+0xb6>
 800aac6:	9a06      	ldr	r2, [sp, #24]
 800aac8:	f10b 0b01 	add.w	fp, fp, #1
 800aacc:	e7bb      	b.n	800aa46 <_printf_float+0x2fe>
 800aace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad2:	4631      	mov	r1, r6
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b8      	blx	r7
 800aad8:	3001      	adds	r0, #1
 800aada:	d1c0      	bne.n	800aa5e <_printf_float+0x316>
 800aadc:	e68f      	b.n	800a7fe <_printf_float+0xb6>
 800aade:	9a06      	ldr	r2, [sp, #24]
 800aae0:	464b      	mov	r3, r9
 800aae2:	4442      	add	r2, r8
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	d1c3      	bne.n	800aa76 <_printf_float+0x32e>
 800aaee:	e686      	b.n	800a7fe <_printf_float+0xb6>
 800aaf0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaf4:	f1ba 0f01 	cmp.w	sl, #1
 800aaf8:	dc01      	bgt.n	800aafe <_printf_float+0x3b6>
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d536      	bpl.n	800ab6c <_printf_float+0x424>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4642      	mov	r2, r8
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	f43f ae78 	beq.w	800a7fe <_printf_float+0xb6>
 800ab0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae70 	beq.w	800a7fe <_printf_float+0xb6>
 800ab1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab22:	2200      	movs	r2, #0
 800ab24:	2300      	movs	r3, #0
 800ab26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ab2a:	f7f5 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 800ab2e:	b9c0      	cbnz	r0, 800ab62 <_printf_float+0x41a>
 800ab30:	4653      	mov	r3, sl
 800ab32:	f108 0201 	add.w	r2, r8, #1
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d10c      	bne.n	800ab5a <_printf_float+0x412>
 800ab40:	e65d      	b.n	800a7fe <_printf_float+0xb6>
 800ab42:	2301      	movs	r3, #1
 800ab44:	465a      	mov	r2, fp
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f43f ae56 	beq.w	800a7fe <_printf_float+0xb6>
 800ab52:	f108 0801 	add.w	r8, r8, #1
 800ab56:	45d0      	cmp	r8, sl
 800ab58:	dbf3      	blt.n	800ab42 <_printf_float+0x3fa>
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab60:	e6df      	b.n	800a922 <_printf_float+0x1da>
 800ab62:	f04f 0800 	mov.w	r8, #0
 800ab66:	f104 0b1a 	add.w	fp, r4, #26
 800ab6a:	e7f4      	b.n	800ab56 <_printf_float+0x40e>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4642      	mov	r2, r8
 800ab70:	e7e1      	b.n	800ab36 <_printf_float+0x3ee>
 800ab72:	2301      	movs	r3, #1
 800ab74:	464a      	mov	r2, r9
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f ae3e 	beq.w	800a7fe <_printf_float+0xb6>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	68e3      	ldr	r3, [r4, #12]
 800ab88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab8a:	1a5b      	subs	r3, r3, r1
 800ab8c:	4543      	cmp	r3, r8
 800ab8e:	dcf0      	bgt.n	800ab72 <_printf_float+0x42a>
 800ab90:	e6fc      	b.n	800a98c <_printf_float+0x244>
 800ab92:	f04f 0800 	mov.w	r8, #0
 800ab96:	f104 0919 	add.w	r9, r4, #25
 800ab9a:	e7f4      	b.n	800ab86 <_printf_float+0x43e>

0800ab9c <_printf_common>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	4616      	mov	r6, r2
 800aba2:	4698      	mov	r8, r3
 800aba4:	688a      	ldr	r2, [r1, #8]
 800aba6:	690b      	ldr	r3, [r1, #16]
 800aba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abac:	4293      	cmp	r3, r2
 800abae:	bfb8      	it	lt
 800abb0:	4613      	movlt	r3, r2
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abb8:	4607      	mov	r7, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	b10a      	cbz	r2, 800abc2 <_printf_common+0x26>
 800abbe:	3301      	adds	r3, #1
 800abc0:	6033      	str	r3, [r6, #0]
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	0699      	lsls	r1, r3, #26
 800abc6:	bf42      	ittt	mi
 800abc8:	6833      	ldrmi	r3, [r6, #0]
 800abca:	3302      	addmi	r3, #2
 800abcc:	6033      	strmi	r3, [r6, #0]
 800abce:	6825      	ldr	r5, [r4, #0]
 800abd0:	f015 0506 	ands.w	r5, r5, #6
 800abd4:	d106      	bne.n	800abe4 <_printf_common+0x48>
 800abd6:	f104 0a19 	add.w	sl, r4, #25
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	6832      	ldr	r2, [r6, #0]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	dc26      	bgt.n	800ac32 <_printf_common+0x96>
 800abe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	3b00      	subs	r3, #0
 800abec:	bf18      	it	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	0692      	lsls	r2, r2, #26
 800abf2:	d42b      	bmi.n	800ac4c <_printf_common+0xb0>
 800abf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abf8:	4641      	mov	r1, r8
 800abfa:	4638      	mov	r0, r7
 800abfc:	47c8      	blx	r9
 800abfe:	3001      	adds	r0, #1
 800ac00:	d01e      	beq.n	800ac40 <_printf_common+0xa4>
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	6922      	ldr	r2, [r4, #16]
 800ac06:	f003 0306 	and.w	r3, r3, #6
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	bf02      	ittt	eq
 800ac0e:	68e5      	ldreq	r5, [r4, #12]
 800ac10:	6833      	ldreq	r3, [r6, #0]
 800ac12:	1aed      	subeq	r5, r5, r3
 800ac14:	68a3      	ldr	r3, [r4, #8]
 800ac16:	bf0c      	ite	eq
 800ac18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac1c:	2500      	movne	r5, #0
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	bfc4      	itt	gt
 800ac22:	1a9b      	subgt	r3, r3, r2
 800ac24:	18ed      	addgt	r5, r5, r3
 800ac26:	2600      	movs	r6, #0
 800ac28:	341a      	adds	r4, #26
 800ac2a:	42b5      	cmp	r5, r6
 800ac2c:	d11a      	bne.n	800ac64 <_printf_common+0xc8>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e008      	b.n	800ac44 <_printf_common+0xa8>
 800ac32:	2301      	movs	r3, #1
 800ac34:	4652      	mov	r2, sl
 800ac36:	4641      	mov	r1, r8
 800ac38:	4638      	mov	r0, r7
 800ac3a:	47c8      	blx	r9
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d103      	bne.n	800ac48 <_printf_common+0xac>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac48:	3501      	adds	r5, #1
 800ac4a:	e7c6      	b.n	800abda <_printf_common+0x3e>
 800ac4c:	18e1      	adds	r1, r4, r3
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	2030      	movs	r0, #48	@ 0x30
 800ac52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac56:	4422      	add	r2, r4
 800ac58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac60:	3302      	adds	r3, #2
 800ac62:	e7c7      	b.n	800abf4 <_printf_common+0x58>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4622      	mov	r2, r4
 800ac68:	4641      	mov	r1, r8
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	47c8      	blx	r9
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d0e6      	beq.n	800ac40 <_printf_common+0xa4>
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7d9      	b.n	800ac2a <_printf_common+0x8e>
	...

0800ac78 <_printf_i>:
 800ac78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	7e0f      	ldrb	r7, [r1, #24]
 800ac7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac80:	2f78      	cmp	r7, #120	@ 0x78
 800ac82:	4691      	mov	r9, r2
 800ac84:	4680      	mov	r8, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac8e:	d807      	bhi.n	800aca0 <_printf_i+0x28>
 800ac90:	2f62      	cmp	r7, #98	@ 0x62
 800ac92:	d80a      	bhi.n	800acaa <_printf_i+0x32>
 800ac94:	2f00      	cmp	r7, #0
 800ac96:	f000 80d2 	beq.w	800ae3e <_printf_i+0x1c6>
 800ac9a:	2f58      	cmp	r7, #88	@ 0x58
 800ac9c:	f000 80b9 	beq.w	800ae12 <_printf_i+0x19a>
 800aca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aca8:	e03a      	b.n	800ad20 <_printf_i+0xa8>
 800acaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acae:	2b15      	cmp	r3, #21
 800acb0:	d8f6      	bhi.n	800aca0 <_printf_i+0x28>
 800acb2:	a101      	add	r1, pc, #4	@ (adr r1, 800acb8 <_printf_i+0x40>)
 800acb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb8:	0800ad11 	.word	0x0800ad11
 800acbc:	0800ad25 	.word	0x0800ad25
 800acc0:	0800aca1 	.word	0x0800aca1
 800acc4:	0800aca1 	.word	0x0800aca1
 800acc8:	0800aca1 	.word	0x0800aca1
 800accc:	0800aca1 	.word	0x0800aca1
 800acd0:	0800ad25 	.word	0x0800ad25
 800acd4:	0800aca1 	.word	0x0800aca1
 800acd8:	0800aca1 	.word	0x0800aca1
 800acdc:	0800aca1 	.word	0x0800aca1
 800ace0:	0800aca1 	.word	0x0800aca1
 800ace4:	0800ae25 	.word	0x0800ae25
 800ace8:	0800ad4f 	.word	0x0800ad4f
 800acec:	0800addf 	.word	0x0800addf
 800acf0:	0800aca1 	.word	0x0800aca1
 800acf4:	0800aca1 	.word	0x0800aca1
 800acf8:	0800ae47 	.word	0x0800ae47
 800acfc:	0800aca1 	.word	0x0800aca1
 800ad00:	0800ad4f 	.word	0x0800ad4f
 800ad04:	0800aca1 	.word	0x0800aca1
 800ad08:	0800aca1 	.word	0x0800aca1
 800ad0c:	0800ade7 	.word	0x0800ade7
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6032      	str	r2, [r6, #0]
 800ad18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad20:	2301      	movs	r3, #1
 800ad22:	e09d      	b.n	800ae60 <_printf_i+0x1e8>
 800ad24:	6833      	ldr	r3, [r6, #0]
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	1d19      	adds	r1, r3, #4
 800ad2a:	6031      	str	r1, [r6, #0]
 800ad2c:	0606      	lsls	r6, r0, #24
 800ad2e:	d501      	bpl.n	800ad34 <_printf_i+0xbc>
 800ad30:	681d      	ldr	r5, [r3, #0]
 800ad32:	e003      	b.n	800ad3c <_printf_i+0xc4>
 800ad34:	0645      	lsls	r5, r0, #25
 800ad36:	d5fb      	bpl.n	800ad30 <_printf_i+0xb8>
 800ad38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	da03      	bge.n	800ad48 <_printf_i+0xd0>
 800ad40:	232d      	movs	r3, #45	@ 0x2d
 800ad42:	426d      	negs	r5, r5
 800ad44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad48:	4859      	ldr	r0, [pc, #356]	@ (800aeb0 <_printf_i+0x238>)
 800ad4a:	230a      	movs	r3, #10
 800ad4c:	e011      	b.n	800ad72 <_printf_i+0xfa>
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	0608      	lsls	r0, r1, #24
 800ad54:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad58:	d402      	bmi.n	800ad60 <_printf_i+0xe8>
 800ad5a:	0649      	lsls	r1, r1, #25
 800ad5c:	bf48      	it	mi
 800ad5e:	b2ad      	uxthmi	r5, r5
 800ad60:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad62:	4853      	ldr	r0, [pc, #332]	@ (800aeb0 <_printf_i+0x238>)
 800ad64:	6033      	str	r3, [r6, #0]
 800ad66:	bf14      	ite	ne
 800ad68:	230a      	movne	r3, #10
 800ad6a:	2308      	moveq	r3, #8
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad72:	6866      	ldr	r6, [r4, #4]
 800ad74:	60a6      	str	r6, [r4, #8]
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	bfa2      	ittt	ge
 800ad7a:	6821      	ldrge	r1, [r4, #0]
 800ad7c:	f021 0104 	bicge.w	r1, r1, #4
 800ad80:	6021      	strge	r1, [r4, #0]
 800ad82:	b90d      	cbnz	r5, 800ad88 <_printf_i+0x110>
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	d04b      	beq.n	800ae20 <_printf_i+0x1a8>
 800ad88:	4616      	mov	r6, r2
 800ad8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad8e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad92:	5dc7      	ldrb	r7, [r0, r7]
 800ad94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad98:	462f      	mov	r7, r5
 800ad9a:	42bb      	cmp	r3, r7
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	d9f4      	bls.n	800ad8a <_printf_i+0x112>
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d10b      	bne.n	800adbc <_printf_i+0x144>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	07df      	lsls	r7, r3, #31
 800ada8:	d508      	bpl.n	800adbc <_printf_i+0x144>
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	6861      	ldr	r1, [r4, #4]
 800adae:	4299      	cmp	r1, r3
 800adb0:	bfde      	ittt	le
 800adb2:	2330      	movle	r3, #48	@ 0x30
 800adb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800adbc:	1b92      	subs	r2, r2, r6
 800adbe:	6122      	str	r2, [r4, #16]
 800adc0:	f8cd a000 	str.w	sl, [sp]
 800adc4:	464b      	mov	r3, r9
 800adc6:	aa03      	add	r2, sp, #12
 800adc8:	4621      	mov	r1, r4
 800adca:	4640      	mov	r0, r8
 800adcc:	f7ff fee6 	bl	800ab9c <_printf_common>
 800add0:	3001      	adds	r0, #1
 800add2:	d14a      	bne.n	800ae6a <_printf_i+0x1f2>
 800add4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800add8:	b004      	add	sp, #16
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	f043 0320 	orr.w	r3, r3, #32
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	4833      	ldr	r0, [pc, #204]	@ (800aeb4 <_printf_i+0x23c>)
 800ade8:	2778      	movs	r7, #120	@ 0x78
 800adea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6831      	ldr	r1, [r6, #0]
 800adf2:	061f      	lsls	r7, r3, #24
 800adf4:	f851 5b04 	ldr.w	r5, [r1], #4
 800adf8:	d402      	bmi.n	800ae00 <_printf_i+0x188>
 800adfa:	065f      	lsls	r7, r3, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2ad      	uxthmi	r5, r5
 800ae00:	6031      	str	r1, [r6, #0]
 800ae02:	07d9      	lsls	r1, r3, #31
 800ae04:	bf44      	itt	mi
 800ae06:	f043 0320 	orrmi.w	r3, r3, #32
 800ae0a:	6023      	strmi	r3, [r4, #0]
 800ae0c:	b11d      	cbz	r5, 800ae16 <_printf_i+0x19e>
 800ae0e:	2310      	movs	r3, #16
 800ae10:	e7ac      	b.n	800ad6c <_printf_i+0xf4>
 800ae12:	4827      	ldr	r0, [pc, #156]	@ (800aeb0 <_printf_i+0x238>)
 800ae14:	e7e9      	b.n	800adea <_printf_i+0x172>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f023 0320 	bic.w	r3, r3, #32
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	e7f6      	b.n	800ae0e <_printf_i+0x196>
 800ae20:	4616      	mov	r6, r2
 800ae22:	e7bd      	b.n	800ada0 <_printf_i+0x128>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	6825      	ldr	r5, [r4, #0]
 800ae28:	6961      	ldr	r1, [r4, #20]
 800ae2a:	1d18      	adds	r0, r3, #4
 800ae2c:	6030      	str	r0, [r6, #0]
 800ae2e:	062e      	lsls	r6, r5, #24
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	d501      	bpl.n	800ae38 <_printf_i+0x1c0>
 800ae34:	6019      	str	r1, [r3, #0]
 800ae36:	e002      	b.n	800ae3e <_printf_i+0x1c6>
 800ae38:	0668      	lsls	r0, r5, #25
 800ae3a:	d5fb      	bpl.n	800ae34 <_printf_i+0x1bc>
 800ae3c:	8019      	strh	r1, [r3, #0]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	4616      	mov	r6, r2
 800ae44:	e7bc      	b.n	800adc0 <_printf_i+0x148>
 800ae46:	6833      	ldr	r3, [r6, #0]
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	6032      	str	r2, [r6, #0]
 800ae4c:	681e      	ldr	r6, [r3, #0]
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	2100      	movs	r1, #0
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7f5 f9dc 	bl	8000210 <memchr>
 800ae58:	b108      	cbz	r0, 800ae5e <_printf_i+0x1e6>
 800ae5a:	1b80      	subs	r0, r0, r6
 800ae5c:	6060      	str	r0, [r4, #4]
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	2300      	movs	r3, #0
 800ae64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae68:	e7aa      	b.n	800adc0 <_printf_i+0x148>
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4649      	mov	r1, r9
 800ae70:	4640      	mov	r0, r8
 800ae72:	47d0      	blx	sl
 800ae74:	3001      	adds	r0, #1
 800ae76:	d0ad      	beq.n	800add4 <_printf_i+0x15c>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	079b      	lsls	r3, r3, #30
 800ae7c:	d413      	bmi.n	800aea6 <_printf_i+0x22e>
 800ae7e:	68e0      	ldr	r0, [r4, #12]
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	4298      	cmp	r0, r3
 800ae84:	bfb8      	it	lt
 800ae86:	4618      	movlt	r0, r3
 800ae88:	e7a6      	b.n	800add8 <_printf_i+0x160>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	4649      	mov	r1, r9
 800ae90:	4640      	mov	r0, r8
 800ae92:	47d0      	blx	sl
 800ae94:	3001      	adds	r0, #1
 800ae96:	d09d      	beq.n	800add4 <_printf_i+0x15c>
 800ae98:	3501      	adds	r5, #1
 800ae9a:	68e3      	ldr	r3, [r4, #12]
 800ae9c:	9903      	ldr	r1, [sp, #12]
 800ae9e:	1a5b      	subs	r3, r3, r1
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	dcf2      	bgt.n	800ae8a <_printf_i+0x212>
 800aea4:	e7eb      	b.n	800ae7e <_printf_i+0x206>
 800aea6:	2500      	movs	r5, #0
 800aea8:	f104 0619 	add.w	r6, r4, #25
 800aeac:	e7f5      	b.n	800ae9a <_printf_i+0x222>
 800aeae:	bf00      	nop
 800aeb0:	0800f282 	.word	0x0800f282
 800aeb4:	0800f293 	.word	0x0800f293

0800aeb8 <_scanf_float>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	b087      	sub	sp, #28
 800aebe:	4617      	mov	r7, r2
 800aec0:	9303      	str	r3, [sp, #12]
 800aec2:	688b      	ldr	r3, [r1, #8]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aeca:	bf81      	itttt	hi
 800aecc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aed0:	eb03 0b05 	addhi.w	fp, r3, r5
 800aed4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aed8:	608b      	strhi	r3, [r1, #8]
 800aeda:	680b      	ldr	r3, [r1, #0]
 800aedc:	460a      	mov	r2, r1
 800aede:	f04f 0500 	mov.w	r5, #0
 800aee2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aee6:	f842 3b1c 	str.w	r3, [r2], #28
 800aeea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aeee:	4680      	mov	r8, r0
 800aef0:	460c      	mov	r4, r1
 800aef2:	bf98      	it	ls
 800aef4:	f04f 0b00 	movls.w	fp, #0
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	4616      	mov	r6, r2
 800aefc:	46aa      	mov	sl, r5
 800aefe:	46a9      	mov	r9, r5
 800af00:	9502      	str	r5, [sp, #8]
 800af02:	68a2      	ldr	r2, [r4, #8]
 800af04:	b152      	cbz	r2, 800af1c <_scanf_float+0x64>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b4e      	cmp	r3, #78	@ 0x4e
 800af0c:	d864      	bhi.n	800afd8 <_scanf_float+0x120>
 800af0e:	2b40      	cmp	r3, #64	@ 0x40
 800af10:	d83c      	bhi.n	800af8c <_scanf_float+0xd4>
 800af12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af16:	b2c8      	uxtb	r0, r1
 800af18:	280e      	cmp	r0, #14
 800af1a:	d93a      	bls.n	800af92 <_scanf_float+0xda>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	d003      	beq.n	800af2a <_scanf_float+0x72>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800af2e:	f1ba 0f01 	cmp.w	sl, #1
 800af32:	f200 8117 	bhi.w	800b164 <_scanf_float+0x2ac>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	429e      	cmp	r6, r3
 800af3a:	f200 8108 	bhi.w	800b14e <_scanf_float+0x296>
 800af3e:	2001      	movs	r0, #1
 800af40:	b007      	add	sp, #28
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800af4a:	2a0d      	cmp	r2, #13
 800af4c:	d8e6      	bhi.n	800af1c <_scanf_float+0x64>
 800af4e:	a101      	add	r1, pc, #4	@ (adr r1, 800af54 <_scanf_float+0x9c>)
 800af50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af54:	0800b09b 	.word	0x0800b09b
 800af58:	0800af1d 	.word	0x0800af1d
 800af5c:	0800af1d 	.word	0x0800af1d
 800af60:	0800af1d 	.word	0x0800af1d
 800af64:	0800b0fb 	.word	0x0800b0fb
 800af68:	0800b0d3 	.word	0x0800b0d3
 800af6c:	0800af1d 	.word	0x0800af1d
 800af70:	0800af1d 	.word	0x0800af1d
 800af74:	0800b0a9 	.word	0x0800b0a9
 800af78:	0800af1d 	.word	0x0800af1d
 800af7c:	0800af1d 	.word	0x0800af1d
 800af80:	0800af1d 	.word	0x0800af1d
 800af84:	0800af1d 	.word	0x0800af1d
 800af88:	0800b061 	.word	0x0800b061
 800af8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af90:	e7db      	b.n	800af4a <_scanf_float+0x92>
 800af92:	290e      	cmp	r1, #14
 800af94:	d8c2      	bhi.n	800af1c <_scanf_float+0x64>
 800af96:	a001      	add	r0, pc, #4	@ (adr r0, 800af9c <_scanf_float+0xe4>)
 800af98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af9c:	0800b051 	.word	0x0800b051
 800afa0:	0800af1d 	.word	0x0800af1d
 800afa4:	0800b051 	.word	0x0800b051
 800afa8:	0800b0e7 	.word	0x0800b0e7
 800afac:	0800af1d 	.word	0x0800af1d
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800b037 	.word	0x0800b037
 800afb8:	0800b037 	.word	0x0800b037
 800afbc:	0800b037 	.word	0x0800b037
 800afc0:	0800b037 	.word	0x0800b037
 800afc4:	0800b037 	.word	0x0800b037
 800afc8:	0800b037 	.word	0x0800b037
 800afcc:	0800b037 	.word	0x0800b037
 800afd0:	0800b037 	.word	0x0800b037
 800afd4:	0800b037 	.word	0x0800b037
 800afd8:	2b6e      	cmp	r3, #110	@ 0x6e
 800afda:	d809      	bhi.n	800aff0 <_scanf_float+0x138>
 800afdc:	2b60      	cmp	r3, #96	@ 0x60
 800afde:	d8b2      	bhi.n	800af46 <_scanf_float+0x8e>
 800afe0:	2b54      	cmp	r3, #84	@ 0x54
 800afe2:	d07b      	beq.n	800b0dc <_scanf_float+0x224>
 800afe4:	2b59      	cmp	r3, #89	@ 0x59
 800afe6:	d199      	bne.n	800af1c <_scanf_float+0x64>
 800afe8:	2d07      	cmp	r5, #7
 800afea:	d197      	bne.n	800af1c <_scanf_float+0x64>
 800afec:	2508      	movs	r5, #8
 800afee:	e02c      	b.n	800b04a <_scanf_float+0x192>
 800aff0:	2b74      	cmp	r3, #116	@ 0x74
 800aff2:	d073      	beq.n	800b0dc <_scanf_float+0x224>
 800aff4:	2b79      	cmp	r3, #121	@ 0x79
 800aff6:	e7f6      	b.n	800afe6 <_scanf_float+0x12e>
 800aff8:	6821      	ldr	r1, [r4, #0]
 800affa:	05c8      	lsls	r0, r1, #23
 800affc:	d51b      	bpl.n	800b036 <_scanf_float+0x17e>
 800affe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b002:	6021      	str	r1, [r4, #0]
 800b004:	f109 0901 	add.w	r9, r9, #1
 800b008:	f1bb 0f00 	cmp.w	fp, #0
 800b00c:	d003      	beq.n	800b016 <_scanf_float+0x15e>
 800b00e:	3201      	adds	r2, #1
 800b010:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b014:	60a2      	str	r2, [r4, #8]
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	3b01      	subs	r3, #1
 800b01a:	60a3      	str	r3, [r4, #8]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	3301      	adds	r3, #1
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	607b      	str	r3, [r7, #4]
 800b02a:	f340 8087 	ble.w	800b13c <_scanf_float+0x284>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3301      	adds	r3, #1
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	e765      	b.n	800af02 <_scanf_float+0x4a>
 800b036:	eb1a 0105 	adds.w	r1, sl, r5
 800b03a:	f47f af6f 	bne.w	800af1c <_scanf_float+0x64>
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b044:	6022      	str	r2, [r4, #0]
 800b046:	460d      	mov	r5, r1
 800b048:	468a      	mov	sl, r1
 800b04a:	f806 3b01 	strb.w	r3, [r6], #1
 800b04e:	e7e2      	b.n	800b016 <_scanf_float+0x15e>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	0610      	lsls	r0, r2, #24
 800b054:	f57f af62 	bpl.w	800af1c <_scanf_float+0x64>
 800b058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b05c:	6022      	str	r2, [r4, #0]
 800b05e:	e7f4      	b.n	800b04a <_scanf_float+0x192>
 800b060:	f1ba 0f00 	cmp.w	sl, #0
 800b064:	d10e      	bne.n	800b084 <_scanf_float+0x1cc>
 800b066:	f1b9 0f00 	cmp.w	r9, #0
 800b06a:	d10e      	bne.n	800b08a <_scanf_float+0x1d2>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b072:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b076:	d108      	bne.n	800b08a <_scanf_float+0x1d2>
 800b078:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b07c:	6022      	str	r2, [r4, #0]
 800b07e:	f04f 0a01 	mov.w	sl, #1
 800b082:	e7e2      	b.n	800b04a <_scanf_float+0x192>
 800b084:	f1ba 0f02 	cmp.w	sl, #2
 800b088:	d055      	beq.n	800b136 <_scanf_float+0x27e>
 800b08a:	2d01      	cmp	r5, #1
 800b08c:	d002      	beq.n	800b094 <_scanf_float+0x1dc>
 800b08e:	2d04      	cmp	r5, #4
 800b090:	f47f af44 	bne.w	800af1c <_scanf_float+0x64>
 800b094:	3501      	adds	r5, #1
 800b096:	b2ed      	uxtb	r5, r5
 800b098:	e7d7      	b.n	800b04a <_scanf_float+0x192>
 800b09a:	f1ba 0f01 	cmp.w	sl, #1
 800b09e:	f47f af3d 	bne.w	800af1c <_scanf_float+0x64>
 800b0a2:	f04f 0a02 	mov.w	sl, #2
 800b0a6:	e7d0      	b.n	800b04a <_scanf_float+0x192>
 800b0a8:	b97d      	cbnz	r5, 800b0ca <_scanf_float+0x212>
 800b0aa:	f1b9 0f00 	cmp.w	r9, #0
 800b0ae:	f47f af38 	bne.w	800af22 <_scanf_float+0x6a>
 800b0b2:	6822      	ldr	r2, [r4, #0]
 800b0b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0bc:	f040 8108 	bne.w	800b2d0 <_scanf_float+0x418>
 800b0c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	2501      	movs	r5, #1
 800b0c8:	e7bf      	b.n	800b04a <_scanf_float+0x192>
 800b0ca:	2d03      	cmp	r5, #3
 800b0cc:	d0e2      	beq.n	800b094 <_scanf_float+0x1dc>
 800b0ce:	2d05      	cmp	r5, #5
 800b0d0:	e7de      	b.n	800b090 <_scanf_float+0x1d8>
 800b0d2:	2d02      	cmp	r5, #2
 800b0d4:	f47f af22 	bne.w	800af1c <_scanf_float+0x64>
 800b0d8:	2503      	movs	r5, #3
 800b0da:	e7b6      	b.n	800b04a <_scanf_float+0x192>
 800b0dc:	2d06      	cmp	r5, #6
 800b0de:	f47f af1d 	bne.w	800af1c <_scanf_float+0x64>
 800b0e2:	2507      	movs	r5, #7
 800b0e4:	e7b1      	b.n	800b04a <_scanf_float+0x192>
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	0591      	lsls	r1, r2, #22
 800b0ea:	f57f af17 	bpl.w	800af1c <_scanf_float+0x64>
 800b0ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b0f2:	6022      	str	r2, [r4, #0]
 800b0f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0f8:	e7a7      	b.n	800b04a <_scanf_float+0x192>
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b100:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b104:	d006      	beq.n	800b114 <_scanf_float+0x25c>
 800b106:	0550      	lsls	r0, r2, #21
 800b108:	f57f af08 	bpl.w	800af1c <_scanf_float+0x64>
 800b10c:	f1b9 0f00 	cmp.w	r9, #0
 800b110:	f000 80de 	beq.w	800b2d0 <_scanf_float+0x418>
 800b114:	0591      	lsls	r1, r2, #22
 800b116:	bf58      	it	pl
 800b118:	9902      	ldrpl	r1, [sp, #8]
 800b11a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b11e:	bf58      	it	pl
 800b120:	eba9 0101 	subpl.w	r1, r9, r1
 800b124:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b128:	bf58      	it	pl
 800b12a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b12e:	6022      	str	r2, [r4, #0]
 800b130:	f04f 0900 	mov.w	r9, #0
 800b134:	e789      	b.n	800b04a <_scanf_float+0x192>
 800b136:	f04f 0a03 	mov.w	sl, #3
 800b13a:	e786      	b.n	800b04a <_scanf_float+0x192>
 800b13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b140:	4639      	mov	r1, r7
 800b142:	4640      	mov	r0, r8
 800b144:	4798      	blx	r3
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f aedb 	beq.w	800af02 <_scanf_float+0x4a>
 800b14c:	e6e6      	b.n	800af1c <_scanf_float+0x64>
 800b14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b156:	463a      	mov	r2, r7
 800b158:	4640      	mov	r0, r8
 800b15a:	4798      	blx	r3
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	3b01      	subs	r3, #1
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	e6e8      	b.n	800af36 <_scanf_float+0x7e>
 800b164:	1e6b      	subs	r3, r5, #1
 800b166:	2b06      	cmp	r3, #6
 800b168:	d824      	bhi.n	800b1b4 <_scanf_float+0x2fc>
 800b16a:	2d02      	cmp	r5, #2
 800b16c:	d836      	bhi.n	800b1dc <_scanf_float+0x324>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	429e      	cmp	r6, r3
 800b172:	f67f aee4 	bls.w	800af3e <_scanf_float+0x86>
 800b176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b17a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b17e:	463a      	mov	r2, r7
 800b180:	4640      	mov	r0, r8
 800b182:	4798      	blx	r3
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	3b01      	subs	r3, #1
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	e7f0      	b.n	800b16e <_scanf_float+0x2b6>
 800b18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b190:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b194:	463a      	mov	r2, r7
 800b196:	4640      	mov	r0, r8
 800b198:	4798      	blx	r3
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b1a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b1a8:	f1ba 0f02 	cmp.w	sl, #2
 800b1ac:	d1ee      	bne.n	800b18c <_scanf_float+0x2d4>
 800b1ae:	3d03      	subs	r5, #3
 800b1b0:	b2ed      	uxtb	r5, r5
 800b1b2:	1b76      	subs	r6, r6, r5
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	05da      	lsls	r2, r3, #23
 800b1b8:	d530      	bpl.n	800b21c <_scanf_float+0x364>
 800b1ba:	055b      	lsls	r3, r3, #21
 800b1bc:	d511      	bpl.n	800b1e2 <_scanf_float+0x32a>
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	429e      	cmp	r6, r3
 800b1c2:	f67f aebc 	bls.w	800af3e <_scanf_float+0x86>
 800b1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1ce:	463a      	mov	r2, r7
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4798      	blx	r3
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	e7f0      	b.n	800b1be <_scanf_float+0x306>
 800b1dc:	46aa      	mov	sl, r5
 800b1de:	46b3      	mov	fp, r6
 800b1e0:	e7de      	b.n	800b1a0 <_scanf_float+0x2e8>
 800b1e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	2965      	cmp	r1, #101	@ 0x65
 800b1ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b1ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b1f2:	6123      	str	r3, [r4, #16]
 800b1f4:	d00c      	beq.n	800b210 <_scanf_float+0x358>
 800b1f6:	2945      	cmp	r1, #69	@ 0x45
 800b1f8:	d00a      	beq.n	800b210 <_scanf_float+0x358>
 800b1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1fe:	463a      	mov	r2, r7
 800b200:	4640      	mov	r0, r8
 800b202:	4798      	blx	r3
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	1eb5      	subs	r5, r6, #2
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b214:	463a      	mov	r2, r7
 800b216:	4640      	mov	r0, r8
 800b218:	4798      	blx	r3
 800b21a:	462e      	mov	r6, r5
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	f012 0210 	ands.w	r2, r2, #16
 800b222:	d001      	beq.n	800b228 <_scanf_float+0x370>
 800b224:	2000      	movs	r0, #0
 800b226:	e68b      	b.n	800af40 <_scanf_float+0x88>
 800b228:	7032      	strb	r2, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b234:	d11c      	bne.n	800b270 <_scanf_float+0x3b8>
 800b236:	9b02      	ldr	r3, [sp, #8]
 800b238:	454b      	cmp	r3, r9
 800b23a:	eba3 0209 	sub.w	r2, r3, r9
 800b23e:	d123      	bne.n	800b288 <_scanf_float+0x3d0>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	4640      	mov	r0, r8
 800b246:	f000 ff47 	bl	800c0d8 <_strtod_r>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	6821      	ldr	r1, [r4, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f011 0f02 	tst.w	r1, #2
 800b254:	ec57 6b10 	vmov	r6, r7, d0
 800b258:	f103 0204 	add.w	r2, r3, #4
 800b25c:	d01f      	beq.n	800b29e <_scanf_float+0x3e6>
 800b25e:	9903      	ldr	r1, [sp, #12]
 800b260:	600a      	str	r2, [r1, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	e9c3 6700 	strd	r6, r7, [r3]
 800b268:	68e3      	ldr	r3, [r4, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60e3      	str	r3, [r4, #12]
 800b26e:	e7d9      	b.n	800b224 <_scanf_float+0x36c>
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0e4      	beq.n	800b240 <_scanf_float+0x388>
 800b276:	9905      	ldr	r1, [sp, #20]
 800b278:	230a      	movs	r3, #10
 800b27a:	3101      	adds	r1, #1
 800b27c:	4640      	mov	r0, r8
 800b27e:	f000 ffab 	bl	800c1d8 <_strtol_r>
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	9e05      	ldr	r6, [sp, #20]
 800b286:	1ac2      	subs	r2, r0, r3
 800b288:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b28c:	429e      	cmp	r6, r3
 800b28e:	bf28      	it	cs
 800b290:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b294:	4910      	ldr	r1, [pc, #64]	@ (800b2d8 <_scanf_float+0x420>)
 800b296:	4630      	mov	r0, r6
 800b298:	f000 f856 	bl	800b348 <siprintf>
 800b29c:	e7d0      	b.n	800b240 <_scanf_float+0x388>
 800b29e:	f011 0f04 	tst.w	r1, #4
 800b2a2:	9903      	ldr	r1, [sp, #12]
 800b2a4:	600a      	str	r2, [r1, #0]
 800b2a6:	d1dc      	bne.n	800b262 <_scanf_float+0x3aa>
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc5b 	bl	8000b6c <__aeabi_dcmpun>
 800b2b6:	b128      	cbz	r0, 800b2c4 <_scanf_float+0x40c>
 800b2b8:	4808      	ldr	r0, [pc, #32]	@ (800b2dc <_scanf_float+0x424>)
 800b2ba:	f001 f811 	bl	800c2e0 <nanf>
 800b2be:	ed85 0a00 	vstr	s0, [r5]
 800b2c2:	e7d1      	b.n	800b268 <_scanf_float+0x3b0>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	f7f5 fcae 	bl	8000c28 <__aeabi_d2f>
 800b2cc:	6028      	str	r0, [r5, #0]
 800b2ce:	e7cb      	b.n	800b268 <_scanf_float+0x3b0>
 800b2d0:	f04f 0900 	mov.w	r9, #0
 800b2d4:	e629      	b.n	800af2a <_scanf_float+0x72>
 800b2d6:	bf00      	nop
 800b2d8:	0800f2a4 	.word	0x0800f2a4
 800b2dc:	0800f69b 	.word	0x0800f69b

0800b2e0 <sniprintf>:
 800b2e0:	b40c      	push	{r2, r3}
 800b2e2:	b530      	push	{r4, r5, lr}
 800b2e4:	4b17      	ldr	r3, [pc, #92]	@ (800b344 <sniprintf+0x64>)
 800b2e6:	1e0c      	subs	r4, r1, #0
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	b09d      	sub	sp, #116	@ 0x74
 800b2ec:	da08      	bge.n	800b300 <sniprintf+0x20>
 800b2ee:	238b      	movs	r3, #139	@ 0x8b
 800b2f0:	602b      	str	r3, [r5, #0]
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2f6:	b01d      	add	sp, #116	@ 0x74
 800b2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2fc:	b002      	add	sp, #8
 800b2fe:	4770      	bx	lr
 800b300:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b304:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b308:	bf14      	ite	ne
 800b30a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b30e:	4623      	moveq	r3, r4
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	9307      	str	r3, [sp, #28]
 800b314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b318:	9002      	str	r0, [sp, #8]
 800b31a:	9006      	str	r0, [sp, #24]
 800b31c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b320:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b322:	ab21      	add	r3, sp, #132	@ 0x84
 800b324:	a902      	add	r1, sp, #8
 800b326:	4628      	mov	r0, r5
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	f002 f9c1 	bl	800d6b0 <_svfiprintf_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	bfbc      	itt	lt
 800b332:	238b      	movlt	r3, #139	@ 0x8b
 800b334:	602b      	strlt	r3, [r5, #0]
 800b336:	2c00      	cmp	r4, #0
 800b338:	d0dd      	beq.n	800b2f6 <sniprintf+0x16>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	2200      	movs	r2, #0
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e7d9      	b.n	800b2f6 <sniprintf+0x16>
 800b342:	bf00      	nop
 800b344:	200001a0 	.word	0x200001a0

0800b348 <siprintf>:
 800b348:	b40e      	push	{r1, r2, r3}
 800b34a:	b500      	push	{lr}
 800b34c:	b09c      	sub	sp, #112	@ 0x70
 800b34e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b350:	9002      	str	r0, [sp, #8]
 800b352:	9006      	str	r0, [sp, #24]
 800b354:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b358:	4809      	ldr	r0, [pc, #36]	@ (800b380 <siprintf+0x38>)
 800b35a:	9107      	str	r1, [sp, #28]
 800b35c:	9104      	str	r1, [sp, #16]
 800b35e:	4909      	ldr	r1, [pc, #36]	@ (800b384 <siprintf+0x3c>)
 800b360:	f853 2b04 	ldr.w	r2, [r3], #4
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	6800      	ldr	r0, [r0, #0]
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	a902      	add	r1, sp, #8
 800b36c:	f002 f9a0 	bl	800d6b0 <_svfiprintf_r>
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	b01c      	add	sp, #112	@ 0x70
 800b378:	f85d eb04 	ldr.w	lr, [sp], #4
 800b37c:	b003      	add	sp, #12
 800b37e:	4770      	bx	lr
 800b380:	200001a0 	.word	0x200001a0
 800b384:	ffff0208 	.word	0xffff0208

0800b388 <std>:
 800b388:	2300      	movs	r3, #0
 800b38a:	b510      	push	{r4, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	e9c0 3300 	strd	r3, r3, [r0]
 800b392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b396:	6083      	str	r3, [r0, #8]
 800b398:	8181      	strh	r1, [r0, #12]
 800b39a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b39c:	81c2      	strh	r2, [r0, #14]
 800b39e:	6183      	str	r3, [r0, #24]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	2208      	movs	r2, #8
 800b3a4:	305c      	adds	r0, #92	@ 0x5c
 800b3a6:	f000 ff49 	bl	800c23c <memset>
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x58>)
 800b3ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x5c>)
 800b3b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e8 <std+0x60>)
 800b3b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <std+0x64>)
 800b3b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f0 <std+0x68>)
 800b3bc:	6224      	str	r4, [r4, #32]
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	d006      	beq.n	800b3d0 <std+0x48>
 800b3c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3c6:	4294      	cmp	r4, r2
 800b3c8:	d002      	beq.n	800b3d0 <std+0x48>
 800b3ca:	33d0      	adds	r3, #208	@ 0xd0
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	d105      	bne.n	800b3dc <std+0x54>
 800b3d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	f000 bf66 	b.w	800c2a8 <__retarget_lock_init_recursive>
 800b3dc:	bd10      	pop	{r4, pc}
 800b3de:	bf00      	nop
 800b3e0:	0800e4f5 	.word	0x0800e4f5
 800b3e4:	0800e517 	.word	0x0800e517
 800b3e8:	0800e54f 	.word	0x0800e54f
 800b3ec:	0800e573 	.word	0x0800e573
 800b3f0:	2000685c 	.word	0x2000685c

0800b3f4 <stdio_exit_handler>:
 800b3f4:	4a02      	ldr	r2, [pc, #8]	@ (800b400 <stdio_exit_handler+0xc>)
 800b3f6:	4903      	ldr	r1, [pc, #12]	@ (800b404 <stdio_exit_handler+0x10>)
 800b3f8:	4803      	ldr	r0, [pc, #12]	@ (800b408 <stdio_exit_handler+0x14>)
 800b3fa:	f000 beef 	b.w	800c1dc <_fwalk_sglue>
 800b3fe:	bf00      	nop
 800b400:	20000028 	.word	0x20000028
 800b404:	0800db29 	.word	0x0800db29
 800b408:	200001a4 	.word	0x200001a4

0800b40c <cleanup_stdio>:
 800b40c:	6841      	ldr	r1, [r0, #4]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	@ (800b440 <cleanup_stdio+0x34>)
 800b410:	4299      	cmp	r1, r3
 800b412:	b510      	push	{r4, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	d001      	beq.n	800b41c <cleanup_stdio+0x10>
 800b418:	f002 fb86 	bl	800db28 <_fflush_r>
 800b41c:	68a1      	ldr	r1, [r4, #8]
 800b41e:	4b09      	ldr	r3, [pc, #36]	@ (800b444 <cleanup_stdio+0x38>)
 800b420:	4299      	cmp	r1, r3
 800b422:	d002      	beq.n	800b42a <cleanup_stdio+0x1e>
 800b424:	4620      	mov	r0, r4
 800b426:	f002 fb7f 	bl	800db28 <_fflush_r>
 800b42a:	68e1      	ldr	r1, [r4, #12]
 800b42c:	4b06      	ldr	r3, [pc, #24]	@ (800b448 <cleanup_stdio+0x3c>)
 800b42e:	4299      	cmp	r1, r3
 800b430:	d004      	beq.n	800b43c <cleanup_stdio+0x30>
 800b432:	4620      	mov	r0, r4
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f002 bb76 	b.w	800db28 <_fflush_r>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	2000685c 	.word	0x2000685c
 800b444:	200068c4 	.word	0x200068c4
 800b448:	2000692c 	.word	0x2000692c

0800b44c <global_stdio_init.part.0>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <global_stdio_init.part.0+0x30>)
 800b450:	4c0b      	ldr	r4, [pc, #44]	@ (800b480 <global_stdio_init.part.0+0x34>)
 800b452:	4a0c      	ldr	r2, [pc, #48]	@ (800b484 <global_stdio_init.part.0+0x38>)
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	4620      	mov	r0, r4
 800b458:	2200      	movs	r2, #0
 800b45a:	2104      	movs	r1, #4
 800b45c:	f7ff ff94 	bl	800b388 <std>
 800b460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b464:	2201      	movs	r2, #1
 800b466:	2109      	movs	r1, #9
 800b468:	f7ff ff8e 	bl	800b388 <std>
 800b46c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b470:	2202      	movs	r2, #2
 800b472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b476:	2112      	movs	r1, #18
 800b478:	f7ff bf86 	b.w	800b388 <std>
 800b47c:	20006994 	.word	0x20006994
 800b480:	2000685c 	.word	0x2000685c
 800b484:	0800b3f5 	.word	0x0800b3f5

0800b488 <__sfp_lock_acquire>:
 800b488:	4801      	ldr	r0, [pc, #4]	@ (800b490 <__sfp_lock_acquire+0x8>)
 800b48a:	f000 bf0e 	b.w	800c2aa <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	20006999 	.word	0x20006999

0800b494 <__sfp_lock_release>:
 800b494:	4801      	ldr	r0, [pc, #4]	@ (800b49c <__sfp_lock_release+0x8>)
 800b496:	f000 bf09 	b.w	800c2ac <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	20006999 	.word	0x20006999

0800b4a0 <__sinit>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	f7ff fff0 	bl	800b488 <__sfp_lock_acquire>
 800b4a8:	6a23      	ldr	r3, [r4, #32]
 800b4aa:	b11b      	cbz	r3, 800b4b4 <__sinit+0x14>
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f7ff bff0 	b.w	800b494 <__sfp_lock_release>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__sinit+0x28>)
 800b4b6:	6223      	str	r3, [r4, #32]
 800b4b8:	4b04      	ldr	r3, [pc, #16]	@ (800b4cc <__sinit+0x2c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f5      	bne.n	800b4ac <__sinit+0xc>
 800b4c0:	f7ff ffc4 	bl	800b44c <global_stdio_init.part.0>
 800b4c4:	e7f2      	b.n	800b4ac <__sinit+0xc>
 800b4c6:	bf00      	nop
 800b4c8:	0800b40d 	.word	0x0800b40d
 800b4cc:	20006994 	.word	0x20006994

0800b4d0 <sulp>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	ec45 4b10 	vmov	d0, r4, r5
 800b4da:	4616      	mov	r6, r2
 800b4dc:	f002 fecc 	bl	800e278 <__ulp>
 800b4e0:	ec51 0b10 	vmov	r0, r1, d0
 800b4e4:	b17e      	cbz	r6, 800b506 <sulp+0x36>
 800b4e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	dd09      	ble.n	800b506 <sulp+0x36>
 800b4f2:	051b      	lsls	r3, r3, #20
 800b4f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b4f8:	2400      	movs	r4, #0
 800b4fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b4fe:	4622      	mov	r2, r4
 800b500:	462b      	mov	r3, r5
 800b502:	f7f5 f899 	bl	8000638 <__aeabi_dmul>
 800b506:	ec41 0b10 	vmov	d0, r0, r1
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	0000      	movs	r0, r0
	...

0800b510 <_strtod_l>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	b09f      	sub	sp, #124	@ 0x7c
 800b516:	460c      	mov	r4, r1
 800b518:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b51a:	2200      	movs	r2, #0
 800b51c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b51e:	9005      	str	r0, [sp, #20]
 800b520:	f04f 0a00 	mov.w	sl, #0
 800b524:	f04f 0b00 	mov.w	fp, #0
 800b528:	460a      	mov	r2, r1
 800b52a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b52c:	7811      	ldrb	r1, [r2, #0]
 800b52e:	292b      	cmp	r1, #43	@ 0x2b
 800b530:	d04a      	beq.n	800b5c8 <_strtod_l+0xb8>
 800b532:	d838      	bhi.n	800b5a6 <_strtod_l+0x96>
 800b534:	290d      	cmp	r1, #13
 800b536:	d832      	bhi.n	800b59e <_strtod_l+0x8e>
 800b538:	2908      	cmp	r1, #8
 800b53a:	d832      	bhi.n	800b5a2 <_strtod_l+0x92>
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d03b      	beq.n	800b5b8 <_strtod_l+0xa8>
 800b540:	2200      	movs	r2, #0
 800b542:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b544:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b546:	782a      	ldrb	r2, [r5, #0]
 800b548:	2a30      	cmp	r2, #48	@ 0x30
 800b54a:	f040 80b3 	bne.w	800b6b4 <_strtod_l+0x1a4>
 800b54e:	786a      	ldrb	r2, [r5, #1]
 800b550:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b554:	2a58      	cmp	r2, #88	@ 0x58
 800b556:	d16e      	bne.n	800b636 <_strtod_l+0x126>
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	4a8e      	ldr	r2, [pc, #568]	@ (800b79c <_strtod_l+0x28c>)
 800b564:	9805      	ldr	r0, [sp, #20]
 800b566:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b568:	a919      	add	r1, sp, #100	@ 0x64
 800b56a:	f001 fd75 	bl	800d058 <__gethex>
 800b56e:	f010 060f 	ands.w	r6, r0, #15
 800b572:	4604      	mov	r4, r0
 800b574:	d005      	beq.n	800b582 <_strtod_l+0x72>
 800b576:	2e06      	cmp	r6, #6
 800b578:	d128      	bne.n	800b5cc <_strtod_l+0xbc>
 800b57a:	3501      	adds	r5, #1
 800b57c:	2300      	movs	r3, #0
 800b57e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b580:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 858e 	bne.w	800c0a6 <_strtod_l+0xb96>
 800b58a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b58c:	b1cb      	cbz	r3, 800b5c2 <_strtod_l+0xb2>
 800b58e:	4652      	mov	r2, sl
 800b590:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b594:	ec43 2b10 	vmov	d0, r2, r3
 800b598:	b01f      	add	sp, #124	@ 0x7c
 800b59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59e:	2920      	cmp	r1, #32
 800b5a0:	d1ce      	bne.n	800b540 <_strtod_l+0x30>
 800b5a2:	3201      	adds	r2, #1
 800b5a4:	e7c1      	b.n	800b52a <_strtod_l+0x1a>
 800b5a6:	292d      	cmp	r1, #45	@ 0x2d
 800b5a8:	d1ca      	bne.n	800b540 <_strtod_l+0x30>
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b5ae:	1c51      	adds	r1, r2, #1
 800b5b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5b2:	7852      	ldrb	r2, [r2, #1]
 800b5b4:	2a00      	cmp	r2, #0
 800b5b6:	d1c5      	bne.n	800b544 <_strtod_l+0x34>
 800b5b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 8570 	bne.w	800c0a2 <_strtod_l+0xb92>
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	465b      	mov	r3, fp
 800b5c6:	e7e5      	b.n	800b594 <_strtod_l+0x84>
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	e7ef      	b.n	800b5ac <_strtod_l+0x9c>
 800b5cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5ce:	b13a      	cbz	r2, 800b5e0 <_strtod_l+0xd0>
 800b5d0:	2135      	movs	r1, #53	@ 0x35
 800b5d2:	a81c      	add	r0, sp, #112	@ 0x70
 800b5d4:	f002 ff4a 	bl	800e46c <__copybits>
 800b5d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5da:	9805      	ldr	r0, [sp, #20]
 800b5dc:	f002 fb18 	bl	800dc10 <_Bfree>
 800b5e0:	3e01      	subs	r6, #1
 800b5e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b5e4:	2e04      	cmp	r6, #4
 800b5e6:	d806      	bhi.n	800b5f6 <_strtod_l+0xe6>
 800b5e8:	e8df f006 	tbb	[pc, r6]
 800b5ec:	201d0314 	.word	0x201d0314
 800b5f0:	14          	.byte	0x14
 800b5f1:	00          	.byte	0x00
 800b5f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b5f6:	05e1      	lsls	r1, r4, #23
 800b5f8:	bf48      	it	mi
 800b5fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b5fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b602:	0d1b      	lsrs	r3, r3, #20
 800b604:	051b      	lsls	r3, r3, #20
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1bb      	bne.n	800b582 <_strtod_l+0x72>
 800b60a:	f000 fe23 	bl	800c254 <__errno>
 800b60e:	2322      	movs	r3, #34	@ 0x22
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	e7b6      	b.n	800b582 <_strtod_l+0x72>
 800b614:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b618:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b61c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b620:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b624:	e7e7      	b.n	800b5f6 <_strtod_l+0xe6>
 800b626:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b7a4 <_strtod_l+0x294>
 800b62a:	e7e4      	b.n	800b5f6 <_strtod_l+0xe6>
 800b62c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b630:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b634:	e7df      	b.n	800b5f6 <_strtod_l+0xe6>
 800b636:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b63c:	785b      	ldrb	r3, [r3, #1]
 800b63e:	2b30      	cmp	r3, #48	@ 0x30
 800b640:	d0f9      	beq.n	800b636 <_strtod_l+0x126>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d09d      	beq.n	800b582 <_strtod_l+0x72>
 800b646:	2301      	movs	r3, #1
 800b648:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b64c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b64e:	2300      	movs	r3, #0
 800b650:	9308      	str	r3, [sp, #32]
 800b652:	930a      	str	r3, [sp, #40]	@ 0x28
 800b654:	461f      	mov	r7, r3
 800b656:	220a      	movs	r2, #10
 800b658:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b65a:	7805      	ldrb	r5, [r0, #0]
 800b65c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b660:	b2d9      	uxtb	r1, r3
 800b662:	2909      	cmp	r1, #9
 800b664:	d928      	bls.n	800b6b8 <_strtod_l+0x1a8>
 800b666:	494e      	ldr	r1, [pc, #312]	@ (800b7a0 <_strtod_l+0x290>)
 800b668:	2201      	movs	r2, #1
 800b66a:	f000 fdd5 	bl	800c218 <strncmp>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d032      	beq.n	800b6d8 <_strtod_l+0x1c8>
 800b672:	2000      	movs	r0, #0
 800b674:	462a      	mov	r2, r5
 800b676:	4681      	mov	r9, r0
 800b678:	463d      	mov	r5, r7
 800b67a:	4603      	mov	r3, r0
 800b67c:	2a65      	cmp	r2, #101	@ 0x65
 800b67e:	d001      	beq.n	800b684 <_strtod_l+0x174>
 800b680:	2a45      	cmp	r2, #69	@ 0x45
 800b682:	d114      	bne.n	800b6ae <_strtod_l+0x19e>
 800b684:	b91d      	cbnz	r5, 800b68e <_strtod_l+0x17e>
 800b686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b688:	4302      	orrs	r2, r0
 800b68a:	d095      	beq.n	800b5b8 <_strtod_l+0xa8>
 800b68c:	2500      	movs	r5, #0
 800b68e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b690:	1c62      	adds	r2, r4, #1
 800b692:	9219      	str	r2, [sp, #100]	@ 0x64
 800b694:	7862      	ldrb	r2, [r4, #1]
 800b696:	2a2b      	cmp	r2, #43	@ 0x2b
 800b698:	d077      	beq.n	800b78a <_strtod_l+0x27a>
 800b69a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b69c:	d07b      	beq.n	800b796 <_strtod_l+0x286>
 800b69e:	f04f 0c00 	mov.w	ip, #0
 800b6a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6a6:	2909      	cmp	r1, #9
 800b6a8:	f240 8082 	bls.w	800b7b0 <_strtod_l+0x2a0>
 800b6ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	e0a2      	b.n	800b7fa <_strtod_l+0x2ea>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e7c7      	b.n	800b648 <_strtod_l+0x138>
 800b6b8:	2f08      	cmp	r7, #8
 800b6ba:	bfd5      	itete	le
 800b6bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b6be:	9908      	ldrgt	r1, [sp, #32]
 800b6c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b6c8:	f100 0001 	add.w	r0, r0, #1
 800b6cc:	bfd4      	ite	le
 800b6ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b6d0:	9308      	strgt	r3, [sp, #32]
 800b6d2:	3701      	adds	r7, #1
 800b6d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6d6:	e7bf      	b.n	800b658 <_strtod_l+0x148>
 800b6d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6de:	785a      	ldrb	r2, [r3, #1]
 800b6e0:	b37f      	cbz	r7, 800b742 <_strtod_l+0x232>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	463d      	mov	r5, r7
 800b6e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b6ea:	2b09      	cmp	r3, #9
 800b6ec:	d912      	bls.n	800b714 <_strtod_l+0x204>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e7c4      	b.n	800b67c <_strtod_l+0x16c>
 800b6f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6f8:	785a      	ldrb	r2, [r3, #1]
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	2a30      	cmp	r2, #48	@ 0x30
 800b6fe:	d0f8      	beq.n	800b6f2 <_strtod_l+0x1e2>
 800b700:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b704:	2b08      	cmp	r3, #8
 800b706:	f200 84d3 	bhi.w	800c0b0 <_strtod_l+0xba0>
 800b70a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b70c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b70e:	4681      	mov	r9, r0
 800b710:	2000      	movs	r0, #0
 800b712:	4605      	mov	r5, r0
 800b714:	3a30      	subs	r2, #48	@ 0x30
 800b716:	f100 0301 	add.w	r3, r0, #1
 800b71a:	d02a      	beq.n	800b772 <_strtod_l+0x262>
 800b71c:	4499      	add	r9, r3
 800b71e:	eb00 0c05 	add.w	ip, r0, r5
 800b722:	462b      	mov	r3, r5
 800b724:	210a      	movs	r1, #10
 800b726:	4563      	cmp	r3, ip
 800b728:	d10d      	bne.n	800b746 <_strtod_l+0x236>
 800b72a:	1c69      	adds	r1, r5, #1
 800b72c:	4401      	add	r1, r0
 800b72e:	4428      	add	r0, r5
 800b730:	2808      	cmp	r0, #8
 800b732:	dc16      	bgt.n	800b762 <_strtod_l+0x252>
 800b734:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b736:	230a      	movs	r3, #10
 800b738:	fb03 2300 	mla	r3, r3, r0, r2
 800b73c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b73e:	2300      	movs	r3, #0
 800b740:	e018      	b.n	800b774 <_strtod_l+0x264>
 800b742:	4638      	mov	r0, r7
 800b744:	e7da      	b.n	800b6fc <_strtod_l+0x1ec>
 800b746:	2b08      	cmp	r3, #8
 800b748:	f103 0301 	add.w	r3, r3, #1
 800b74c:	dc03      	bgt.n	800b756 <_strtod_l+0x246>
 800b74e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b750:	434e      	muls	r6, r1
 800b752:	960a      	str	r6, [sp, #40]	@ 0x28
 800b754:	e7e7      	b.n	800b726 <_strtod_l+0x216>
 800b756:	2b10      	cmp	r3, #16
 800b758:	bfde      	ittt	le
 800b75a:	9e08      	ldrle	r6, [sp, #32]
 800b75c:	434e      	mulle	r6, r1
 800b75e:	9608      	strle	r6, [sp, #32]
 800b760:	e7e1      	b.n	800b726 <_strtod_l+0x216>
 800b762:	280f      	cmp	r0, #15
 800b764:	dceb      	bgt.n	800b73e <_strtod_l+0x22e>
 800b766:	9808      	ldr	r0, [sp, #32]
 800b768:	230a      	movs	r3, #10
 800b76a:	fb03 2300 	mla	r3, r3, r0, r2
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	e7e5      	b.n	800b73e <_strtod_l+0x22e>
 800b772:	4629      	mov	r1, r5
 800b774:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b776:	1c50      	adds	r0, r2, #1
 800b778:	9019      	str	r0, [sp, #100]	@ 0x64
 800b77a:	7852      	ldrb	r2, [r2, #1]
 800b77c:	4618      	mov	r0, r3
 800b77e:	460d      	mov	r5, r1
 800b780:	e7b1      	b.n	800b6e6 <_strtod_l+0x1d6>
 800b782:	f04f 0900 	mov.w	r9, #0
 800b786:	2301      	movs	r3, #1
 800b788:	e77d      	b.n	800b686 <_strtod_l+0x176>
 800b78a:	f04f 0c00 	mov.w	ip, #0
 800b78e:	1ca2      	adds	r2, r4, #2
 800b790:	9219      	str	r2, [sp, #100]	@ 0x64
 800b792:	78a2      	ldrb	r2, [r4, #2]
 800b794:	e785      	b.n	800b6a2 <_strtod_l+0x192>
 800b796:	f04f 0c01 	mov.w	ip, #1
 800b79a:	e7f8      	b.n	800b78e <_strtod_l+0x27e>
 800b79c:	0800f2c0 	.word	0x0800f2c0
 800b7a0:	0800f2a9 	.word	0x0800f2a9
 800b7a4:	7ff00000 	.word	0x7ff00000
 800b7a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7aa:	1c51      	adds	r1, r2, #1
 800b7ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7ae:	7852      	ldrb	r2, [r2, #1]
 800b7b0:	2a30      	cmp	r2, #48	@ 0x30
 800b7b2:	d0f9      	beq.n	800b7a8 <_strtod_l+0x298>
 800b7b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b7b8:	2908      	cmp	r1, #8
 800b7ba:	f63f af78 	bhi.w	800b6ae <_strtod_l+0x19e>
 800b7be:	3a30      	subs	r2, #48	@ 0x30
 800b7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7c6:	f04f 080a 	mov.w	r8, #10
 800b7ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7cc:	1c56      	adds	r6, r2, #1
 800b7ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800b7d0:	7852      	ldrb	r2, [r2, #1]
 800b7d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b7d6:	f1be 0f09 	cmp.w	lr, #9
 800b7da:	d939      	bls.n	800b850 <_strtod_l+0x340>
 800b7dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7de:	1a76      	subs	r6, r6, r1
 800b7e0:	2e08      	cmp	r6, #8
 800b7e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b7e6:	dc03      	bgt.n	800b7f0 <_strtod_l+0x2e0>
 800b7e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b7ea:	4588      	cmp	r8, r1
 800b7ec:	bfa8      	it	ge
 800b7ee:	4688      	movge	r8, r1
 800b7f0:	f1bc 0f00 	cmp.w	ip, #0
 800b7f4:	d001      	beq.n	800b7fa <_strtod_l+0x2ea>
 800b7f6:	f1c8 0800 	rsb	r8, r8, #0
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	d14e      	bne.n	800b89c <_strtod_l+0x38c>
 800b7fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b800:	4308      	orrs	r0, r1
 800b802:	f47f aebe 	bne.w	800b582 <_strtod_l+0x72>
 800b806:	2b00      	cmp	r3, #0
 800b808:	f47f aed6 	bne.w	800b5b8 <_strtod_l+0xa8>
 800b80c:	2a69      	cmp	r2, #105	@ 0x69
 800b80e:	d028      	beq.n	800b862 <_strtod_l+0x352>
 800b810:	dc25      	bgt.n	800b85e <_strtod_l+0x34e>
 800b812:	2a49      	cmp	r2, #73	@ 0x49
 800b814:	d025      	beq.n	800b862 <_strtod_l+0x352>
 800b816:	2a4e      	cmp	r2, #78	@ 0x4e
 800b818:	f47f aece 	bne.w	800b5b8 <_strtod_l+0xa8>
 800b81c:	499b      	ldr	r1, [pc, #620]	@ (800ba8c <_strtod_l+0x57c>)
 800b81e:	a819      	add	r0, sp, #100	@ 0x64
 800b820:	f001 fe3c 	bl	800d49c <__match>
 800b824:	2800      	cmp	r0, #0
 800b826:	f43f aec7 	beq.w	800b5b8 <_strtod_l+0xa8>
 800b82a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b28      	cmp	r3, #40	@ 0x28
 800b830:	d12e      	bne.n	800b890 <_strtod_l+0x380>
 800b832:	4997      	ldr	r1, [pc, #604]	@ (800ba90 <_strtod_l+0x580>)
 800b834:	aa1c      	add	r2, sp, #112	@ 0x70
 800b836:	a819      	add	r0, sp, #100	@ 0x64
 800b838:	f001 fe44 	bl	800d4c4 <__hexnan>
 800b83c:	2805      	cmp	r0, #5
 800b83e:	d127      	bne.n	800b890 <_strtod_l+0x380>
 800b840:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b842:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b846:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b84a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b84e:	e698      	b.n	800b582 <_strtod_l+0x72>
 800b850:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b852:	fb08 2101 	mla	r1, r8, r1, r2
 800b856:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b85a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b85c:	e7b5      	b.n	800b7ca <_strtod_l+0x2ba>
 800b85e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b860:	e7da      	b.n	800b818 <_strtod_l+0x308>
 800b862:	498c      	ldr	r1, [pc, #560]	@ (800ba94 <_strtod_l+0x584>)
 800b864:	a819      	add	r0, sp, #100	@ 0x64
 800b866:	f001 fe19 	bl	800d49c <__match>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f aea4 	beq.w	800b5b8 <_strtod_l+0xa8>
 800b870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b872:	4989      	ldr	r1, [pc, #548]	@ (800ba98 <_strtod_l+0x588>)
 800b874:	3b01      	subs	r3, #1
 800b876:	a819      	add	r0, sp, #100	@ 0x64
 800b878:	9319      	str	r3, [sp, #100]	@ 0x64
 800b87a:	f001 fe0f 	bl	800d49c <__match>
 800b87e:	b910      	cbnz	r0, 800b886 <_strtod_l+0x376>
 800b880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b882:	3301      	adds	r3, #1
 800b884:	9319      	str	r3, [sp, #100]	@ 0x64
 800b886:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800baa8 <_strtod_l+0x598>
 800b88a:	f04f 0a00 	mov.w	sl, #0
 800b88e:	e678      	b.n	800b582 <_strtod_l+0x72>
 800b890:	4882      	ldr	r0, [pc, #520]	@ (800ba9c <_strtod_l+0x58c>)
 800b892:	f000 fd1d 	bl	800c2d0 <nan>
 800b896:	ec5b ab10 	vmov	sl, fp, d0
 800b89a:	e672      	b.n	800b582 <_strtod_l+0x72>
 800b89c:	eba8 0309 	sub.w	r3, r8, r9
 800b8a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	bf08      	it	eq
 800b8a8:	462f      	moveq	r7, r5
 800b8aa:	2d10      	cmp	r5, #16
 800b8ac:	462c      	mov	r4, r5
 800b8ae:	bfa8      	it	ge
 800b8b0:	2410      	movge	r4, #16
 800b8b2:	f7f4 fe47 	bl	8000544 <__aeabi_ui2d>
 800b8b6:	2d09      	cmp	r5, #9
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	468b      	mov	fp, r1
 800b8bc:	dc13      	bgt.n	800b8e6 <_strtod_l+0x3d6>
 800b8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f43f ae5e 	beq.w	800b582 <_strtod_l+0x72>
 800b8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c8:	dd78      	ble.n	800b9bc <_strtod_l+0x4ac>
 800b8ca:	2b16      	cmp	r3, #22
 800b8cc:	dc5f      	bgt.n	800b98e <_strtod_l+0x47e>
 800b8ce:	4974      	ldr	r1, [pc, #464]	@ (800baa0 <_strtod_l+0x590>)
 800b8d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d8:	4652      	mov	r2, sl
 800b8da:	465b      	mov	r3, fp
 800b8dc:	f7f4 feac 	bl	8000638 <__aeabi_dmul>
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	468b      	mov	fp, r1
 800b8e4:	e64d      	b.n	800b582 <_strtod_l+0x72>
 800b8e6:	4b6e      	ldr	r3, [pc, #440]	@ (800baa0 <_strtod_l+0x590>)
 800b8e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b8f0:	f7f4 fea2 	bl	8000638 <__aeabi_dmul>
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	9808      	ldr	r0, [sp, #32]
 800b8f8:	468b      	mov	fp, r1
 800b8fa:	f7f4 fe23 	bl	8000544 <__aeabi_ui2d>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	f7f4 fce1 	bl	80002cc <__adddf3>
 800b90a:	2d0f      	cmp	r5, #15
 800b90c:	4682      	mov	sl, r0
 800b90e:	468b      	mov	fp, r1
 800b910:	ddd5      	ble.n	800b8be <_strtod_l+0x3ae>
 800b912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b914:	1b2c      	subs	r4, r5, r4
 800b916:	441c      	add	r4, r3
 800b918:	2c00      	cmp	r4, #0
 800b91a:	f340 8096 	ble.w	800ba4a <_strtod_l+0x53a>
 800b91e:	f014 030f 	ands.w	r3, r4, #15
 800b922:	d00a      	beq.n	800b93a <_strtod_l+0x42a>
 800b924:	495e      	ldr	r1, [pc, #376]	@ (800baa0 <_strtod_l+0x590>)
 800b926:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b932:	f7f4 fe81 	bl	8000638 <__aeabi_dmul>
 800b936:	4682      	mov	sl, r0
 800b938:	468b      	mov	fp, r1
 800b93a:	f034 040f 	bics.w	r4, r4, #15
 800b93e:	d073      	beq.n	800ba28 <_strtod_l+0x518>
 800b940:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b944:	dd48      	ble.n	800b9d8 <_strtod_l+0x4c8>
 800b946:	2400      	movs	r4, #0
 800b948:	46a0      	mov	r8, r4
 800b94a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b94c:	46a1      	mov	r9, r4
 800b94e:	9a05      	ldr	r2, [sp, #20]
 800b950:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800baa8 <_strtod_l+0x598>
 800b954:	2322      	movs	r3, #34	@ 0x22
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f43f ae0f 	beq.w	800b582 <_strtod_l+0x72>
 800b964:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b966:	9805      	ldr	r0, [sp, #20]
 800b968:	f002 f952 	bl	800dc10 <_Bfree>
 800b96c:	9805      	ldr	r0, [sp, #20]
 800b96e:	4649      	mov	r1, r9
 800b970:	f002 f94e 	bl	800dc10 <_Bfree>
 800b974:	9805      	ldr	r0, [sp, #20]
 800b976:	4641      	mov	r1, r8
 800b978:	f002 f94a 	bl	800dc10 <_Bfree>
 800b97c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b97e:	9805      	ldr	r0, [sp, #20]
 800b980:	f002 f946 	bl	800dc10 <_Bfree>
 800b984:	9805      	ldr	r0, [sp, #20]
 800b986:	4621      	mov	r1, r4
 800b988:	f002 f942 	bl	800dc10 <_Bfree>
 800b98c:	e5f9      	b.n	800b582 <_strtod_l+0x72>
 800b98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b990:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b994:	4293      	cmp	r3, r2
 800b996:	dbbc      	blt.n	800b912 <_strtod_l+0x402>
 800b998:	4c41      	ldr	r4, [pc, #260]	@ (800baa0 <_strtod_l+0x590>)
 800b99a:	f1c5 050f 	rsb	r5, r5, #15
 800b99e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9aa:	f7f4 fe45 	bl	8000638 <__aeabi_dmul>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	1b5d      	subs	r5, r3, r5
 800b9b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9ba:	e78f      	b.n	800b8dc <_strtod_l+0x3cc>
 800b9bc:	3316      	adds	r3, #22
 800b9be:	dba8      	blt.n	800b912 <_strtod_l+0x402>
 800b9c0:	4b37      	ldr	r3, [pc, #220]	@ (800baa0 <_strtod_l+0x590>)
 800b9c2:	eba9 0808 	sub.w	r8, r9, r8
 800b9c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b9ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b9ce:	4650      	mov	r0, sl
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	f7f4 ff5b 	bl	800088c <__aeabi_ddiv>
 800b9d6:	e783      	b.n	800b8e0 <_strtod_l+0x3d0>
 800b9d8:	4b32      	ldr	r3, [pc, #200]	@ (800baa4 <_strtod_l+0x594>)
 800b9da:	9308      	str	r3, [sp, #32]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	1124      	asrs	r4, r4, #4
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	461e      	mov	r6, r3
 800b9e6:	2c01      	cmp	r4, #1
 800b9e8:	dc21      	bgt.n	800ba2e <_strtod_l+0x51e>
 800b9ea:	b10b      	cbz	r3, 800b9f0 <_strtod_l+0x4e0>
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	492c      	ldr	r1, [pc, #176]	@ (800baa4 <_strtod_l+0x594>)
 800b9f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b9f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	465b      	mov	r3, fp
 800b9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba02:	f7f4 fe19 	bl	8000638 <__aeabi_dmul>
 800ba06:	4b28      	ldr	r3, [pc, #160]	@ (800baa8 <_strtod_l+0x598>)
 800ba08:	460a      	mov	r2, r1
 800ba0a:	400b      	ands	r3, r1
 800ba0c:	4927      	ldr	r1, [pc, #156]	@ (800baac <_strtod_l+0x59c>)
 800ba0e:	428b      	cmp	r3, r1
 800ba10:	4682      	mov	sl, r0
 800ba12:	d898      	bhi.n	800b946 <_strtod_l+0x436>
 800ba14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf86      	itte	hi
 800ba1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bab0 <_strtod_l+0x5a0>
 800ba20:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ba24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	e07a      	b.n	800bb24 <_strtod_l+0x614>
 800ba2e:	07e2      	lsls	r2, r4, #31
 800ba30:	d505      	bpl.n	800ba3e <_strtod_l+0x52e>
 800ba32:	9b08      	ldr	r3, [sp, #32]
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fdfe 	bl	8000638 <__aeabi_dmul>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	9a08      	ldr	r2, [sp, #32]
 800ba40:	3208      	adds	r2, #8
 800ba42:	3601      	adds	r6, #1
 800ba44:	1064      	asrs	r4, r4, #1
 800ba46:	9208      	str	r2, [sp, #32]
 800ba48:	e7cd      	b.n	800b9e6 <_strtod_l+0x4d6>
 800ba4a:	d0ed      	beq.n	800ba28 <_strtod_l+0x518>
 800ba4c:	4264      	negs	r4, r4
 800ba4e:	f014 020f 	ands.w	r2, r4, #15
 800ba52:	d00a      	beq.n	800ba6a <_strtod_l+0x55a>
 800ba54:	4b12      	ldr	r3, [pc, #72]	@ (800baa0 <_strtod_l+0x590>)
 800ba56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f4 ff13 	bl	800088c <__aeabi_ddiv>
 800ba66:	4682      	mov	sl, r0
 800ba68:	468b      	mov	fp, r1
 800ba6a:	1124      	asrs	r4, r4, #4
 800ba6c:	d0dc      	beq.n	800ba28 <_strtod_l+0x518>
 800ba6e:	2c1f      	cmp	r4, #31
 800ba70:	dd20      	ble.n	800bab4 <_strtod_l+0x5a4>
 800ba72:	2400      	movs	r4, #0
 800ba74:	46a0      	mov	r8, r4
 800ba76:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba78:	46a1      	mov	r9, r4
 800ba7a:	9a05      	ldr	r2, [sp, #20]
 800ba7c:	2322      	movs	r3, #34	@ 0x22
 800ba7e:	f04f 0a00 	mov.w	sl, #0
 800ba82:	f04f 0b00 	mov.w	fp, #0
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	e768      	b.n	800b95c <_strtod_l+0x44c>
 800ba8a:	bf00      	nop
 800ba8c:	0800f27d 	.word	0x0800f27d
 800ba90:	0800f2ac 	.word	0x0800f2ac
 800ba94:	0800f275 	.word	0x0800f275
 800ba98:	0800f40c 	.word	0x0800f40c
 800ba9c:	0800f69b 	.word	0x0800f69b
 800baa0:	0800f598 	.word	0x0800f598
 800baa4:	0800f570 	.word	0x0800f570
 800baa8:	7ff00000 	.word	0x7ff00000
 800baac:	7ca00000 	.word	0x7ca00000
 800bab0:	7fefffff 	.word	0x7fefffff
 800bab4:	f014 0310 	ands.w	r3, r4, #16
 800bab8:	bf18      	it	ne
 800baba:	236a      	movne	r3, #106	@ 0x6a
 800babc:	4ea9      	ldr	r6, [pc, #676]	@ (800bd64 <_strtod_l+0x854>)
 800babe:	9308      	str	r3, [sp, #32]
 800bac0:	4650      	mov	r0, sl
 800bac2:	4659      	mov	r1, fp
 800bac4:	2300      	movs	r3, #0
 800bac6:	07e2      	lsls	r2, r4, #31
 800bac8:	d504      	bpl.n	800bad4 <_strtod_l+0x5c4>
 800baca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bace:	f7f4 fdb3 	bl	8000638 <__aeabi_dmul>
 800bad2:	2301      	movs	r3, #1
 800bad4:	1064      	asrs	r4, r4, #1
 800bad6:	f106 0608 	add.w	r6, r6, #8
 800bada:	d1f4      	bne.n	800bac6 <_strtod_l+0x5b6>
 800badc:	b10b      	cbz	r3, 800bae2 <_strtod_l+0x5d2>
 800bade:	4682      	mov	sl, r0
 800bae0:	468b      	mov	fp, r1
 800bae2:	9b08      	ldr	r3, [sp, #32]
 800bae4:	b1b3      	cbz	r3, 800bb14 <_strtod_l+0x604>
 800bae6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800baea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800baee:	2b00      	cmp	r3, #0
 800baf0:	4659      	mov	r1, fp
 800baf2:	dd0f      	ble.n	800bb14 <_strtod_l+0x604>
 800baf4:	2b1f      	cmp	r3, #31
 800baf6:	dd55      	ble.n	800bba4 <_strtod_l+0x694>
 800baf8:	2b34      	cmp	r3, #52	@ 0x34
 800bafa:	bfde      	ittt	le
 800bafc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bb00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb04:	4093      	lslle	r3, r2
 800bb06:	f04f 0a00 	mov.w	sl, #0
 800bb0a:	bfcc      	ite	gt
 800bb0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb10:	ea03 0b01 	andle.w	fp, r3, r1
 800bb14:	2200      	movs	r2, #0
 800bb16:	2300      	movs	r3, #0
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	f7f4 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d1a6      	bne.n	800ba72 <_strtod_l+0x562>
 800bb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb2a:	9805      	ldr	r0, [sp, #20]
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	463a      	mov	r2, r7
 800bb30:	f002 f8d6 	bl	800dce0 <__s2b>
 800bb34:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb36:	2800      	cmp	r0, #0
 800bb38:	f43f af05 	beq.w	800b946 <_strtod_l+0x436>
 800bb3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb3e:	2a00      	cmp	r2, #0
 800bb40:	eba9 0308 	sub.w	r3, r9, r8
 800bb44:	bfa8      	it	ge
 800bb46:	2300      	movge	r3, #0
 800bb48:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb4a:	2400      	movs	r4, #0
 800bb4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb50:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb52:	46a0      	mov	r8, r4
 800bb54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	6859      	ldr	r1, [r3, #4]
 800bb5a:	f002 f819 	bl	800db90 <_Balloc>
 800bb5e:	4681      	mov	r9, r0
 800bb60:	2800      	cmp	r0, #0
 800bb62:	f43f aef4 	beq.w	800b94e <_strtod_l+0x43e>
 800bb66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb68:	691a      	ldr	r2, [r3, #16]
 800bb6a:	3202      	adds	r2, #2
 800bb6c:	f103 010c 	add.w	r1, r3, #12
 800bb70:	0092      	lsls	r2, r2, #2
 800bb72:	300c      	adds	r0, #12
 800bb74:	f000 fb9b 	bl	800c2ae <memcpy>
 800bb78:	ec4b ab10 	vmov	d0, sl, fp
 800bb7c:	9805      	ldr	r0, [sp, #20]
 800bb7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb80:	a91b      	add	r1, sp, #108	@ 0x6c
 800bb82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bb86:	f002 fbe7 	bl	800e358 <__d2b>
 800bb8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f43f aede 	beq.w	800b94e <_strtod_l+0x43e>
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	2101      	movs	r1, #1
 800bb96:	f002 f939 	bl	800de0c <__i2b>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	b948      	cbnz	r0, 800bbb2 <_strtod_l+0x6a2>
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	e6d4      	b.n	800b94e <_strtod_l+0x43e>
 800bba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	ea03 0a0a 	and.w	sl, r3, sl
 800bbb0:	e7b0      	b.n	800bb14 <_strtod_l+0x604>
 800bbb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bbb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	bfab      	itete	ge
 800bbba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bbbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bbbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bbc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bbc2:	bfac      	ite	ge
 800bbc4:	18ef      	addge	r7, r5, r3
 800bbc6:	1b5e      	sublt	r6, r3, r5
 800bbc8:	9b08      	ldr	r3, [sp, #32]
 800bbca:	1aed      	subs	r5, r5, r3
 800bbcc:	4415      	add	r5, r2
 800bbce:	4b66      	ldr	r3, [pc, #408]	@ (800bd68 <_strtod_l+0x858>)
 800bbd0:	3d01      	subs	r5, #1
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bbd8:	da50      	bge.n	800bc7c <_strtod_l+0x76c>
 800bbda:	1b5b      	subs	r3, r3, r5
 800bbdc:	2b1f      	cmp	r3, #31
 800bbde:	eba2 0203 	sub.w	r2, r2, r3
 800bbe2:	f04f 0101 	mov.w	r1, #1
 800bbe6:	dc3d      	bgt.n	800bc64 <_strtod_l+0x754>
 800bbe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbf2:	18bd      	adds	r5, r7, r2
 800bbf4:	9b08      	ldr	r3, [sp, #32]
 800bbf6:	42af      	cmp	r7, r5
 800bbf8:	4416      	add	r6, r2
 800bbfa:	441e      	add	r6, r3
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	bfa8      	it	ge
 800bc00:	462b      	movge	r3, r5
 800bc02:	42b3      	cmp	r3, r6
 800bc04:	bfa8      	it	ge
 800bc06:	4633      	movge	r3, r6
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfc2      	ittt	gt
 800bc0c:	1aed      	subgt	r5, r5, r3
 800bc0e:	1af6      	subgt	r6, r6, r3
 800bc10:	1aff      	subgt	r7, r7, r3
 800bc12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dd16      	ble.n	800bc46 <_strtod_l+0x736>
 800bc18:	4641      	mov	r1, r8
 800bc1a:	9805      	ldr	r0, [sp, #20]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f002 f9b5 	bl	800df8c <__pow5mult>
 800bc22:	4680      	mov	r8, r0
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d0ba      	beq.n	800bb9e <_strtod_l+0x68e>
 800bc28:	4601      	mov	r1, r0
 800bc2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc2c:	9805      	ldr	r0, [sp, #20]
 800bc2e:	f002 f903 	bl	800de38 <__multiply>
 800bc32:	900e      	str	r0, [sp, #56]	@ 0x38
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f43f ae8a 	beq.w	800b94e <_strtod_l+0x43e>
 800bc3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc3c:	9805      	ldr	r0, [sp, #20]
 800bc3e:	f001 ffe7 	bl	800dc10 <_Bfree>
 800bc42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	dc1d      	bgt.n	800bc86 <_strtod_l+0x776>
 800bc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd23      	ble.n	800bc98 <_strtod_l+0x788>
 800bc50:	4649      	mov	r1, r9
 800bc52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc54:	9805      	ldr	r0, [sp, #20]
 800bc56:	f002 f999 	bl	800df8c <__pow5mult>
 800bc5a:	4681      	mov	r9, r0
 800bc5c:	b9e0      	cbnz	r0, 800bc98 <_strtod_l+0x788>
 800bc5e:	f04f 0900 	mov.w	r9, #0
 800bc62:	e674      	b.n	800b94e <_strtod_l+0x43e>
 800bc64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc70:	35e2      	adds	r5, #226	@ 0xe2
 800bc72:	fa01 f305 	lsl.w	r3, r1, r5
 800bc76:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc7a:	e7ba      	b.n	800bbf2 <_strtod_l+0x6e2>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc80:	2301      	movs	r3, #1
 800bc82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc84:	e7b5      	b.n	800bbf2 <_strtod_l+0x6e2>
 800bc86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc88:	9805      	ldr	r0, [sp, #20]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	f002 f9d8 	bl	800e040 <__lshift>
 800bc90:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d1d9      	bne.n	800bc4a <_strtod_l+0x73a>
 800bc96:	e65a      	b.n	800b94e <_strtod_l+0x43e>
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	dd07      	ble.n	800bcac <_strtod_l+0x79c>
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	9805      	ldr	r0, [sp, #20]
 800bca0:	4632      	mov	r2, r6
 800bca2:	f002 f9cd 	bl	800e040 <__lshift>
 800bca6:	4681      	mov	r9, r0
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d0d8      	beq.n	800bc5e <_strtod_l+0x74e>
 800bcac:	2f00      	cmp	r7, #0
 800bcae:	dd08      	ble.n	800bcc2 <_strtod_l+0x7b2>
 800bcb0:	4641      	mov	r1, r8
 800bcb2:	9805      	ldr	r0, [sp, #20]
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	f002 f9c3 	bl	800e040 <__lshift>
 800bcba:	4680      	mov	r8, r0
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f43f ae46 	beq.w	800b94e <_strtod_l+0x43e>
 800bcc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcc4:	9805      	ldr	r0, [sp, #20]
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	f002 fa42 	bl	800e150 <__mdiff>
 800bccc:	4604      	mov	r4, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f43f ae3d 	beq.w	800b94e <_strtod_l+0x43e>
 800bcd4:	68c3      	ldr	r3, [r0, #12]
 800bcd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60c3      	str	r3, [r0, #12]
 800bcdc:	4641      	mov	r1, r8
 800bcde:	f002 fa1b 	bl	800e118 <__mcmp>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	da46      	bge.n	800bd74 <_strtod_l+0x864>
 800bce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bce8:	ea53 030a 	orrs.w	r3, r3, sl
 800bcec:	d16c      	bne.n	800bdc8 <_strtod_l+0x8b8>
 800bcee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d168      	bne.n	800bdc8 <_strtod_l+0x8b8>
 800bcf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcfa:	0d1b      	lsrs	r3, r3, #20
 800bcfc:	051b      	lsls	r3, r3, #20
 800bcfe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd02:	d961      	bls.n	800bdc8 <_strtod_l+0x8b8>
 800bd04:	6963      	ldr	r3, [r4, #20]
 800bd06:	b913      	cbnz	r3, 800bd0e <_strtod_l+0x7fe>
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	dd5c      	ble.n	800bdc8 <_strtod_l+0x8b8>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	2201      	movs	r2, #1
 800bd12:	9805      	ldr	r0, [sp, #20]
 800bd14:	f002 f994 	bl	800e040 <__lshift>
 800bd18:	4641      	mov	r1, r8
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	f002 f9fc 	bl	800e118 <__mcmp>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dd51      	ble.n	800bdc8 <_strtod_l+0x8b8>
 800bd24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd28:	9a08      	ldr	r2, [sp, #32]
 800bd2a:	0d1b      	lsrs	r3, r3, #20
 800bd2c:	051b      	lsls	r3, r3, #20
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	d06b      	beq.n	800be0a <_strtod_l+0x8fa>
 800bd32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd36:	d868      	bhi.n	800be0a <_strtod_l+0x8fa>
 800bd38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd3c:	f67f ae9d 	bls.w	800ba7a <_strtod_l+0x56a>
 800bd40:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <_strtod_l+0x85c>)
 800bd42:	4650      	mov	r0, sl
 800bd44:	4659      	mov	r1, fp
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7f4 fc76 	bl	8000638 <__aeabi_dmul>
 800bd4c:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <_strtod_l+0x860>)
 800bd4e:	400b      	ands	r3, r1
 800bd50:	4682      	mov	sl, r0
 800bd52:	468b      	mov	fp, r1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f47f ae05 	bne.w	800b964 <_strtod_l+0x454>
 800bd5a:	9a05      	ldr	r2, [sp, #20]
 800bd5c:	2322      	movs	r3, #34	@ 0x22
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	e600      	b.n	800b964 <_strtod_l+0x454>
 800bd62:	bf00      	nop
 800bd64:	0800f2d8 	.word	0x0800f2d8
 800bd68:	fffffc02 	.word	0xfffffc02
 800bd6c:	39500000 	.word	0x39500000
 800bd70:	7ff00000 	.word	0x7ff00000
 800bd74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bd78:	d165      	bne.n	800be46 <_strtod_l+0x936>
 800bd7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd80:	b35a      	cbz	r2, 800bdda <_strtod_l+0x8ca>
 800bd82:	4a9f      	ldr	r2, [pc, #636]	@ (800c000 <_strtod_l+0xaf0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d12b      	bne.n	800bde0 <_strtod_l+0x8d0>
 800bd88:	9b08      	ldr	r3, [sp, #32]
 800bd8a:	4651      	mov	r1, sl
 800bd8c:	b303      	cbz	r3, 800bdd0 <_strtod_l+0x8c0>
 800bd8e:	4b9d      	ldr	r3, [pc, #628]	@ (800c004 <_strtod_l+0xaf4>)
 800bd90:	465a      	mov	r2, fp
 800bd92:	4013      	ands	r3, r2
 800bd94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bd98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd9c:	d81b      	bhi.n	800bdd6 <_strtod_l+0x8c6>
 800bd9e:	0d1b      	lsrs	r3, r3, #20
 800bda0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d119      	bne.n	800bde0 <_strtod_l+0x8d0>
 800bdac:	4b96      	ldr	r3, [pc, #600]	@ (800c008 <_strtod_l+0xaf8>)
 800bdae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d102      	bne.n	800bdba <_strtod_l+0x8aa>
 800bdb4:	3101      	adds	r1, #1
 800bdb6:	f43f adca 	beq.w	800b94e <_strtod_l+0x43e>
 800bdba:	4b92      	ldr	r3, [pc, #584]	@ (800c004 <_strtod_l+0xaf4>)
 800bdbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdbe:	401a      	ands	r2, r3
 800bdc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bdc4:	f04f 0a00 	mov.w	sl, #0
 800bdc8:	9b08      	ldr	r3, [sp, #32]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1b8      	bne.n	800bd40 <_strtod_l+0x830>
 800bdce:	e5c9      	b.n	800b964 <_strtod_l+0x454>
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdd4:	e7e8      	b.n	800bda8 <_strtod_l+0x898>
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	e7e6      	b.n	800bda8 <_strtod_l+0x898>
 800bdda:	ea53 030a 	orrs.w	r3, r3, sl
 800bdde:	d0a1      	beq.n	800bd24 <_strtod_l+0x814>
 800bde0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bde2:	b1db      	cbz	r3, 800be1c <_strtod_l+0x90c>
 800bde4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bde6:	4213      	tst	r3, r2
 800bde8:	d0ee      	beq.n	800bdc8 <_strtod_l+0x8b8>
 800bdea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdec:	9a08      	ldr	r2, [sp, #32]
 800bdee:	4650      	mov	r0, sl
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	b1bb      	cbz	r3, 800be24 <_strtod_l+0x914>
 800bdf4:	f7ff fb6c 	bl	800b4d0 <sulp>
 800bdf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdfc:	ec53 2b10 	vmov	r2, r3, d0
 800be00:	f7f4 fa64 	bl	80002cc <__adddf3>
 800be04:	4682      	mov	sl, r0
 800be06:	468b      	mov	fp, r1
 800be08:	e7de      	b.n	800bdc8 <_strtod_l+0x8b8>
 800be0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be16:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800be1a:	e7d5      	b.n	800bdc8 <_strtod_l+0x8b8>
 800be1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be1e:	ea13 0f0a 	tst.w	r3, sl
 800be22:	e7e1      	b.n	800bde8 <_strtod_l+0x8d8>
 800be24:	f7ff fb54 	bl	800b4d0 <sulp>
 800be28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be2c:	ec53 2b10 	vmov	r2, r3, d0
 800be30:	f7f4 fa4a 	bl	80002c8 <__aeabi_dsub>
 800be34:	2200      	movs	r2, #0
 800be36:	2300      	movs	r3, #0
 800be38:	4682      	mov	sl, r0
 800be3a:	468b      	mov	fp, r1
 800be3c:	f7f4 fe64 	bl	8000b08 <__aeabi_dcmpeq>
 800be40:	2800      	cmp	r0, #0
 800be42:	d0c1      	beq.n	800bdc8 <_strtod_l+0x8b8>
 800be44:	e619      	b.n	800ba7a <_strtod_l+0x56a>
 800be46:	4641      	mov	r1, r8
 800be48:	4620      	mov	r0, r4
 800be4a:	f002 fadd 	bl	800e408 <__ratio>
 800be4e:	ec57 6b10 	vmov	r6, r7, d0
 800be52:	2200      	movs	r2, #0
 800be54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fe68 	bl	8000b30 <__aeabi_dcmple>
 800be60:	2800      	cmp	r0, #0
 800be62:	d06f      	beq.n	800bf44 <_strtod_l+0xa34>
 800be64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d17a      	bne.n	800bf60 <_strtod_l+0xa50>
 800be6a:	f1ba 0f00 	cmp.w	sl, #0
 800be6e:	d158      	bne.n	800bf22 <_strtod_l+0xa12>
 800be70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be76:	2b00      	cmp	r3, #0
 800be78:	d15a      	bne.n	800bf30 <_strtod_l+0xa20>
 800be7a:	4b64      	ldr	r3, [pc, #400]	@ (800c00c <_strtod_l+0xafc>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	4630      	mov	r0, r6
 800be80:	4639      	mov	r1, r7
 800be82:	f7f4 fe4b 	bl	8000b1c <__aeabi_dcmplt>
 800be86:	2800      	cmp	r0, #0
 800be88:	d159      	bne.n	800bf3e <_strtod_l+0xa2e>
 800be8a:	4630      	mov	r0, r6
 800be8c:	4639      	mov	r1, r7
 800be8e:	4b60      	ldr	r3, [pc, #384]	@ (800c010 <_strtod_l+0xb00>)
 800be90:	2200      	movs	r2, #0
 800be92:	f7f4 fbd1 	bl	8000638 <__aeabi_dmul>
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800be9e:	9606      	str	r6, [sp, #24]
 800bea0:	9307      	str	r3, [sp, #28]
 800bea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bea6:	4d57      	ldr	r5, [pc, #348]	@ (800c004 <_strtod_l+0xaf4>)
 800bea8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800beac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beae:	401d      	ands	r5, r3
 800beb0:	4b58      	ldr	r3, [pc, #352]	@ (800c014 <_strtod_l+0xb04>)
 800beb2:	429d      	cmp	r5, r3
 800beb4:	f040 80b2 	bne.w	800c01c <_strtod_l+0xb0c>
 800beb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bebe:	ec4b ab10 	vmov	d0, sl, fp
 800bec2:	f002 f9d9 	bl	800e278 <__ulp>
 800bec6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beca:	ec51 0b10 	vmov	r0, r1, d0
 800bece:	f7f4 fbb3 	bl	8000638 <__aeabi_dmul>
 800bed2:	4652      	mov	r2, sl
 800bed4:	465b      	mov	r3, fp
 800bed6:	f7f4 f9f9 	bl	80002cc <__adddf3>
 800beda:	460b      	mov	r3, r1
 800bedc:	4949      	ldr	r1, [pc, #292]	@ (800c004 <_strtod_l+0xaf4>)
 800bede:	4a4e      	ldr	r2, [pc, #312]	@ (800c018 <_strtod_l+0xb08>)
 800bee0:	4019      	ands	r1, r3
 800bee2:	4291      	cmp	r1, r2
 800bee4:	4682      	mov	sl, r0
 800bee6:	d942      	bls.n	800bf6e <_strtod_l+0xa5e>
 800bee8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800beea:	4b47      	ldr	r3, [pc, #284]	@ (800c008 <_strtod_l+0xaf8>)
 800beec:	429a      	cmp	r2, r3
 800beee:	d103      	bne.n	800bef8 <_strtod_l+0x9e8>
 800bef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bef2:	3301      	adds	r3, #1
 800bef4:	f43f ad2b 	beq.w	800b94e <_strtod_l+0x43e>
 800bef8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c008 <_strtod_l+0xaf8>
 800befc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bf00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf02:	9805      	ldr	r0, [sp, #20]
 800bf04:	f001 fe84 	bl	800dc10 <_Bfree>
 800bf08:	9805      	ldr	r0, [sp, #20]
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	f001 fe80 	bl	800dc10 <_Bfree>
 800bf10:	9805      	ldr	r0, [sp, #20]
 800bf12:	4641      	mov	r1, r8
 800bf14:	f001 fe7c 	bl	800dc10 <_Bfree>
 800bf18:	9805      	ldr	r0, [sp, #20]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	f001 fe78 	bl	800dc10 <_Bfree>
 800bf20:	e618      	b.n	800bb54 <_strtod_l+0x644>
 800bf22:	f1ba 0f01 	cmp.w	sl, #1
 800bf26:	d103      	bne.n	800bf30 <_strtod_l+0xa20>
 800bf28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f43f ada5 	beq.w	800ba7a <_strtod_l+0x56a>
 800bf30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bfe0 <_strtod_l+0xad0>
 800bf34:	4f35      	ldr	r7, [pc, #212]	@ (800c00c <_strtod_l+0xafc>)
 800bf36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf3a:	2600      	movs	r6, #0
 800bf3c:	e7b1      	b.n	800bea2 <_strtod_l+0x992>
 800bf3e:	4f34      	ldr	r7, [pc, #208]	@ (800c010 <_strtod_l+0xb00>)
 800bf40:	2600      	movs	r6, #0
 800bf42:	e7aa      	b.n	800be9a <_strtod_l+0x98a>
 800bf44:	4b32      	ldr	r3, [pc, #200]	@ (800c010 <_strtod_l+0xb00>)
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f7f4 fb74 	bl	8000638 <__aeabi_dmul>
 800bf50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d09f      	beq.n	800be9a <_strtod_l+0x98a>
 800bf5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf5e:	e7a0      	b.n	800bea2 <_strtod_l+0x992>
 800bf60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bfe8 <_strtod_l+0xad8>
 800bf64:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf68:	ec57 6b17 	vmov	r6, r7, d7
 800bf6c:	e799      	b.n	800bea2 <_strtod_l+0x992>
 800bf6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf72:	9b08      	ldr	r3, [sp, #32]
 800bf74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1c1      	bne.n	800bf00 <_strtod_l+0x9f0>
 800bf7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf80:	0d1b      	lsrs	r3, r3, #20
 800bf82:	051b      	lsls	r3, r3, #20
 800bf84:	429d      	cmp	r5, r3
 800bf86:	d1bb      	bne.n	800bf00 <_strtod_l+0x9f0>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	f7f4 feb4 	bl	8000cf8 <__aeabi_d2lz>
 800bf90:	f7f4 fb24 	bl	80005dc <__aeabi_l2d>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f7f4 f994 	bl	80002c8 <__aeabi_dsub>
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bfa8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bfac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfae:	ea46 060a 	orr.w	r6, r6, sl
 800bfb2:	431e      	orrs	r6, r3
 800bfb4:	d06f      	beq.n	800c096 <_strtod_l+0xb86>
 800bfb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bff0 <_strtod_l+0xae0>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 fdae 	bl	8000b1c <__aeabi_dcmplt>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	f47f accf 	bne.w	800b964 <_strtod_l+0x454>
 800bfc6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bff8 <_strtod_l+0xae8>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfd0:	f7f4 fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d093      	beq.n	800bf00 <_strtod_l+0x9f0>
 800bfd8:	e4c4      	b.n	800b964 <_strtod_l+0x454>
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	00000000 	.word	0x00000000
 800bfe4:	bff00000 	.word	0xbff00000
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	3ff00000 	.word	0x3ff00000
 800bff0:	94a03595 	.word	0x94a03595
 800bff4:	3fdfffff 	.word	0x3fdfffff
 800bff8:	35afe535 	.word	0x35afe535
 800bffc:	3fe00000 	.word	0x3fe00000
 800c000:	000fffff 	.word	0x000fffff
 800c004:	7ff00000 	.word	0x7ff00000
 800c008:	7fefffff 	.word	0x7fefffff
 800c00c:	3ff00000 	.word	0x3ff00000
 800c010:	3fe00000 	.word	0x3fe00000
 800c014:	7fe00000 	.word	0x7fe00000
 800c018:	7c9fffff 	.word	0x7c9fffff
 800c01c:	9b08      	ldr	r3, [sp, #32]
 800c01e:	b323      	cbz	r3, 800c06a <_strtod_l+0xb5a>
 800c020:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c024:	d821      	bhi.n	800c06a <_strtod_l+0xb5a>
 800c026:	a328      	add	r3, pc, #160	@ (adr r3, 800c0c8 <_strtod_l+0xbb8>)
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	f7f4 fd7e 	bl	8000b30 <__aeabi_dcmple>
 800c034:	b1a0      	cbz	r0, 800c060 <_strtod_l+0xb50>
 800c036:	4639      	mov	r1, r7
 800c038:	4630      	mov	r0, r6
 800c03a:	f7f4 fdd5 	bl	8000be8 <__aeabi_d2uiz>
 800c03e:	2801      	cmp	r0, #1
 800c040:	bf38      	it	cc
 800c042:	2001      	movcc	r0, #1
 800c044:	f7f4 fa7e 	bl	8000544 <__aeabi_ui2d>
 800c048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	b9fb      	cbnz	r3, 800c090 <_strtod_l+0xb80>
 800c050:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c054:	9014      	str	r0, [sp, #80]	@ 0x50
 800c056:	9315      	str	r3, [sp, #84]	@ 0x54
 800c058:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c05c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c060:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c062:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c066:	1b5b      	subs	r3, r3, r5
 800c068:	9311      	str	r3, [sp, #68]	@ 0x44
 800c06a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c06e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c072:	f002 f901 	bl	800e278 <__ulp>
 800c076:	4650      	mov	r0, sl
 800c078:	ec53 2b10 	vmov	r2, r3, d0
 800c07c:	4659      	mov	r1, fp
 800c07e:	f7f4 fadb 	bl	8000638 <__aeabi_dmul>
 800c082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c086:	f7f4 f921 	bl	80002cc <__adddf3>
 800c08a:	4682      	mov	sl, r0
 800c08c:	468b      	mov	fp, r1
 800c08e:	e770      	b.n	800bf72 <_strtod_l+0xa62>
 800c090:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c094:	e7e0      	b.n	800c058 <_strtod_l+0xb48>
 800c096:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0d0 <_strtod_l+0xbc0>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 fd3e 	bl	8000b1c <__aeabi_dcmplt>
 800c0a0:	e798      	b.n	800bfd4 <_strtod_l+0xac4>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c0a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	f7ff ba6d 	b.w	800b58a <_strtod_l+0x7a>
 800c0b0:	2a65      	cmp	r2, #101	@ 0x65
 800c0b2:	f43f ab66 	beq.w	800b782 <_strtod_l+0x272>
 800c0b6:	2a45      	cmp	r2, #69	@ 0x45
 800c0b8:	f43f ab63 	beq.w	800b782 <_strtod_l+0x272>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f7ff bb9e 	b.w	800b7fe <_strtod_l+0x2ee>
 800c0c2:	bf00      	nop
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	ffc00000 	.word	0xffc00000
 800c0cc:	41dfffff 	.word	0x41dfffff
 800c0d0:	94a03595 	.word	0x94a03595
 800c0d4:	3fcfffff 	.word	0x3fcfffff

0800c0d8 <_strtod_r>:
 800c0d8:	4b01      	ldr	r3, [pc, #4]	@ (800c0e0 <_strtod_r+0x8>)
 800c0da:	f7ff ba19 	b.w	800b510 <_strtod_l>
 800c0de:	bf00      	nop
 800c0e0:	20000034 	.word	0x20000034

0800c0e4 <_strtol_l.constprop.0>:
 800c0e4:	2b24      	cmp	r3, #36	@ 0x24
 800c0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ea:	4686      	mov	lr, r0
 800c0ec:	4690      	mov	r8, r2
 800c0ee:	d801      	bhi.n	800c0f4 <_strtol_l.constprop.0+0x10>
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d106      	bne.n	800c102 <_strtol_l.constprop.0+0x1e>
 800c0f4:	f000 f8ae 	bl	800c254 <__errno>
 800c0f8:	2316      	movs	r3, #22
 800c0fa:	6003      	str	r3, [r0, #0]
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c102:	4834      	ldr	r0, [pc, #208]	@ (800c1d4 <_strtol_l.constprop.0+0xf0>)
 800c104:	460d      	mov	r5, r1
 800c106:	462a      	mov	r2, r5
 800c108:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c10c:	5d06      	ldrb	r6, [r0, r4]
 800c10e:	f016 0608 	ands.w	r6, r6, #8
 800c112:	d1f8      	bne.n	800c106 <_strtol_l.constprop.0+0x22>
 800c114:	2c2d      	cmp	r4, #45	@ 0x2d
 800c116:	d12d      	bne.n	800c174 <_strtol_l.constprop.0+0x90>
 800c118:	782c      	ldrb	r4, [r5, #0]
 800c11a:	2601      	movs	r6, #1
 800c11c:	1c95      	adds	r5, r2, #2
 800c11e:	f033 0210 	bics.w	r2, r3, #16
 800c122:	d109      	bne.n	800c138 <_strtol_l.constprop.0+0x54>
 800c124:	2c30      	cmp	r4, #48	@ 0x30
 800c126:	d12a      	bne.n	800c17e <_strtol_l.constprop.0+0x9a>
 800c128:	782a      	ldrb	r2, [r5, #0]
 800c12a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c12e:	2a58      	cmp	r2, #88	@ 0x58
 800c130:	d125      	bne.n	800c17e <_strtol_l.constprop.0+0x9a>
 800c132:	786c      	ldrb	r4, [r5, #1]
 800c134:	2310      	movs	r3, #16
 800c136:	3502      	adds	r5, #2
 800c138:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c13c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c140:	2200      	movs	r2, #0
 800c142:	fbbc f9f3 	udiv	r9, ip, r3
 800c146:	4610      	mov	r0, r2
 800c148:	fb03 ca19 	mls	sl, r3, r9, ip
 800c14c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c150:	2f09      	cmp	r7, #9
 800c152:	d81b      	bhi.n	800c18c <_strtol_l.constprop.0+0xa8>
 800c154:	463c      	mov	r4, r7
 800c156:	42a3      	cmp	r3, r4
 800c158:	dd27      	ble.n	800c1aa <_strtol_l.constprop.0+0xc6>
 800c15a:	1c57      	adds	r7, r2, #1
 800c15c:	d007      	beq.n	800c16e <_strtol_l.constprop.0+0x8a>
 800c15e:	4581      	cmp	r9, r0
 800c160:	d320      	bcc.n	800c1a4 <_strtol_l.constprop.0+0xc0>
 800c162:	d101      	bne.n	800c168 <_strtol_l.constprop.0+0x84>
 800c164:	45a2      	cmp	sl, r4
 800c166:	db1d      	blt.n	800c1a4 <_strtol_l.constprop.0+0xc0>
 800c168:	fb00 4003 	mla	r0, r0, r3, r4
 800c16c:	2201      	movs	r2, #1
 800c16e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c172:	e7eb      	b.n	800c14c <_strtol_l.constprop.0+0x68>
 800c174:	2c2b      	cmp	r4, #43	@ 0x2b
 800c176:	bf04      	itt	eq
 800c178:	782c      	ldrbeq	r4, [r5, #0]
 800c17a:	1c95      	addeq	r5, r2, #2
 800c17c:	e7cf      	b.n	800c11e <_strtol_l.constprop.0+0x3a>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1da      	bne.n	800c138 <_strtol_l.constprop.0+0x54>
 800c182:	2c30      	cmp	r4, #48	@ 0x30
 800c184:	bf0c      	ite	eq
 800c186:	2308      	moveq	r3, #8
 800c188:	230a      	movne	r3, #10
 800c18a:	e7d5      	b.n	800c138 <_strtol_l.constprop.0+0x54>
 800c18c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c190:	2f19      	cmp	r7, #25
 800c192:	d801      	bhi.n	800c198 <_strtol_l.constprop.0+0xb4>
 800c194:	3c37      	subs	r4, #55	@ 0x37
 800c196:	e7de      	b.n	800c156 <_strtol_l.constprop.0+0x72>
 800c198:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c19c:	2f19      	cmp	r7, #25
 800c19e:	d804      	bhi.n	800c1aa <_strtol_l.constprop.0+0xc6>
 800c1a0:	3c57      	subs	r4, #87	@ 0x57
 800c1a2:	e7d8      	b.n	800c156 <_strtol_l.constprop.0+0x72>
 800c1a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1a8:	e7e1      	b.n	800c16e <_strtol_l.constprop.0+0x8a>
 800c1aa:	1c53      	adds	r3, r2, #1
 800c1ac:	d108      	bne.n	800c1c0 <_strtol_l.constprop.0+0xdc>
 800c1ae:	2322      	movs	r3, #34	@ 0x22
 800c1b0:	f8ce 3000 	str.w	r3, [lr]
 800c1b4:	4660      	mov	r0, ip
 800c1b6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ba:	d0a0      	beq.n	800c0fe <_strtol_l.constprop.0+0x1a>
 800c1bc:	1e69      	subs	r1, r5, #1
 800c1be:	e006      	b.n	800c1ce <_strtol_l.constprop.0+0xea>
 800c1c0:	b106      	cbz	r6, 800c1c4 <_strtol_l.constprop.0+0xe0>
 800c1c2:	4240      	negs	r0, r0
 800c1c4:	f1b8 0f00 	cmp.w	r8, #0
 800c1c8:	d099      	beq.n	800c0fe <_strtol_l.constprop.0+0x1a>
 800c1ca:	2a00      	cmp	r2, #0
 800c1cc:	d1f6      	bne.n	800c1bc <_strtol_l.constprop.0+0xd8>
 800c1ce:	f8c8 1000 	str.w	r1, [r8]
 800c1d2:	e794      	b.n	800c0fe <_strtol_l.constprop.0+0x1a>
 800c1d4:	0800f309 	.word	0x0800f309

0800c1d8 <_strtol_r>:
 800c1d8:	f7ff bf84 	b.w	800c0e4 <_strtol_l.constprop.0>

0800c1dc <_fwalk_sglue>:
 800c1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	4688      	mov	r8, r1
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	2600      	movs	r6, #0
 800c1e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c1f0:	d505      	bpl.n	800c1fe <_fwalk_sglue+0x22>
 800c1f2:	6824      	ldr	r4, [r4, #0]
 800c1f4:	2c00      	cmp	r4, #0
 800c1f6:	d1f7      	bne.n	800c1e8 <_fwalk_sglue+0xc>
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1fe:	89ab      	ldrh	r3, [r5, #12]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d907      	bls.n	800c214 <_fwalk_sglue+0x38>
 800c204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c208:	3301      	adds	r3, #1
 800c20a:	d003      	beq.n	800c214 <_fwalk_sglue+0x38>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4638      	mov	r0, r7
 800c210:	47c0      	blx	r8
 800c212:	4306      	orrs	r6, r0
 800c214:	3568      	adds	r5, #104	@ 0x68
 800c216:	e7e9      	b.n	800c1ec <_fwalk_sglue+0x10>

0800c218 <strncmp>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	b16a      	cbz	r2, 800c238 <strncmp+0x20>
 800c21c:	3901      	subs	r1, #1
 800c21e:	1884      	adds	r4, r0, r2
 800c220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c224:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c228:	429a      	cmp	r2, r3
 800c22a:	d103      	bne.n	800c234 <strncmp+0x1c>
 800c22c:	42a0      	cmp	r0, r4
 800c22e:	d001      	beq.n	800c234 <strncmp+0x1c>
 800c230:	2a00      	cmp	r2, #0
 800c232:	d1f5      	bne.n	800c220 <strncmp+0x8>
 800c234:	1ad0      	subs	r0, r2, r3
 800c236:	bd10      	pop	{r4, pc}
 800c238:	4610      	mov	r0, r2
 800c23a:	e7fc      	b.n	800c236 <strncmp+0x1e>

0800c23c <memset>:
 800c23c:	4402      	add	r2, r0
 800c23e:	4603      	mov	r3, r0
 800c240:	4293      	cmp	r3, r2
 800c242:	d100      	bne.n	800c246 <memset+0xa>
 800c244:	4770      	bx	lr
 800c246:	f803 1b01 	strb.w	r1, [r3], #1
 800c24a:	e7f9      	b.n	800c240 <memset+0x4>

0800c24c <_localeconv_r>:
 800c24c:	4800      	ldr	r0, [pc, #0]	@ (800c250 <_localeconv_r+0x4>)
 800c24e:	4770      	bx	lr
 800c250:	20000124 	.word	0x20000124

0800c254 <__errno>:
 800c254:	4b01      	ldr	r3, [pc, #4]	@ (800c25c <__errno+0x8>)
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	200001a0 	.word	0x200001a0

0800c260 <__libc_init_array>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4d0d      	ldr	r5, [pc, #52]	@ (800c298 <__libc_init_array+0x38>)
 800c264:	4c0d      	ldr	r4, [pc, #52]	@ (800c29c <__libc_init_array+0x3c>)
 800c266:	1b64      	subs	r4, r4, r5
 800c268:	10a4      	asrs	r4, r4, #2
 800c26a:	2600      	movs	r6, #0
 800c26c:	42a6      	cmp	r6, r4
 800c26e:	d109      	bne.n	800c284 <__libc_init_array+0x24>
 800c270:	4d0b      	ldr	r5, [pc, #44]	@ (800c2a0 <__libc_init_array+0x40>)
 800c272:	4c0c      	ldr	r4, [pc, #48]	@ (800c2a4 <__libc_init_array+0x44>)
 800c274:	f002 fd8a 	bl	800ed8c <_init>
 800c278:	1b64      	subs	r4, r4, r5
 800c27a:	10a4      	asrs	r4, r4, #2
 800c27c:	2600      	movs	r6, #0
 800c27e:	42a6      	cmp	r6, r4
 800c280:	d105      	bne.n	800c28e <__libc_init_array+0x2e>
 800c282:	bd70      	pop	{r4, r5, r6, pc}
 800c284:	f855 3b04 	ldr.w	r3, [r5], #4
 800c288:	4798      	blx	r3
 800c28a:	3601      	adds	r6, #1
 800c28c:	e7ee      	b.n	800c26c <__libc_init_array+0xc>
 800c28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c292:	4798      	blx	r3
 800c294:	3601      	adds	r6, #1
 800c296:	e7f2      	b.n	800c27e <__libc_init_array+0x1e>
 800c298:	0800f6a4 	.word	0x0800f6a4
 800c29c:	0800f6a4 	.word	0x0800f6a4
 800c2a0:	0800f6a4 	.word	0x0800f6a4
 800c2a4:	0800f6a8 	.word	0x0800f6a8

0800c2a8 <__retarget_lock_init_recursive>:
 800c2a8:	4770      	bx	lr

0800c2aa <__retarget_lock_acquire_recursive>:
 800c2aa:	4770      	bx	lr

0800c2ac <__retarget_lock_release_recursive>:
 800c2ac:	4770      	bx	lr

0800c2ae <memcpy>:
 800c2ae:	440a      	add	r2, r1
 800c2b0:	4291      	cmp	r1, r2
 800c2b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c2b6:	d100      	bne.n	800c2ba <memcpy+0xc>
 800c2b8:	4770      	bx	lr
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2c4:	4291      	cmp	r1, r2
 800c2c6:	d1f9      	bne.n	800c2bc <memcpy+0xe>
 800c2c8:	bd10      	pop	{r4, pc}
 800c2ca:	0000      	movs	r0, r0
 800c2cc:	0000      	movs	r0, r0
	...

0800c2d0 <nan>:
 800c2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c2d8 <nan+0x8>
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	00000000 	.word	0x00000000
 800c2dc:	7ff80000 	.word	0x7ff80000

0800c2e0 <nanf>:
 800c2e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c2e8 <nanf+0x8>
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	7fc00000 	.word	0x7fc00000

0800c2ec <quorem>:
 800c2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	6903      	ldr	r3, [r0, #16]
 800c2f2:	690c      	ldr	r4, [r1, #16]
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	db7e      	blt.n	800c3f8 <quorem+0x10c>
 800c2fa:	3c01      	subs	r4, #1
 800c2fc:	f101 0814 	add.w	r8, r1, #20
 800c300:	00a3      	lsls	r3, r4, #2
 800c302:	f100 0514 	add.w	r5, r0, #20
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c316:	3301      	adds	r3, #1
 800c318:	429a      	cmp	r2, r3
 800c31a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c31e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c322:	d32e      	bcc.n	800c382 <quorem+0x96>
 800c324:	f04f 0a00 	mov.w	sl, #0
 800c328:	46c4      	mov	ip, r8
 800c32a:	46ae      	mov	lr, r5
 800c32c:	46d3      	mov	fp, sl
 800c32e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c332:	b298      	uxth	r0, r3
 800c334:	fb06 a000 	mla	r0, r6, r0, sl
 800c338:	0c02      	lsrs	r2, r0, #16
 800c33a:	0c1b      	lsrs	r3, r3, #16
 800c33c:	fb06 2303 	mla	r3, r6, r3, r2
 800c340:	f8de 2000 	ldr.w	r2, [lr]
 800c344:	b280      	uxth	r0, r0
 800c346:	b292      	uxth	r2, r2
 800c348:	1a12      	subs	r2, r2, r0
 800c34a:	445a      	add	r2, fp
 800c34c:	f8de 0000 	ldr.w	r0, [lr]
 800c350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c354:	b29b      	uxth	r3, r3
 800c356:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c35a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c35e:	b292      	uxth	r2, r2
 800c360:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c364:	45e1      	cmp	r9, ip
 800c366:	f84e 2b04 	str.w	r2, [lr], #4
 800c36a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c36e:	d2de      	bcs.n	800c32e <quorem+0x42>
 800c370:	9b00      	ldr	r3, [sp, #0]
 800c372:	58eb      	ldr	r3, [r5, r3]
 800c374:	b92b      	cbnz	r3, 800c382 <quorem+0x96>
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	3b04      	subs	r3, #4
 800c37a:	429d      	cmp	r5, r3
 800c37c:	461a      	mov	r2, r3
 800c37e:	d32f      	bcc.n	800c3e0 <quorem+0xf4>
 800c380:	613c      	str	r4, [r7, #16]
 800c382:	4638      	mov	r0, r7
 800c384:	f001 fec8 	bl	800e118 <__mcmp>
 800c388:	2800      	cmp	r0, #0
 800c38a:	db25      	blt.n	800c3d8 <quorem+0xec>
 800c38c:	4629      	mov	r1, r5
 800c38e:	2000      	movs	r0, #0
 800c390:	f858 2b04 	ldr.w	r2, [r8], #4
 800c394:	f8d1 c000 	ldr.w	ip, [r1]
 800c398:	fa1f fe82 	uxth.w	lr, r2
 800c39c:	fa1f f38c 	uxth.w	r3, ip
 800c3a0:	eba3 030e 	sub.w	r3, r3, lr
 800c3a4:	4403      	add	r3, r0
 800c3a6:	0c12      	lsrs	r2, r2, #16
 800c3a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c3ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3b6:	45c1      	cmp	r9, r8
 800c3b8:	f841 3b04 	str.w	r3, [r1], #4
 800c3bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3c0:	d2e6      	bcs.n	800c390 <quorem+0xa4>
 800c3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3ca:	b922      	cbnz	r2, 800c3d6 <quorem+0xea>
 800c3cc:	3b04      	subs	r3, #4
 800c3ce:	429d      	cmp	r5, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	d30b      	bcc.n	800c3ec <quorem+0x100>
 800c3d4:	613c      	str	r4, [r7, #16]
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	b003      	add	sp, #12
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	3b04      	subs	r3, #4
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	d1cb      	bne.n	800c380 <quorem+0x94>
 800c3e8:	3c01      	subs	r4, #1
 800c3ea:	e7c6      	b.n	800c37a <quorem+0x8e>
 800c3ec:	6812      	ldr	r2, [r2, #0]
 800c3ee:	3b04      	subs	r3, #4
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	d1ef      	bne.n	800c3d4 <quorem+0xe8>
 800c3f4:	3c01      	subs	r4, #1
 800c3f6:	e7ea      	b.n	800c3ce <quorem+0xe2>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7ee      	b.n	800c3da <quorem+0xee>
 800c3fc:	0000      	movs	r0, r0
	...

0800c400 <_dtoa_r>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	69c7      	ldr	r7, [r0, #28]
 800c406:	b099      	sub	sp, #100	@ 0x64
 800c408:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c40c:	ec55 4b10 	vmov	r4, r5, d0
 800c410:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c412:	9109      	str	r1, [sp, #36]	@ 0x24
 800c414:	4683      	mov	fp, r0
 800c416:	920e      	str	r2, [sp, #56]	@ 0x38
 800c418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c41a:	b97f      	cbnz	r7, 800c43c <_dtoa_r+0x3c>
 800c41c:	2010      	movs	r0, #16
 800c41e:	f001 fa43 	bl	800d8a8 <malloc>
 800c422:	4602      	mov	r2, r0
 800c424:	f8cb 001c 	str.w	r0, [fp, #28]
 800c428:	b920      	cbnz	r0, 800c434 <_dtoa_r+0x34>
 800c42a:	4ba7      	ldr	r3, [pc, #668]	@ (800c6c8 <_dtoa_r+0x2c8>)
 800c42c:	21ef      	movs	r1, #239	@ 0xef
 800c42e:	48a7      	ldr	r0, [pc, #668]	@ (800c6cc <_dtoa_r+0x2cc>)
 800c430:	f002 f94e 	bl	800e6d0 <__assert_func>
 800c434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c438:	6007      	str	r7, [r0, #0]
 800c43a:	60c7      	str	r7, [r0, #12]
 800c43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c440:	6819      	ldr	r1, [r3, #0]
 800c442:	b159      	cbz	r1, 800c45c <_dtoa_r+0x5c>
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	604a      	str	r2, [r1, #4]
 800c448:	2301      	movs	r3, #1
 800c44a:	4093      	lsls	r3, r2
 800c44c:	608b      	str	r3, [r1, #8]
 800c44e:	4658      	mov	r0, fp
 800c450:	f001 fbde 	bl	800dc10 <_Bfree>
 800c454:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	1e2b      	subs	r3, r5, #0
 800c45e:	bfb9      	ittee	lt
 800c460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c464:	9303      	strlt	r3, [sp, #12]
 800c466:	2300      	movge	r3, #0
 800c468:	6033      	strge	r3, [r6, #0]
 800c46a:	9f03      	ldr	r7, [sp, #12]
 800c46c:	4b98      	ldr	r3, [pc, #608]	@ (800c6d0 <_dtoa_r+0x2d0>)
 800c46e:	bfbc      	itt	lt
 800c470:	2201      	movlt	r2, #1
 800c472:	6032      	strlt	r2, [r6, #0]
 800c474:	43bb      	bics	r3, r7
 800c476:	d112      	bne.n	800c49e <_dtoa_r+0x9e>
 800c478:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c47a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c484:	4323      	orrs	r3, r4
 800c486:	f000 854d 	beq.w	800cf24 <_dtoa_r+0xb24>
 800c48a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c48c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c6e4 <_dtoa_r+0x2e4>
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 854f 	beq.w	800cf34 <_dtoa_r+0xb34>
 800c496:	f10a 0303 	add.w	r3, sl, #3
 800c49a:	f000 bd49 	b.w	800cf30 <_dtoa_r+0xb30>
 800c49e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	ec51 0b17 	vmov	r0, r1, d7
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c4ae:	f7f4 fb2b 	bl	8000b08 <__aeabi_dcmpeq>
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	b158      	cbz	r0, 800c4ce <_dtoa_r+0xce>
 800c4b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4be:	b113      	cbz	r3, 800c4c6 <_dtoa_r+0xc6>
 800c4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c4c2:	4b84      	ldr	r3, [pc, #528]	@ (800c6d4 <_dtoa_r+0x2d4>)
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c6e8 <_dtoa_r+0x2e8>
 800c4ca:	f000 bd33 	b.w	800cf34 <_dtoa_r+0xb34>
 800c4ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4d2:	aa16      	add	r2, sp, #88	@ 0x58
 800c4d4:	a917      	add	r1, sp, #92	@ 0x5c
 800c4d6:	4658      	mov	r0, fp
 800c4d8:	f001 ff3e 	bl	800e358 <__d2b>
 800c4dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c4e0:	4681      	mov	r9, r0
 800c4e2:	2e00      	cmp	r6, #0
 800c4e4:	d077      	beq.n	800c5d6 <_dtoa_r+0x1d6>
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c4ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c4f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c4fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c500:	4619      	mov	r1, r3
 800c502:	2200      	movs	r2, #0
 800c504:	4b74      	ldr	r3, [pc, #464]	@ (800c6d8 <_dtoa_r+0x2d8>)
 800c506:	f7f3 fedf 	bl	80002c8 <__aeabi_dsub>
 800c50a:	a369      	add	r3, pc, #420	@ (adr r3, 800c6b0 <_dtoa_r+0x2b0>)
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f4 f892 	bl	8000638 <__aeabi_dmul>
 800c514:	a368      	add	r3, pc, #416	@ (adr r3, 800c6b8 <_dtoa_r+0x2b8>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 fed7 	bl	80002cc <__adddf3>
 800c51e:	4604      	mov	r4, r0
 800c520:	4630      	mov	r0, r6
 800c522:	460d      	mov	r5, r1
 800c524:	f7f4 f81e 	bl	8000564 <__aeabi_i2d>
 800c528:	a365      	add	r3, pc, #404	@ (adr r3, 800c6c0 <_dtoa_r+0x2c0>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	f7f4 f883 	bl	8000638 <__aeabi_dmul>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f3 fec7 	bl	80002cc <__adddf3>
 800c53e:	4604      	mov	r4, r0
 800c540:	460d      	mov	r5, r1
 800c542:	f7f4 fb29 	bl	8000b98 <__aeabi_d2iz>
 800c546:	2200      	movs	r2, #0
 800c548:	4607      	mov	r7, r0
 800c54a:	2300      	movs	r3, #0
 800c54c:	4620      	mov	r0, r4
 800c54e:	4629      	mov	r1, r5
 800c550:	f7f4 fae4 	bl	8000b1c <__aeabi_dcmplt>
 800c554:	b140      	cbz	r0, 800c568 <_dtoa_r+0x168>
 800c556:	4638      	mov	r0, r7
 800c558:	f7f4 f804 	bl	8000564 <__aeabi_i2d>
 800c55c:	4622      	mov	r2, r4
 800c55e:	462b      	mov	r3, r5
 800c560:	f7f4 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 800c564:	b900      	cbnz	r0, 800c568 <_dtoa_r+0x168>
 800c566:	3f01      	subs	r7, #1
 800c568:	2f16      	cmp	r7, #22
 800c56a:	d851      	bhi.n	800c610 <_dtoa_r+0x210>
 800c56c:	4b5b      	ldr	r3, [pc, #364]	@ (800c6dc <_dtoa_r+0x2dc>)
 800c56e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c57a:	f7f4 facf 	bl	8000b1c <__aeabi_dcmplt>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d048      	beq.n	800c614 <_dtoa_r+0x214>
 800c582:	3f01      	subs	r7, #1
 800c584:	2300      	movs	r3, #0
 800c586:	9312      	str	r3, [sp, #72]	@ 0x48
 800c588:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c58a:	1b9b      	subs	r3, r3, r6
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	bf44      	itt	mi
 800c590:	f1c3 0801 	rsbmi	r8, r3, #1
 800c594:	2300      	movmi	r3, #0
 800c596:	9208      	str	r2, [sp, #32]
 800c598:	bf54      	ite	pl
 800c59a:	f04f 0800 	movpl.w	r8, #0
 800c59e:	9308      	strmi	r3, [sp, #32]
 800c5a0:	2f00      	cmp	r7, #0
 800c5a2:	db39      	blt.n	800c618 <_dtoa_r+0x218>
 800c5a4:	9b08      	ldr	r3, [sp, #32]
 800c5a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c5a8:	443b      	add	r3, r7
 800c5aa:	9308      	str	r3, [sp, #32]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b2:	2b09      	cmp	r3, #9
 800c5b4:	d864      	bhi.n	800c680 <_dtoa_r+0x280>
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	bfc4      	itt	gt
 800c5ba:	3b04      	subgt	r3, #4
 800c5bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	f1a3 0302 	sub.w	r3, r3, #2
 800c5c4:	bfcc      	ite	gt
 800c5c6:	2400      	movgt	r4, #0
 800c5c8:	2401      	movle	r4, #1
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d863      	bhi.n	800c696 <_dtoa_r+0x296>
 800c5ce:	e8df f003 	tbb	[pc, r3]
 800c5d2:	372a      	.short	0x372a
 800c5d4:	5535      	.short	0x5535
 800c5d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c5da:	441e      	add	r6, r3
 800c5dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	bfc1      	itttt	gt
 800c5e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c5e8:	409f      	lslgt	r7, r3
 800c5ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c5ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c5f2:	bfd6      	itet	le
 800c5f4:	f1c3 0320 	rsble	r3, r3, #32
 800c5f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c5fc:	fa04 f003 	lslle.w	r0, r4, r3
 800c600:	f7f3 ffa0 	bl	8000544 <__aeabi_ui2d>
 800c604:	2201      	movs	r2, #1
 800c606:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c60a:	3e01      	subs	r6, #1
 800c60c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c60e:	e777      	b.n	800c500 <_dtoa_r+0x100>
 800c610:	2301      	movs	r3, #1
 800c612:	e7b8      	b.n	800c586 <_dtoa_r+0x186>
 800c614:	9012      	str	r0, [sp, #72]	@ 0x48
 800c616:	e7b7      	b.n	800c588 <_dtoa_r+0x188>
 800c618:	427b      	negs	r3, r7
 800c61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c61c:	2300      	movs	r3, #0
 800c61e:	eba8 0807 	sub.w	r8, r8, r7
 800c622:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c624:	e7c4      	b.n	800c5b0 <_dtoa_r+0x1b0>
 800c626:	2300      	movs	r3, #0
 800c628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	dc35      	bgt.n	800c69c <_dtoa_r+0x29c>
 800c630:	2301      	movs	r3, #1
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	9307      	str	r3, [sp, #28]
 800c636:	461a      	mov	r2, r3
 800c638:	920e      	str	r2, [sp, #56]	@ 0x38
 800c63a:	e00b      	b.n	800c654 <_dtoa_r+0x254>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e7f3      	b.n	800c628 <_dtoa_r+0x228>
 800c640:	2300      	movs	r3, #0
 800c642:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c646:	18fb      	adds	r3, r7, r3
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	3301      	adds	r3, #1
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	bfb8      	it	lt
 800c652:	2301      	movlt	r3, #1
 800c654:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c658:	2100      	movs	r1, #0
 800c65a:	2204      	movs	r2, #4
 800c65c:	f102 0514 	add.w	r5, r2, #20
 800c660:	429d      	cmp	r5, r3
 800c662:	d91f      	bls.n	800c6a4 <_dtoa_r+0x2a4>
 800c664:	6041      	str	r1, [r0, #4]
 800c666:	4658      	mov	r0, fp
 800c668:	f001 fa92 	bl	800db90 <_Balloc>
 800c66c:	4682      	mov	sl, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d13c      	bne.n	800c6ec <_dtoa_r+0x2ec>
 800c672:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e0 <_dtoa_r+0x2e0>)
 800c674:	4602      	mov	r2, r0
 800c676:	f240 11af 	movw	r1, #431	@ 0x1af
 800c67a:	e6d8      	b.n	800c42e <_dtoa_r+0x2e>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e7e0      	b.n	800c642 <_dtoa_r+0x242>
 800c680:	2401      	movs	r4, #1
 800c682:	2300      	movs	r3, #0
 800c684:	9309      	str	r3, [sp, #36]	@ 0x24
 800c686:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	2200      	movs	r2, #0
 800c692:	2312      	movs	r3, #18
 800c694:	e7d0      	b.n	800c638 <_dtoa_r+0x238>
 800c696:	2301      	movs	r3, #1
 800c698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c69a:	e7f5      	b.n	800c688 <_dtoa_r+0x288>
 800c69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	9307      	str	r3, [sp, #28]
 800c6a2:	e7d7      	b.n	800c654 <_dtoa_r+0x254>
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	0052      	lsls	r2, r2, #1
 800c6a8:	e7d8      	b.n	800c65c <_dtoa_r+0x25c>
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	636f4361 	.word	0x636f4361
 800c6b4:	3fd287a7 	.word	0x3fd287a7
 800c6b8:	8b60c8b3 	.word	0x8b60c8b3
 800c6bc:	3fc68a28 	.word	0x3fc68a28
 800c6c0:	509f79fb 	.word	0x509f79fb
 800c6c4:	3fd34413 	.word	0x3fd34413
 800c6c8:	0800f416 	.word	0x0800f416
 800c6cc:	0800f42d 	.word	0x0800f42d
 800c6d0:	7ff00000 	.word	0x7ff00000
 800c6d4:	0800f281 	.word	0x0800f281
 800c6d8:	3ff80000 	.word	0x3ff80000
 800c6dc:	0800f598 	.word	0x0800f598
 800c6e0:	0800f485 	.word	0x0800f485
 800c6e4:	0800f412 	.word	0x0800f412
 800c6e8:	0800f280 	.word	0x0800f280
 800c6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6f0:	6018      	str	r0, [r3, #0]
 800c6f2:	9b07      	ldr	r3, [sp, #28]
 800c6f4:	2b0e      	cmp	r3, #14
 800c6f6:	f200 80a4 	bhi.w	800c842 <_dtoa_r+0x442>
 800c6fa:	2c00      	cmp	r4, #0
 800c6fc:	f000 80a1 	beq.w	800c842 <_dtoa_r+0x442>
 800c700:	2f00      	cmp	r7, #0
 800c702:	dd33      	ble.n	800c76c <_dtoa_r+0x36c>
 800c704:	4bad      	ldr	r3, [pc, #692]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c706:	f007 020f 	and.w	r2, r7, #15
 800c70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70e:	ed93 7b00 	vldr	d7, [r3]
 800c712:	05f8      	lsls	r0, r7, #23
 800c714:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c71c:	d516      	bpl.n	800c74c <_dtoa_r+0x34c>
 800c71e:	4ba8      	ldr	r3, [pc, #672]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c728:	f7f4 f8b0 	bl	800088c <__aeabi_ddiv>
 800c72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c730:	f004 040f 	and.w	r4, r4, #15
 800c734:	2603      	movs	r6, #3
 800c736:	4da2      	ldr	r5, [pc, #648]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c738:	b954      	cbnz	r4, 800c750 <_dtoa_r+0x350>
 800c73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c742:	f7f4 f8a3 	bl	800088c <__aeabi_ddiv>
 800c746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c74a:	e028      	b.n	800c79e <_dtoa_r+0x39e>
 800c74c:	2602      	movs	r6, #2
 800c74e:	e7f2      	b.n	800c736 <_dtoa_r+0x336>
 800c750:	07e1      	lsls	r1, r4, #31
 800c752:	d508      	bpl.n	800c766 <_dtoa_r+0x366>
 800c754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c75c:	f7f3 ff6c 	bl	8000638 <__aeabi_dmul>
 800c760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c764:	3601      	adds	r6, #1
 800c766:	1064      	asrs	r4, r4, #1
 800c768:	3508      	adds	r5, #8
 800c76a:	e7e5      	b.n	800c738 <_dtoa_r+0x338>
 800c76c:	f000 80d2 	beq.w	800c914 <_dtoa_r+0x514>
 800c770:	427c      	negs	r4, r7
 800c772:	4b92      	ldr	r3, [pc, #584]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c774:	4d92      	ldr	r5, [pc, #584]	@ (800c9c0 <_dtoa_r+0x5c0>)
 800c776:	f004 020f 	and.w	r2, r4, #15
 800c77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c786:	f7f3 ff57 	bl	8000638 <__aeabi_dmul>
 800c78a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c78e:	1124      	asrs	r4, r4, #4
 800c790:	2300      	movs	r3, #0
 800c792:	2602      	movs	r6, #2
 800c794:	2c00      	cmp	r4, #0
 800c796:	f040 80b2 	bne.w	800c8fe <_dtoa_r+0x4fe>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1d3      	bne.n	800c746 <_dtoa_r+0x346>
 800c79e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 80b7 	beq.w	800c918 <_dtoa_r+0x518>
 800c7aa:	4b86      	ldr	r3, [pc, #536]	@ (800c9c4 <_dtoa_r+0x5c4>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f4 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f000 80ae 	beq.w	800c918 <_dtoa_r+0x518>
 800c7bc:	9b07      	ldr	r3, [sp, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f000 80aa 	beq.w	800c918 <_dtoa_r+0x518>
 800c7c4:	9b00      	ldr	r3, [sp, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	dd37      	ble.n	800c83a <_dtoa_r+0x43a>
 800c7ca:	1e7b      	subs	r3, r7, #1
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f3 ff2f 	bl	8000638 <__aeabi_dmul>
 800c7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7de:	9c00      	ldr	r4, [sp, #0]
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7f3 febe 	bl	8000564 <__aeabi_i2d>
 800c7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ec:	f7f3 ff24 	bl	8000638 <__aeabi_dmul>
 800c7f0:	4b76      	ldr	r3, [pc, #472]	@ (800c9cc <_dtoa_r+0x5cc>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f7f3 fd6a 	bl	80002cc <__adddf3>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c7fe:	2c00      	cmp	r4, #0
 800c800:	f040 808d 	bne.w	800c91e <_dtoa_r+0x51e>
 800c804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c808:	4b71      	ldr	r3, [pc, #452]	@ (800c9d0 <_dtoa_r+0x5d0>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fd5c 	bl	80002c8 <__aeabi_dsub>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c818:	462a      	mov	r2, r5
 800c81a:	4633      	mov	r3, r6
 800c81c:	f7f4 f99c 	bl	8000b58 <__aeabi_dcmpgt>
 800c820:	2800      	cmp	r0, #0
 800c822:	f040 828b 	bne.w	800cd3c <_dtoa_r+0x93c>
 800c826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c82a:	462a      	mov	r2, r5
 800c82c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c830:	f7f4 f974 	bl	8000b1c <__aeabi_dcmplt>
 800c834:	2800      	cmp	r0, #0
 800c836:	f040 8128 	bne.w	800ca8a <_dtoa_r+0x68a>
 800c83a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c83e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f2c0 815a 	blt.w	800cafe <_dtoa_r+0x6fe>
 800c84a:	2f0e      	cmp	r7, #14
 800c84c:	f300 8157 	bgt.w	800cafe <_dtoa_r+0x6fe>
 800c850:	4b5a      	ldr	r3, [pc, #360]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c852:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c856:	ed93 7b00 	vldr	d7, [r3]
 800c85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	ed8d 7b00 	vstr	d7, [sp]
 800c862:	da03      	bge.n	800c86c <_dtoa_r+0x46c>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	2b00      	cmp	r3, #0
 800c868:	f340 8101 	ble.w	800ca6e <_dtoa_r+0x66e>
 800c86c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c870:	4656      	mov	r6, sl
 800c872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f4 f807 	bl	800088c <__aeabi_ddiv>
 800c87e:	f7f4 f98b 	bl	8000b98 <__aeabi_d2iz>
 800c882:	4680      	mov	r8, r0
 800c884:	f7f3 fe6e 	bl	8000564 <__aeabi_i2d>
 800c888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c88c:	f7f3 fed4 	bl	8000638 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c89c:	f7f3 fd14 	bl	80002c8 <__aeabi_dsub>
 800c8a0:	f806 4b01 	strb.w	r4, [r6], #1
 800c8a4:	9d07      	ldr	r5, [sp, #28]
 800c8a6:	eba6 040a 	sub.w	r4, r6, sl
 800c8aa:	42a5      	cmp	r5, r4
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	f040 8117 	bne.w	800cae2 <_dtoa_r+0x6e2>
 800c8b4:	f7f3 fd0a 	bl	80002cc <__adddf3>
 800c8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	460d      	mov	r5, r1
 800c8c0:	f7f4 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 80f9 	bne.w	800cabc <_dtoa_r+0x6bc>
 800c8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f4 f919 	bl	8000b08 <__aeabi_dcmpeq>
 800c8d6:	b118      	cbz	r0, 800c8e0 <_dtoa_r+0x4e0>
 800c8d8:	f018 0f01 	tst.w	r8, #1
 800c8dc:	f040 80ee 	bne.w	800cabc <_dtoa_r+0x6bc>
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	f001 f994 	bl	800dc10 <_Bfree>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	7033      	strb	r3, [r6, #0]
 800c8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c8ee:	3701      	adds	r7, #1
 800c8f0:	601f      	str	r7, [r3, #0]
 800c8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f000 831d 	beq.w	800cf34 <_dtoa_r+0xb34>
 800c8fa:	601e      	str	r6, [r3, #0]
 800c8fc:	e31a      	b.n	800cf34 <_dtoa_r+0xb34>
 800c8fe:	07e2      	lsls	r2, r4, #31
 800c900:	d505      	bpl.n	800c90e <_dtoa_r+0x50e>
 800c902:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c906:	f7f3 fe97 	bl	8000638 <__aeabi_dmul>
 800c90a:	3601      	adds	r6, #1
 800c90c:	2301      	movs	r3, #1
 800c90e:	1064      	asrs	r4, r4, #1
 800c910:	3508      	adds	r5, #8
 800c912:	e73f      	b.n	800c794 <_dtoa_r+0x394>
 800c914:	2602      	movs	r6, #2
 800c916:	e742      	b.n	800c79e <_dtoa_r+0x39e>
 800c918:	9c07      	ldr	r4, [sp, #28]
 800c91a:	9704      	str	r7, [sp, #16]
 800c91c:	e761      	b.n	800c7e2 <_dtoa_r+0x3e2>
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <_dtoa_r+0x5bc>)
 800c920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c926:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c92a:	4454      	add	r4, sl
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d053      	beq.n	800c9d8 <_dtoa_r+0x5d8>
 800c930:	4928      	ldr	r1, [pc, #160]	@ (800c9d4 <_dtoa_r+0x5d4>)
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 ffaa 	bl	800088c <__aeabi_ddiv>
 800c938:	4633      	mov	r3, r6
 800c93a:	462a      	mov	r2, r5
 800c93c:	f7f3 fcc4 	bl	80002c8 <__aeabi_dsub>
 800c940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c944:	4656      	mov	r6, sl
 800c946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c94a:	f7f4 f925 	bl	8000b98 <__aeabi_d2iz>
 800c94e:	4605      	mov	r5, r0
 800c950:	f7f3 fe08 	bl	8000564 <__aeabi_i2d>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c95c:	f7f3 fcb4 	bl	80002c8 <__aeabi_dsub>
 800c960:	3530      	adds	r5, #48	@ 0x30
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c96a:	f806 5b01 	strb.w	r5, [r6], #1
 800c96e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c972:	f7f4 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 800c976:	2800      	cmp	r0, #0
 800c978:	d171      	bne.n	800ca5e <_dtoa_r+0x65e>
 800c97a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c97e:	4911      	ldr	r1, [pc, #68]	@ (800c9c4 <_dtoa_r+0x5c4>)
 800c980:	2000      	movs	r0, #0
 800c982:	f7f3 fca1 	bl	80002c8 <__aeabi_dsub>
 800c986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c98a:	f7f4 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f040 8095 	bne.w	800cabe <_dtoa_r+0x6be>
 800c994:	42a6      	cmp	r6, r4
 800c996:	f43f af50 	beq.w	800c83a <_dtoa_r+0x43a>
 800c99a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c99e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f7f3 fe49 	bl	8000638 <__aeabi_dmul>
 800c9a6:	4b08      	ldr	r3, [pc, #32]	@ (800c9c8 <_dtoa_r+0x5c8>)
 800c9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b2:	f7f3 fe41 	bl	8000638 <__aeabi_dmul>
 800c9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9ba:	e7c4      	b.n	800c946 <_dtoa_r+0x546>
 800c9bc:	0800f598 	.word	0x0800f598
 800c9c0:	0800f570 	.word	0x0800f570
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	401c0000 	.word	0x401c0000
 800c9d0:	40140000 	.word	0x40140000
 800c9d4:	3fe00000 	.word	0x3fe00000
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ec:	f7f4 f8d4 	bl	8000b98 <__aeabi_d2iz>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	f7f3 fdb7 	bl	8000564 <__aeabi_i2d>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fe:	f7f3 fc63 	bl	80002c8 <__aeabi_dsub>
 800ca02:	3530      	adds	r5, #48	@ 0x30
 800ca04:	f806 5b01 	strb.w	r5, [r6], #1
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	42a6      	cmp	r6, r4
 800ca0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	d124      	bne.n	800ca62 <_dtoa_r+0x662>
 800ca18:	4bac      	ldr	r3, [pc, #688]	@ (800cccc <_dtoa_r+0x8cc>)
 800ca1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca1e:	f7f3 fc55 	bl	80002cc <__adddf3>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca2a:	f7f4 f895 	bl	8000b58 <__aeabi_dcmpgt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d145      	bne.n	800cabe <_dtoa_r+0x6be>
 800ca32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca36:	49a5      	ldr	r1, [pc, #660]	@ (800cccc <_dtoa_r+0x8cc>)
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f7f3 fc45 	bl	80002c8 <__aeabi_dsub>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca46:	f7f4 f869 	bl	8000b1c <__aeabi_dcmplt>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f43f aef5 	beq.w	800c83a <_dtoa_r+0x43a>
 800ca50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ca52:	1e73      	subs	r3, r6, #1
 800ca54:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca5a:	2b30      	cmp	r3, #48	@ 0x30
 800ca5c:	d0f8      	beq.n	800ca50 <_dtoa_r+0x650>
 800ca5e:	9f04      	ldr	r7, [sp, #16]
 800ca60:	e73e      	b.n	800c8e0 <_dtoa_r+0x4e0>
 800ca62:	4b9b      	ldr	r3, [pc, #620]	@ (800ccd0 <_dtoa_r+0x8d0>)
 800ca64:	f7f3 fde8 	bl	8000638 <__aeabi_dmul>
 800ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6c:	e7bc      	b.n	800c9e8 <_dtoa_r+0x5e8>
 800ca6e:	d10c      	bne.n	800ca8a <_dtoa_r+0x68a>
 800ca70:	4b98      	ldr	r3, [pc, #608]	@ (800ccd4 <_dtoa_r+0x8d4>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca78:	f7f3 fdde 	bl	8000638 <__aeabi_dmul>
 800ca7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca80:	f7f4 f860 	bl	8000b44 <__aeabi_dcmpge>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f000 8157 	beq.w	800cd38 <_dtoa_r+0x938>
 800ca8a:	2400      	movs	r4, #0
 800ca8c:	4625      	mov	r5, r4
 800ca8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca90:	43db      	mvns	r3, r3
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	4656      	mov	r6, sl
 800ca96:	2700      	movs	r7, #0
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f001 f8b8 	bl	800dc10 <_Bfree>
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	d0dc      	beq.n	800ca5e <_dtoa_r+0x65e>
 800caa4:	b12f      	cbz	r7, 800cab2 <_dtoa_r+0x6b2>
 800caa6:	42af      	cmp	r7, r5
 800caa8:	d003      	beq.n	800cab2 <_dtoa_r+0x6b2>
 800caaa:	4639      	mov	r1, r7
 800caac:	4658      	mov	r0, fp
 800caae:	f001 f8af 	bl	800dc10 <_Bfree>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4658      	mov	r0, fp
 800cab6:	f001 f8ab 	bl	800dc10 <_Bfree>
 800caba:	e7d0      	b.n	800ca5e <_dtoa_r+0x65e>
 800cabc:	9704      	str	r7, [sp, #16]
 800cabe:	4633      	mov	r3, r6
 800cac0:	461e      	mov	r6, r3
 800cac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cac6:	2a39      	cmp	r2, #57	@ 0x39
 800cac8:	d107      	bne.n	800cada <_dtoa_r+0x6da>
 800caca:	459a      	cmp	sl, r3
 800cacc:	d1f8      	bne.n	800cac0 <_dtoa_r+0x6c0>
 800cace:	9a04      	ldr	r2, [sp, #16]
 800cad0:	3201      	adds	r2, #1
 800cad2:	9204      	str	r2, [sp, #16]
 800cad4:	2230      	movs	r2, #48	@ 0x30
 800cad6:	f88a 2000 	strb.w	r2, [sl]
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	3201      	adds	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e7bd      	b.n	800ca5e <_dtoa_r+0x65e>
 800cae2:	4b7b      	ldr	r3, [pc, #492]	@ (800ccd0 <_dtoa_r+0x8d0>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	f7f3 fda7 	bl	8000638 <__aeabi_dmul>
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	4604      	mov	r4, r0
 800caf0:	460d      	mov	r5, r1
 800caf2:	f7f4 f809 	bl	8000b08 <__aeabi_dcmpeq>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f43f aebb 	beq.w	800c872 <_dtoa_r+0x472>
 800cafc:	e6f0      	b.n	800c8e0 <_dtoa_r+0x4e0>
 800cafe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	f000 80db 	beq.w	800ccbc <_dtoa_r+0x8bc>
 800cb06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb08:	2a01      	cmp	r2, #1
 800cb0a:	f300 80bf 	bgt.w	800cc8c <_dtoa_r+0x88c>
 800cb0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	f000 80b7 	beq.w	800cc84 <_dtoa_r+0x884>
 800cb16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb1c:	4646      	mov	r6, r8
 800cb1e:	9a08      	ldr	r2, [sp, #32]
 800cb20:	2101      	movs	r1, #1
 800cb22:	441a      	add	r2, r3
 800cb24:	4658      	mov	r0, fp
 800cb26:	4498      	add	r8, r3
 800cb28:	9208      	str	r2, [sp, #32]
 800cb2a:	f001 f96f 	bl	800de0c <__i2b>
 800cb2e:	4605      	mov	r5, r0
 800cb30:	b15e      	cbz	r6, 800cb4a <_dtoa_r+0x74a>
 800cb32:	9b08      	ldr	r3, [sp, #32]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dd08      	ble.n	800cb4a <_dtoa_r+0x74a>
 800cb38:	42b3      	cmp	r3, r6
 800cb3a:	9a08      	ldr	r2, [sp, #32]
 800cb3c:	bfa8      	it	ge
 800cb3e:	4633      	movge	r3, r6
 800cb40:	eba8 0803 	sub.w	r8, r8, r3
 800cb44:	1af6      	subs	r6, r6, r3
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	9308      	str	r3, [sp, #32]
 800cb4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb4c:	b1f3      	cbz	r3, 800cb8c <_dtoa_r+0x78c>
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 80b7 	beq.w	800ccc4 <_dtoa_r+0x8c4>
 800cb56:	b18c      	cbz	r4, 800cb7c <_dtoa_r+0x77c>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	f001 fa15 	bl	800df8c <__pow5mult>
 800cb62:	464a      	mov	r2, r9
 800cb64:	4601      	mov	r1, r0
 800cb66:	4605      	mov	r5, r0
 800cb68:	4658      	mov	r0, fp
 800cb6a:	f001 f965 	bl	800de38 <__multiply>
 800cb6e:	4649      	mov	r1, r9
 800cb70:	9004      	str	r0, [sp, #16]
 800cb72:	4658      	mov	r0, fp
 800cb74:	f001 f84c 	bl	800dc10 <_Bfree>
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	4699      	mov	r9, r3
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7e:	1b1a      	subs	r2, r3, r4
 800cb80:	d004      	beq.n	800cb8c <_dtoa_r+0x78c>
 800cb82:	4649      	mov	r1, r9
 800cb84:	4658      	mov	r0, fp
 800cb86:	f001 fa01 	bl	800df8c <__pow5mult>
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	4658      	mov	r0, fp
 800cb90:	f001 f93c 	bl	800de0c <__i2b>
 800cb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb96:	4604      	mov	r4, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 81cf 	beq.w	800cf3c <_dtoa_r+0xb3c>
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4601      	mov	r1, r0
 800cba2:	4658      	mov	r0, fp
 800cba4:	f001 f9f2 	bl	800df8c <__pow5mult>
 800cba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	4604      	mov	r4, r0
 800cbae:	f300 8095 	bgt.w	800ccdc <_dtoa_r+0x8dc>
 800cbb2:	9b02      	ldr	r3, [sp, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f040 8087 	bne.w	800ccc8 <_dtoa_r+0x8c8>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f040 8089 	bne.w	800ccd8 <_dtoa_r+0x8d8>
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbcc:	0d1b      	lsrs	r3, r3, #20
 800cbce:	051b      	lsls	r3, r3, #20
 800cbd0:	b12b      	cbz	r3, 800cbde <_dtoa_r+0x7de>
 800cbd2:	9b08      	ldr	r3, [sp, #32]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	9308      	str	r3, [sp, #32]
 800cbd8:	f108 0801 	add.w	r8, r8, #1
 800cbdc:	2301      	movs	r3, #1
 800cbde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 81b0 	beq.w	800cf48 <_dtoa_r+0xb48>
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbee:	6918      	ldr	r0, [r3, #16]
 800cbf0:	f001 f8c0 	bl	800dd74 <__hi0bits>
 800cbf4:	f1c0 0020 	rsb	r0, r0, #32
 800cbf8:	9b08      	ldr	r3, [sp, #32]
 800cbfa:	4418      	add	r0, r3
 800cbfc:	f010 001f 	ands.w	r0, r0, #31
 800cc00:	d077      	beq.n	800ccf2 <_dtoa_r+0x8f2>
 800cc02:	f1c0 0320 	rsb	r3, r0, #32
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	dd6b      	ble.n	800cce2 <_dtoa_r+0x8e2>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	f1c0 001c 	rsb	r0, r0, #28
 800cc10:	4403      	add	r3, r0
 800cc12:	4480      	add	r8, r0
 800cc14:	4406      	add	r6, r0
 800cc16:	9308      	str	r3, [sp, #32]
 800cc18:	f1b8 0f00 	cmp.w	r8, #0
 800cc1c:	dd05      	ble.n	800cc2a <_dtoa_r+0x82a>
 800cc1e:	4649      	mov	r1, r9
 800cc20:	4642      	mov	r2, r8
 800cc22:	4658      	mov	r0, fp
 800cc24:	f001 fa0c 	bl	800e040 <__lshift>
 800cc28:	4681      	mov	r9, r0
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd05      	ble.n	800cc3c <_dtoa_r+0x83c>
 800cc30:	4621      	mov	r1, r4
 800cc32:	461a      	mov	r2, r3
 800cc34:	4658      	mov	r0, fp
 800cc36:	f001 fa03 	bl	800e040 <__lshift>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d059      	beq.n	800ccf6 <_dtoa_r+0x8f6>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4648      	mov	r0, r9
 800cc46:	f001 fa67 	bl	800e118 <__mcmp>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	da53      	bge.n	800ccf6 <_dtoa_r+0x8f6>
 800cc4e:	1e7b      	subs	r3, r7, #1
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	4649      	mov	r1, r9
 800cc54:	2300      	movs	r3, #0
 800cc56:	220a      	movs	r2, #10
 800cc58:	4658      	mov	r0, fp
 800cc5a:	f000 fffb 	bl	800dc54 <__multadd>
 800cc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc60:	4681      	mov	r9, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 8172 	beq.w	800cf4c <_dtoa_r+0xb4c>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	220a      	movs	r2, #10
 800cc6e:	4658      	mov	r0, fp
 800cc70:	f000 fff0 	bl	800dc54 <__multadd>
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	4605      	mov	r5, r0
 800cc7a:	dc67      	bgt.n	800cd4c <_dtoa_r+0x94c>
 800cc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	dc41      	bgt.n	800cd06 <_dtoa_r+0x906>
 800cc82:	e063      	b.n	800cd4c <_dtoa_r+0x94c>
 800cc84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc8a:	e746      	b.n	800cb1a <_dtoa_r+0x71a>
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	1e5c      	subs	r4, r3, #1
 800cc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc92:	42a3      	cmp	r3, r4
 800cc94:	bfbf      	itttt	lt
 800cc96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cc9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cc9c:	1ae3      	sublt	r3, r4, r3
 800cc9e:	bfb4      	ite	lt
 800cca0:	18d2      	addlt	r2, r2, r3
 800cca2:	1b1c      	subge	r4, r3, r4
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	bfbc      	itt	lt
 800cca8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ccaa:	2400      	movlt	r4, #0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	bfb5      	itete	lt
 800ccb0:	eba8 0603 	sublt.w	r6, r8, r3
 800ccb4:	9b07      	ldrge	r3, [sp, #28]
 800ccb6:	2300      	movlt	r3, #0
 800ccb8:	4646      	movge	r6, r8
 800ccba:	e730      	b.n	800cb1e <_dtoa_r+0x71e>
 800ccbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ccc0:	4646      	mov	r6, r8
 800ccc2:	e735      	b.n	800cb30 <_dtoa_r+0x730>
 800ccc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccc6:	e75c      	b.n	800cb82 <_dtoa_r+0x782>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e788      	b.n	800cbde <_dtoa_r+0x7de>
 800cccc:	3fe00000 	.word	0x3fe00000
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	40140000 	.word	0x40140000
 800ccd8:	9b02      	ldr	r3, [sp, #8]
 800ccda:	e780      	b.n	800cbde <_dtoa_r+0x7de>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cce0:	e782      	b.n	800cbe8 <_dtoa_r+0x7e8>
 800cce2:	d099      	beq.n	800cc18 <_dtoa_r+0x818>
 800cce4:	9a08      	ldr	r2, [sp, #32]
 800cce6:	331c      	adds	r3, #28
 800cce8:	441a      	add	r2, r3
 800ccea:	4498      	add	r8, r3
 800ccec:	441e      	add	r6, r3
 800ccee:	9208      	str	r2, [sp, #32]
 800ccf0:	e792      	b.n	800cc18 <_dtoa_r+0x818>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	e7f6      	b.n	800cce4 <_dtoa_r+0x8e4>
 800ccf6:	9b07      	ldr	r3, [sp, #28]
 800ccf8:	9704      	str	r7, [sp, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	dc20      	bgt.n	800cd40 <_dtoa_r+0x940>
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	dd1e      	ble.n	800cd44 <_dtoa_r+0x944>
 800cd06:	9b00      	ldr	r3, [sp, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f47f aec0 	bne.w	800ca8e <_dtoa_r+0x68e>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	2205      	movs	r2, #5
 800cd12:	4658      	mov	r0, fp
 800cd14:	f000 ff9e 	bl	800dc54 <__multadd>
 800cd18:	4601      	mov	r1, r0
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4648      	mov	r0, r9
 800cd1e:	f001 f9fb 	bl	800e118 <__mcmp>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f77f aeb3 	ble.w	800ca8e <_dtoa_r+0x68e>
 800cd28:	4656      	mov	r6, sl
 800cd2a:	2331      	movs	r3, #49	@ 0x31
 800cd2c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	3301      	adds	r3, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	e6ae      	b.n	800ca96 <_dtoa_r+0x696>
 800cd38:	9c07      	ldr	r4, [sp, #28]
 800cd3a:	9704      	str	r7, [sp, #16]
 800cd3c:	4625      	mov	r5, r4
 800cd3e:	e7f3      	b.n	800cd28 <_dtoa_r+0x928>
 800cd40:	9b07      	ldr	r3, [sp, #28]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f000 8104 	beq.w	800cf54 <_dtoa_r+0xb54>
 800cd4c:	2e00      	cmp	r6, #0
 800cd4e:	dd05      	ble.n	800cd5c <_dtoa_r+0x95c>
 800cd50:	4629      	mov	r1, r5
 800cd52:	4632      	mov	r2, r6
 800cd54:	4658      	mov	r0, fp
 800cd56:	f001 f973 	bl	800e040 <__lshift>
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d05a      	beq.n	800ce18 <_dtoa_r+0xa18>
 800cd62:	6869      	ldr	r1, [r5, #4]
 800cd64:	4658      	mov	r0, fp
 800cd66:	f000 ff13 	bl	800db90 <_Balloc>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b928      	cbnz	r0, 800cd7a <_dtoa_r+0x97a>
 800cd6e:	4b84      	ldr	r3, [pc, #528]	@ (800cf80 <_dtoa_r+0xb80>)
 800cd70:	4602      	mov	r2, r0
 800cd72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd76:	f7ff bb5a 	b.w	800c42e <_dtoa_r+0x2e>
 800cd7a:	692a      	ldr	r2, [r5, #16]
 800cd7c:	3202      	adds	r2, #2
 800cd7e:	0092      	lsls	r2, r2, #2
 800cd80:	f105 010c 	add.w	r1, r5, #12
 800cd84:	300c      	adds	r0, #12
 800cd86:	f7ff fa92 	bl	800c2ae <memcpy>
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4658      	mov	r0, fp
 800cd90:	f001 f956 	bl	800e040 <__lshift>
 800cd94:	f10a 0301 	add.w	r3, sl, #1
 800cd98:	9307      	str	r3, [sp, #28]
 800cd9a:	9b00      	ldr	r3, [sp, #0]
 800cd9c:	4453      	add	r3, sl
 800cd9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cda0:	9b02      	ldr	r3, [sp, #8]
 800cda2:	f003 0301 	and.w	r3, r3, #1
 800cda6:	462f      	mov	r7, r5
 800cda8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdaa:	4605      	mov	r5, r0
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	4648      	mov	r0, r9
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	f7ff fa99 	bl	800c2ec <quorem>
 800cdba:	4639      	mov	r1, r7
 800cdbc:	9002      	str	r0, [sp, #8]
 800cdbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cdc2:	4648      	mov	r0, r9
 800cdc4:	f001 f9a8 	bl	800e118 <__mcmp>
 800cdc8:	462a      	mov	r2, r5
 800cdca:	9008      	str	r0, [sp, #32]
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4658      	mov	r0, fp
 800cdd0:	f001 f9be 	bl	800e150 <__mdiff>
 800cdd4:	68c2      	ldr	r2, [r0, #12]
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	bb02      	cbnz	r2, 800ce1c <_dtoa_r+0xa1c>
 800cdda:	4601      	mov	r1, r0
 800cddc:	4648      	mov	r0, r9
 800cdde:	f001 f99b 	bl	800e118 <__mcmp>
 800cde2:	4602      	mov	r2, r0
 800cde4:	4631      	mov	r1, r6
 800cde6:	4658      	mov	r0, fp
 800cde8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdea:	f000 ff11 	bl	800dc10 <_Bfree>
 800cdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdf2:	9e07      	ldr	r6, [sp, #28]
 800cdf4:	ea43 0102 	orr.w	r1, r3, r2
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdfa:	4319      	orrs	r1, r3
 800cdfc:	d110      	bne.n	800ce20 <_dtoa_r+0xa20>
 800cdfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce02:	d029      	beq.n	800ce58 <_dtoa_r+0xa58>
 800ce04:	9b08      	ldr	r3, [sp, #32]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	dd02      	ble.n	800ce10 <_dtoa_r+0xa10>
 800ce0a:	9b02      	ldr	r3, [sp, #8]
 800ce0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce10:	9b00      	ldr	r3, [sp, #0]
 800ce12:	f883 8000 	strb.w	r8, [r3]
 800ce16:	e63f      	b.n	800ca98 <_dtoa_r+0x698>
 800ce18:	4628      	mov	r0, r5
 800ce1a:	e7bb      	b.n	800cd94 <_dtoa_r+0x994>
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	e7e1      	b.n	800cde4 <_dtoa_r+0x9e4>
 800ce20:	9b08      	ldr	r3, [sp, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	db04      	blt.n	800ce30 <_dtoa_r+0xa30>
 800ce26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce2c:	430b      	orrs	r3, r1
 800ce2e:	d120      	bne.n	800ce72 <_dtoa_r+0xa72>
 800ce30:	2a00      	cmp	r2, #0
 800ce32:	dded      	ble.n	800ce10 <_dtoa_r+0xa10>
 800ce34:	4649      	mov	r1, r9
 800ce36:	2201      	movs	r2, #1
 800ce38:	4658      	mov	r0, fp
 800ce3a:	f001 f901 	bl	800e040 <__lshift>
 800ce3e:	4621      	mov	r1, r4
 800ce40:	4681      	mov	r9, r0
 800ce42:	f001 f969 	bl	800e118 <__mcmp>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	dc03      	bgt.n	800ce52 <_dtoa_r+0xa52>
 800ce4a:	d1e1      	bne.n	800ce10 <_dtoa_r+0xa10>
 800ce4c:	f018 0f01 	tst.w	r8, #1
 800ce50:	d0de      	beq.n	800ce10 <_dtoa_r+0xa10>
 800ce52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce56:	d1d8      	bne.n	800ce0a <_dtoa_r+0xa0a>
 800ce58:	9a00      	ldr	r2, [sp, #0]
 800ce5a:	2339      	movs	r3, #57	@ 0x39
 800ce5c:	7013      	strb	r3, [r2, #0]
 800ce5e:	4633      	mov	r3, r6
 800ce60:	461e      	mov	r6, r3
 800ce62:	3b01      	subs	r3, #1
 800ce64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce68:	2a39      	cmp	r2, #57	@ 0x39
 800ce6a:	d052      	beq.n	800cf12 <_dtoa_r+0xb12>
 800ce6c:	3201      	adds	r2, #1
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	e612      	b.n	800ca98 <_dtoa_r+0x698>
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	dd07      	ble.n	800ce86 <_dtoa_r+0xa86>
 800ce76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce7a:	d0ed      	beq.n	800ce58 <_dtoa_r+0xa58>
 800ce7c:	9a00      	ldr	r2, [sp, #0]
 800ce7e:	f108 0301 	add.w	r3, r8, #1
 800ce82:	7013      	strb	r3, [r2, #0]
 800ce84:	e608      	b.n	800ca98 <_dtoa_r+0x698>
 800ce86:	9b07      	ldr	r3, [sp, #28]
 800ce88:	9a07      	ldr	r2, [sp, #28]
 800ce8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d028      	beq.n	800cee6 <_dtoa_r+0xae6>
 800ce94:	4649      	mov	r1, r9
 800ce96:	2300      	movs	r3, #0
 800ce98:	220a      	movs	r2, #10
 800ce9a:	4658      	mov	r0, fp
 800ce9c:	f000 feda 	bl	800dc54 <__multadd>
 800cea0:	42af      	cmp	r7, r5
 800cea2:	4681      	mov	r9, r0
 800cea4:	f04f 0300 	mov.w	r3, #0
 800cea8:	f04f 020a 	mov.w	r2, #10
 800ceac:	4639      	mov	r1, r7
 800ceae:	4658      	mov	r0, fp
 800ceb0:	d107      	bne.n	800cec2 <_dtoa_r+0xac2>
 800ceb2:	f000 fecf 	bl	800dc54 <__multadd>
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	4605      	mov	r5, r0
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	3301      	adds	r3, #1
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	e774      	b.n	800cdac <_dtoa_r+0x9ac>
 800cec2:	f000 fec7 	bl	800dc54 <__multadd>
 800cec6:	4629      	mov	r1, r5
 800cec8:	4607      	mov	r7, r0
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	4658      	mov	r0, fp
 800ced0:	f000 fec0 	bl	800dc54 <__multadd>
 800ced4:	4605      	mov	r5, r0
 800ced6:	e7f0      	b.n	800ceba <_dtoa_r+0xaba>
 800ced8:	9b00      	ldr	r3, [sp, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bfcc      	ite	gt
 800cede:	461e      	movgt	r6, r3
 800cee0:	2601      	movle	r6, #1
 800cee2:	4456      	add	r6, sl
 800cee4:	2700      	movs	r7, #0
 800cee6:	4649      	mov	r1, r9
 800cee8:	2201      	movs	r2, #1
 800ceea:	4658      	mov	r0, fp
 800ceec:	f001 f8a8 	bl	800e040 <__lshift>
 800cef0:	4621      	mov	r1, r4
 800cef2:	4681      	mov	r9, r0
 800cef4:	f001 f910 	bl	800e118 <__mcmp>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	dcb0      	bgt.n	800ce5e <_dtoa_r+0xa5e>
 800cefc:	d102      	bne.n	800cf04 <_dtoa_r+0xb04>
 800cefe:	f018 0f01 	tst.w	r8, #1
 800cf02:	d1ac      	bne.n	800ce5e <_dtoa_r+0xa5e>
 800cf04:	4633      	mov	r3, r6
 800cf06:	461e      	mov	r6, r3
 800cf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf0c:	2a30      	cmp	r2, #48	@ 0x30
 800cf0e:	d0fa      	beq.n	800cf06 <_dtoa_r+0xb06>
 800cf10:	e5c2      	b.n	800ca98 <_dtoa_r+0x698>
 800cf12:	459a      	cmp	sl, r3
 800cf14:	d1a4      	bne.n	800ce60 <_dtoa_r+0xa60>
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	2331      	movs	r3, #49	@ 0x31
 800cf1e:	f88a 3000 	strb.w	r3, [sl]
 800cf22:	e5b9      	b.n	800ca98 <_dtoa_r+0x698>
 800cf24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cf84 <_dtoa_r+0xb84>
 800cf2a:	b11b      	cbz	r3, 800cf34 <_dtoa_r+0xb34>
 800cf2c:	f10a 0308 	add.w	r3, sl, #8
 800cf30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	4650      	mov	r0, sl
 800cf36:	b019      	add	sp, #100	@ 0x64
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	f77f ae37 	ble.w	800cbb2 <_dtoa_r+0x7b2>
 800cf44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf46:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e655      	b.n	800cbf8 <_dtoa_r+0x7f8>
 800cf4c:	9b00      	ldr	r3, [sp, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f77f aed6 	ble.w	800cd00 <_dtoa_r+0x900>
 800cf54:	4656      	mov	r6, sl
 800cf56:	4621      	mov	r1, r4
 800cf58:	4648      	mov	r0, r9
 800cf5a:	f7ff f9c7 	bl	800c2ec <quorem>
 800cf5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf62:	f806 8b01 	strb.w	r8, [r6], #1
 800cf66:	9b00      	ldr	r3, [sp, #0]
 800cf68:	eba6 020a 	sub.w	r2, r6, sl
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	ddb3      	ble.n	800ced8 <_dtoa_r+0xad8>
 800cf70:	4649      	mov	r1, r9
 800cf72:	2300      	movs	r3, #0
 800cf74:	220a      	movs	r2, #10
 800cf76:	4658      	mov	r0, fp
 800cf78:	f000 fe6c 	bl	800dc54 <__multadd>
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	e7ea      	b.n	800cf56 <_dtoa_r+0xb56>
 800cf80:	0800f485 	.word	0x0800f485
 800cf84:	0800f409 	.word	0x0800f409

0800cf88 <rshift>:
 800cf88:	6903      	ldr	r3, [r0, #16]
 800cf8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf96:	f100 0414 	add.w	r4, r0, #20
 800cf9a:	dd45      	ble.n	800d028 <rshift+0xa0>
 800cf9c:	f011 011f 	ands.w	r1, r1, #31
 800cfa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfa8:	d10c      	bne.n	800cfc4 <rshift+0x3c>
 800cfaa:	f100 0710 	add.w	r7, r0, #16
 800cfae:	4629      	mov	r1, r5
 800cfb0:	42b1      	cmp	r1, r6
 800cfb2:	d334      	bcc.n	800d01e <rshift+0x96>
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	1eea      	subs	r2, r5, #3
 800cfba:	4296      	cmp	r6, r2
 800cfbc:	bf38      	it	cc
 800cfbe:	2300      	movcc	r3, #0
 800cfc0:	4423      	add	r3, r4
 800cfc2:	e015      	b.n	800cff0 <rshift+0x68>
 800cfc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfc8:	f1c1 0820 	rsb	r8, r1, #32
 800cfcc:	40cf      	lsrs	r7, r1
 800cfce:	f105 0e04 	add.w	lr, r5, #4
 800cfd2:	46a1      	mov	r9, r4
 800cfd4:	4576      	cmp	r6, lr
 800cfd6:	46f4      	mov	ip, lr
 800cfd8:	d815      	bhi.n	800d006 <rshift+0x7e>
 800cfda:	1a9a      	subs	r2, r3, r2
 800cfdc:	0092      	lsls	r2, r2, #2
 800cfde:	3a04      	subs	r2, #4
 800cfe0:	3501      	adds	r5, #1
 800cfe2:	42ae      	cmp	r6, r5
 800cfe4:	bf38      	it	cc
 800cfe6:	2200      	movcc	r2, #0
 800cfe8:	18a3      	adds	r3, r4, r2
 800cfea:	50a7      	str	r7, [r4, r2]
 800cfec:	b107      	cbz	r7, 800cff0 <rshift+0x68>
 800cfee:	3304      	adds	r3, #4
 800cff0:	1b1a      	subs	r2, r3, r4
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cff8:	bf08      	it	eq
 800cffa:	2300      	moveq	r3, #0
 800cffc:	6102      	str	r2, [r0, #16]
 800cffe:	bf08      	it	eq
 800d000:	6143      	streq	r3, [r0, #20]
 800d002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d006:	f8dc c000 	ldr.w	ip, [ip]
 800d00a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d00e:	ea4c 0707 	orr.w	r7, ip, r7
 800d012:	f849 7b04 	str.w	r7, [r9], #4
 800d016:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d01a:	40cf      	lsrs	r7, r1
 800d01c:	e7da      	b.n	800cfd4 <rshift+0x4c>
 800d01e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d022:	f847 cf04 	str.w	ip, [r7, #4]!
 800d026:	e7c3      	b.n	800cfb0 <rshift+0x28>
 800d028:	4623      	mov	r3, r4
 800d02a:	e7e1      	b.n	800cff0 <rshift+0x68>

0800d02c <__hexdig_fun>:
 800d02c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d030:	2b09      	cmp	r3, #9
 800d032:	d802      	bhi.n	800d03a <__hexdig_fun+0xe>
 800d034:	3820      	subs	r0, #32
 800d036:	b2c0      	uxtb	r0, r0
 800d038:	4770      	bx	lr
 800d03a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d03e:	2b05      	cmp	r3, #5
 800d040:	d801      	bhi.n	800d046 <__hexdig_fun+0x1a>
 800d042:	3847      	subs	r0, #71	@ 0x47
 800d044:	e7f7      	b.n	800d036 <__hexdig_fun+0xa>
 800d046:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d04a:	2b05      	cmp	r3, #5
 800d04c:	d801      	bhi.n	800d052 <__hexdig_fun+0x26>
 800d04e:	3827      	subs	r0, #39	@ 0x27
 800d050:	e7f1      	b.n	800d036 <__hexdig_fun+0xa>
 800d052:	2000      	movs	r0, #0
 800d054:	4770      	bx	lr
	...

0800d058 <__gethex>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	b085      	sub	sp, #20
 800d05e:	468a      	mov	sl, r1
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	680b      	ldr	r3, [r1, #0]
 800d064:	9001      	str	r0, [sp, #4]
 800d066:	4690      	mov	r8, r2
 800d068:	1c9c      	adds	r4, r3, #2
 800d06a:	46a1      	mov	r9, r4
 800d06c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d070:	2830      	cmp	r0, #48	@ 0x30
 800d072:	d0fa      	beq.n	800d06a <__gethex+0x12>
 800d074:	eba9 0303 	sub.w	r3, r9, r3
 800d078:	f1a3 0b02 	sub.w	fp, r3, #2
 800d07c:	f7ff ffd6 	bl	800d02c <__hexdig_fun>
 800d080:	4605      	mov	r5, r0
 800d082:	2800      	cmp	r0, #0
 800d084:	d168      	bne.n	800d158 <__gethex+0x100>
 800d086:	49a0      	ldr	r1, [pc, #640]	@ (800d308 <__gethex+0x2b0>)
 800d088:	2201      	movs	r2, #1
 800d08a:	4648      	mov	r0, r9
 800d08c:	f7ff f8c4 	bl	800c218 <strncmp>
 800d090:	4607      	mov	r7, r0
 800d092:	2800      	cmp	r0, #0
 800d094:	d167      	bne.n	800d166 <__gethex+0x10e>
 800d096:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d09a:	4626      	mov	r6, r4
 800d09c:	f7ff ffc6 	bl	800d02c <__hexdig_fun>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d062      	beq.n	800d16a <__gethex+0x112>
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	7818      	ldrb	r0, [r3, #0]
 800d0a8:	2830      	cmp	r0, #48	@ 0x30
 800d0aa:	4699      	mov	r9, r3
 800d0ac:	f103 0301 	add.w	r3, r3, #1
 800d0b0:	d0f9      	beq.n	800d0a6 <__gethex+0x4e>
 800d0b2:	f7ff ffbb 	bl	800d02c <__hexdig_fun>
 800d0b6:	fab0 f580 	clz	r5, r0
 800d0ba:	096d      	lsrs	r5, r5, #5
 800d0bc:	f04f 0b01 	mov.w	fp, #1
 800d0c0:	464a      	mov	r2, r9
 800d0c2:	4616      	mov	r6, r2
 800d0c4:	3201      	adds	r2, #1
 800d0c6:	7830      	ldrb	r0, [r6, #0]
 800d0c8:	f7ff ffb0 	bl	800d02c <__hexdig_fun>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d1f8      	bne.n	800d0c2 <__gethex+0x6a>
 800d0d0:	498d      	ldr	r1, [pc, #564]	@ (800d308 <__gethex+0x2b0>)
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7ff f89f 	bl	800c218 <strncmp>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d13f      	bne.n	800d15e <__gethex+0x106>
 800d0de:	b944      	cbnz	r4, 800d0f2 <__gethex+0x9a>
 800d0e0:	1c74      	adds	r4, r6, #1
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	3201      	adds	r2, #1
 800d0e8:	7830      	ldrb	r0, [r6, #0]
 800d0ea:	f7ff ff9f 	bl	800d02c <__hexdig_fun>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d1f8      	bne.n	800d0e4 <__gethex+0x8c>
 800d0f2:	1ba4      	subs	r4, r4, r6
 800d0f4:	00a7      	lsls	r7, r4, #2
 800d0f6:	7833      	ldrb	r3, [r6, #0]
 800d0f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d0fc:	2b50      	cmp	r3, #80	@ 0x50
 800d0fe:	d13e      	bne.n	800d17e <__gethex+0x126>
 800d100:	7873      	ldrb	r3, [r6, #1]
 800d102:	2b2b      	cmp	r3, #43	@ 0x2b
 800d104:	d033      	beq.n	800d16e <__gethex+0x116>
 800d106:	2b2d      	cmp	r3, #45	@ 0x2d
 800d108:	d034      	beq.n	800d174 <__gethex+0x11c>
 800d10a:	1c71      	adds	r1, r6, #1
 800d10c:	2400      	movs	r4, #0
 800d10e:	7808      	ldrb	r0, [r1, #0]
 800d110:	f7ff ff8c 	bl	800d02c <__hexdig_fun>
 800d114:	1e43      	subs	r3, r0, #1
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b18      	cmp	r3, #24
 800d11a:	d830      	bhi.n	800d17e <__gethex+0x126>
 800d11c:	f1a0 0210 	sub.w	r2, r0, #16
 800d120:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d124:	f7ff ff82 	bl	800d02c <__hexdig_fun>
 800d128:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d12c:	fa5f fc8c 	uxtb.w	ip, ip
 800d130:	f1bc 0f18 	cmp.w	ip, #24
 800d134:	f04f 030a 	mov.w	r3, #10
 800d138:	d91e      	bls.n	800d178 <__gethex+0x120>
 800d13a:	b104      	cbz	r4, 800d13e <__gethex+0xe6>
 800d13c:	4252      	negs	r2, r2
 800d13e:	4417      	add	r7, r2
 800d140:	f8ca 1000 	str.w	r1, [sl]
 800d144:	b1ed      	cbz	r5, 800d182 <__gethex+0x12a>
 800d146:	f1bb 0f00 	cmp.w	fp, #0
 800d14a:	bf0c      	ite	eq
 800d14c:	2506      	moveq	r5, #6
 800d14e:	2500      	movne	r5, #0
 800d150:	4628      	mov	r0, r5
 800d152:	b005      	add	sp, #20
 800d154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d158:	2500      	movs	r5, #0
 800d15a:	462c      	mov	r4, r5
 800d15c:	e7b0      	b.n	800d0c0 <__gethex+0x68>
 800d15e:	2c00      	cmp	r4, #0
 800d160:	d1c7      	bne.n	800d0f2 <__gethex+0x9a>
 800d162:	4627      	mov	r7, r4
 800d164:	e7c7      	b.n	800d0f6 <__gethex+0x9e>
 800d166:	464e      	mov	r6, r9
 800d168:	462f      	mov	r7, r5
 800d16a:	2501      	movs	r5, #1
 800d16c:	e7c3      	b.n	800d0f6 <__gethex+0x9e>
 800d16e:	2400      	movs	r4, #0
 800d170:	1cb1      	adds	r1, r6, #2
 800d172:	e7cc      	b.n	800d10e <__gethex+0xb6>
 800d174:	2401      	movs	r4, #1
 800d176:	e7fb      	b.n	800d170 <__gethex+0x118>
 800d178:	fb03 0002 	mla	r0, r3, r2, r0
 800d17c:	e7ce      	b.n	800d11c <__gethex+0xc4>
 800d17e:	4631      	mov	r1, r6
 800d180:	e7de      	b.n	800d140 <__gethex+0xe8>
 800d182:	eba6 0309 	sub.w	r3, r6, r9
 800d186:	3b01      	subs	r3, #1
 800d188:	4629      	mov	r1, r5
 800d18a:	2b07      	cmp	r3, #7
 800d18c:	dc0a      	bgt.n	800d1a4 <__gethex+0x14c>
 800d18e:	9801      	ldr	r0, [sp, #4]
 800d190:	f000 fcfe 	bl	800db90 <_Balloc>
 800d194:	4604      	mov	r4, r0
 800d196:	b940      	cbnz	r0, 800d1aa <__gethex+0x152>
 800d198:	4b5c      	ldr	r3, [pc, #368]	@ (800d30c <__gethex+0x2b4>)
 800d19a:	4602      	mov	r2, r0
 800d19c:	21e4      	movs	r1, #228	@ 0xe4
 800d19e:	485c      	ldr	r0, [pc, #368]	@ (800d310 <__gethex+0x2b8>)
 800d1a0:	f001 fa96 	bl	800e6d0 <__assert_func>
 800d1a4:	3101      	adds	r1, #1
 800d1a6:	105b      	asrs	r3, r3, #1
 800d1a8:	e7ef      	b.n	800d18a <__gethex+0x132>
 800d1aa:	f100 0a14 	add.w	sl, r0, #20
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	4655      	mov	r5, sl
 800d1b2:	469b      	mov	fp, r3
 800d1b4:	45b1      	cmp	r9, r6
 800d1b6:	d337      	bcc.n	800d228 <__gethex+0x1d0>
 800d1b8:	f845 bb04 	str.w	fp, [r5], #4
 800d1bc:	eba5 050a 	sub.w	r5, r5, sl
 800d1c0:	10ad      	asrs	r5, r5, #2
 800d1c2:	6125      	str	r5, [r4, #16]
 800d1c4:	4658      	mov	r0, fp
 800d1c6:	f000 fdd5 	bl	800dd74 <__hi0bits>
 800d1ca:	016d      	lsls	r5, r5, #5
 800d1cc:	f8d8 6000 	ldr.w	r6, [r8]
 800d1d0:	1a2d      	subs	r5, r5, r0
 800d1d2:	42b5      	cmp	r5, r6
 800d1d4:	dd54      	ble.n	800d280 <__gethex+0x228>
 800d1d6:	1bad      	subs	r5, r5, r6
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f001 f969 	bl	800e4b2 <__any_on>
 800d1e0:	4681      	mov	r9, r0
 800d1e2:	b178      	cbz	r0, 800d204 <__gethex+0x1ac>
 800d1e4:	1e6b      	subs	r3, r5, #1
 800d1e6:	1159      	asrs	r1, r3, #5
 800d1e8:	f003 021f 	and.w	r2, r3, #31
 800d1ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d1f0:	f04f 0901 	mov.w	r9, #1
 800d1f4:	fa09 f202 	lsl.w	r2, r9, r2
 800d1f8:	420a      	tst	r2, r1
 800d1fa:	d003      	beq.n	800d204 <__gethex+0x1ac>
 800d1fc:	454b      	cmp	r3, r9
 800d1fe:	dc36      	bgt.n	800d26e <__gethex+0x216>
 800d200:	f04f 0902 	mov.w	r9, #2
 800d204:	4629      	mov	r1, r5
 800d206:	4620      	mov	r0, r4
 800d208:	f7ff febe 	bl	800cf88 <rshift>
 800d20c:	442f      	add	r7, r5
 800d20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d212:	42bb      	cmp	r3, r7
 800d214:	da42      	bge.n	800d29c <__gethex+0x244>
 800d216:	9801      	ldr	r0, [sp, #4]
 800d218:	4621      	mov	r1, r4
 800d21a:	f000 fcf9 	bl	800dc10 <_Bfree>
 800d21e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d220:	2300      	movs	r3, #0
 800d222:	6013      	str	r3, [r2, #0]
 800d224:	25a3      	movs	r5, #163	@ 0xa3
 800d226:	e793      	b.n	800d150 <__gethex+0xf8>
 800d228:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d22c:	2a2e      	cmp	r2, #46	@ 0x2e
 800d22e:	d012      	beq.n	800d256 <__gethex+0x1fe>
 800d230:	2b20      	cmp	r3, #32
 800d232:	d104      	bne.n	800d23e <__gethex+0x1e6>
 800d234:	f845 bb04 	str.w	fp, [r5], #4
 800d238:	f04f 0b00 	mov.w	fp, #0
 800d23c:	465b      	mov	r3, fp
 800d23e:	7830      	ldrb	r0, [r6, #0]
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	f7ff fef3 	bl	800d02c <__hexdig_fun>
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	f000 000f 	and.w	r0, r0, #15
 800d24c:	4098      	lsls	r0, r3
 800d24e:	ea4b 0b00 	orr.w	fp, fp, r0
 800d252:	3304      	adds	r3, #4
 800d254:	e7ae      	b.n	800d1b4 <__gethex+0x15c>
 800d256:	45b1      	cmp	r9, r6
 800d258:	d8ea      	bhi.n	800d230 <__gethex+0x1d8>
 800d25a:	492b      	ldr	r1, [pc, #172]	@ (800d308 <__gethex+0x2b0>)
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	2201      	movs	r2, #1
 800d260:	4630      	mov	r0, r6
 800d262:	f7fe ffd9 	bl	800c218 <strncmp>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	2800      	cmp	r0, #0
 800d26a:	d1e1      	bne.n	800d230 <__gethex+0x1d8>
 800d26c:	e7a2      	b.n	800d1b4 <__gethex+0x15c>
 800d26e:	1ea9      	subs	r1, r5, #2
 800d270:	4620      	mov	r0, r4
 800d272:	f001 f91e 	bl	800e4b2 <__any_on>
 800d276:	2800      	cmp	r0, #0
 800d278:	d0c2      	beq.n	800d200 <__gethex+0x1a8>
 800d27a:	f04f 0903 	mov.w	r9, #3
 800d27e:	e7c1      	b.n	800d204 <__gethex+0x1ac>
 800d280:	da09      	bge.n	800d296 <__gethex+0x23e>
 800d282:	1b75      	subs	r5, r6, r5
 800d284:	4621      	mov	r1, r4
 800d286:	9801      	ldr	r0, [sp, #4]
 800d288:	462a      	mov	r2, r5
 800d28a:	f000 fed9 	bl	800e040 <__lshift>
 800d28e:	1b7f      	subs	r7, r7, r5
 800d290:	4604      	mov	r4, r0
 800d292:	f100 0a14 	add.w	sl, r0, #20
 800d296:	f04f 0900 	mov.w	r9, #0
 800d29a:	e7b8      	b.n	800d20e <__gethex+0x1b6>
 800d29c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2a0:	42bd      	cmp	r5, r7
 800d2a2:	dd6f      	ble.n	800d384 <__gethex+0x32c>
 800d2a4:	1bed      	subs	r5, r5, r7
 800d2a6:	42ae      	cmp	r6, r5
 800d2a8:	dc34      	bgt.n	800d314 <__gethex+0x2bc>
 800d2aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d022      	beq.n	800d2f8 <__gethex+0x2a0>
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d024      	beq.n	800d300 <__gethex+0x2a8>
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d115      	bne.n	800d2e6 <__gethex+0x28e>
 800d2ba:	42ae      	cmp	r6, r5
 800d2bc:	d113      	bne.n	800d2e6 <__gethex+0x28e>
 800d2be:	2e01      	cmp	r6, #1
 800d2c0:	d10b      	bne.n	800d2da <__gethex+0x282>
 800d2c2:	9a02      	ldr	r2, [sp, #8]
 800d2c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	6123      	str	r3, [r4, #16]
 800d2ce:	f8ca 3000 	str.w	r3, [sl]
 800d2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d4:	2562      	movs	r5, #98	@ 0x62
 800d2d6:	601c      	str	r4, [r3, #0]
 800d2d8:	e73a      	b.n	800d150 <__gethex+0xf8>
 800d2da:	1e71      	subs	r1, r6, #1
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f001 f8e8 	bl	800e4b2 <__any_on>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d1ed      	bne.n	800d2c2 <__gethex+0x26a>
 800d2e6:	9801      	ldr	r0, [sp, #4]
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	f000 fc91 	bl	800dc10 <_Bfree>
 800d2ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	2550      	movs	r5, #80	@ 0x50
 800d2f6:	e72b      	b.n	800d150 <__gethex+0xf8>
 800d2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f3      	bne.n	800d2e6 <__gethex+0x28e>
 800d2fe:	e7e0      	b.n	800d2c2 <__gethex+0x26a>
 800d300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1dd      	bne.n	800d2c2 <__gethex+0x26a>
 800d306:	e7ee      	b.n	800d2e6 <__gethex+0x28e>
 800d308:	0800f2a9 	.word	0x0800f2a9
 800d30c:	0800f485 	.word	0x0800f485
 800d310:	0800f496 	.word	0x0800f496
 800d314:	1e6f      	subs	r7, r5, #1
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d130      	bne.n	800d37e <__gethex+0x326>
 800d31c:	b127      	cbz	r7, 800d328 <__gethex+0x2d0>
 800d31e:	4639      	mov	r1, r7
 800d320:	4620      	mov	r0, r4
 800d322:	f001 f8c6 	bl	800e4b2 <__any_on>
 800d326:	4681      	mov	r9, r0
 800d328:	117a      	asrs	r2, r7, #5
 800d32a:	2301      	movs	r3, #1
 800d32c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d330:	f007 071f 	and.w	r7, r7, #31
 800d334:	40bb      	lsls	r3, r7
 800d336:	4213      	tst	r3, r2
 800d338:	4629      	mov	r1, r5
 800d33a:	4620      	mov	r0, r4
 800d33c:	bf18      	it	ne
 800d33e:	f049 0902 	orrne.w	r9, r9, #2
 800d342:	f7ff fe21 	bl	800cf88 <rshift>
 800d346:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d34a:	1b76      	subs	r6, r6, r5
 800d34c:	2502      	movs	r5, #2
 800d34e:	f1b9 0f00 	cmp.w	r9, #0
 800d352:	d047      	beq.n	800d3e4 <__gethex+0x38c>
 800d354:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d015      	beq.n	800d388 <__gethex+0x330>
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d017      	beq.n	800d390 <__gethex+0x338>
 800d360:	2b01      	cmp	r3, #1
 800d362:	d109      	bne.n	800d378 <__gethex+0x320>
 800d364:	f019 0f02 	tst.w	r9, #2
 800d368:	d006      	beq.n	800d378 <__gethex+0x320>
 800d36a:	f8da 3000 	ldr.w	r3, [sl]
 800d36e:	ea49 0903 	orr.w	r9, r9, r3
 800d372:	f019 0f01 	tst.w	r9, #1
 800d376:	d10e      	bne.n	800d396 <__gethex+0x33e>
 800d378:	f045 0510 	orr.w	r5, r5, #16
 800d37c:	e032      	b.n	800d3e4 <__gethex+0x38c>
 800d37e:	f04f 0901 	mov.w	r9, #1
 800d382:	e7d1      	b.n	800d328 <__gethex+0x2d0>
 800d384:	2501      	movs	r5, #1
 800d386:	e7e2      	b.n	800d34e <__gethex+0x2f6>
 800d388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d38a:	f1c3 0301 	rsb	r3, r3, #1
 800d38e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f0      	beq.n	800d378 <__gethex+0x320>
 800d396:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d39a:	f104 0314 	add.w	r3, r4, #20
 800d39e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3a6:	f04f 0c00 	mov.w	ip, #0
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d3b4:	d01b      	beq.n	800d3ee <__gethex+0x396>
 800d3b6:	3201      	adds	r2, #1
 800d3b8:	6002      	str	r2, [r0, #0]
 800d3ba:	2d02      	cmp	r5, #2
 800d3bc:	f104 0314 	add.w	r3, r4, #20
 800d3c0:	d13c      	bne.n	800d43c <__gethex+0x3e4>
 800d3c2:	f8d8 2000 	ldr.w	r2, [r8]
 800d3c6:	3a01      	subs	r2, #1
 800d3c8:	42b2      	cmp	r2, r6
 800d3ca:	d109      	bne.n	800d3e0 <__gethex+0x388>
 800d3cc:	1171      	asrs	r1, r6, #5
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d3d4:	f006 061f 	and.w	r6, r6, #31
 800d3d8:	fa02 f606 	lsl.w	r6, r2, r6
 800d3dc:	421e      	tst	r6, r3
 800d3de:	d13a      	bne.n	800d456 <__gethex+0x3fe>
 800d3e0:	f045 0520 	orr.w	r5, r5, #32
 800d3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3e6:	601c      	str	r4, [r3, #0]
 800d3e8:	9b02      	ldr	r3, [sp, #8]
 800d3ea:	601f      	str	r7, [r3, #0]
 800d3ec:	e6b0      	b.n	800d150 <__gethex+0xf8>
 800d3ee:	4299      	cmp	r1, r3
 800d3f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800d3f4:	d8d9      	bhi.n	800d3aa <__gethex+0x352>
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	459b      	cmp	fp, r3
 800d3fa:	db17      	blt.n	800d42c <__gethex+0x3d4>
 800d3fc:	6861      	ldr	r1, [r4, #4]
 800d3fe:	9801      	ldr	r0, [sp, #4]
 800d400:	3101      	adds	r1, #1
 800d402:	f000 fbc5 	bl	800db90 <_Balloc>
 800d406:	4681      	mov	r9, r0
 800d408:	b918      	cbnz	r0, 800d412 <__gethex+0x3ba>
 800d40a:	4b1a      	ldr	r3, [pc, #104]	@ (800d474 <__gethex+0x41c>)
 800d40c:	4602      	mov	r2, r0
 800d40e:	2184      	movs	r1, #132	@ 0x84
 800d410:	e6c5      	b.n	800d19e <__gethex+0x146>
 800d412:	6922      	ldr	r2, [r4, #16]
 800d414:	3202      	adds	r2, #2
 800d416:	f104 010c 	add.w	r1, r4, #12
 800d41a:	0092      	lsls	r2, r2, #2
 800d41c:	300c      	adds	r0, #12
 800d41e:	f7fe ff46 	bl	800c2ae <memcpy>
 800d422:	4621      	mov	r1, r4
 800d424:	9801      	ldr	r0, [sp, #4]
 800d426:	f000 fbf3 	bl	800dc10 <_Bfree>
 800d42a:	464c      	mov	r4, r9
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d434:	6122      	str	r2, [r4, #16]
 800d436:	2201      	movs	r2, #1
 800d438:	615a      	str	r2, [r3, #20]
 800d43a:	e7be      	b.n	800d3ba <__gethex+0x362>
 800d43c:	6922      	ldr	r2, [r4, #16]
 800d43e:	455a      	cmp	r2, fp
 800d440:	dd0b      	ble.n	800d45a <__gethex+0x402>
 800d442:	2101      	movs	r1, #1
 800d444:	4620      	mov	r0, r4
 800d446:	f7ff fd9f 	bl	800cf88 <rshift>
 800d44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d44e:	3701      	adds	r7, #1
 800d450:	42bb      	cmp	r3, r7
 800d452:	f6ff aee0 	blt.w	800d216 <__gethex+0x1be>
 800d456:	2501      	movs	r5, #1
 800d458:	e7c2      	b.n	800d3e0 <__gethex+0x388>
 800d45a:	f016 061f 	ands.w	r6, r6, #31
 800d45e:	d0fa      	beq.n	800d456 <__gethex+0x3fe>
 800d460:	4453      	add	r3, sl
 800d462:	f1c6 0620 	rsb	r6, r6, #32
 800d466:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d46a:	f000 fc83 	bl	800dd74 <__hi0bits>
 800d46e:	42b0      	cmp	r0, r6
 800d470:	dbe7      	blt.n	800d442 <__gethex+0x3ea>
 800d472:	e7f0      	b.n	800d456 <__gethex+0x3fe>
 800d474:	0800f485 	.word	0x0800f485

0800d478 <L_shift>:
 800d478:	f1c2 0208 	rsb	r2, r2, #8
 800d47c:	0092      	lsls	r2, r2, #2
 800d47e:	b570      	push	{r4, r5, r6, lr}
 800d480:	f1c2 0620 	rsb	r6, r2, #32
 800d484:	6843      	ldr	r3, [r0, #4]
 800d486:	6804      	ldr	r4, [r0, #0]
 800d488:	fa03 f506 	lsl.w	r5, r3, r6
 800d48c:	432c      	orrs	r4, r5
 800d48e:	40d3      	lsrs	r3, r2
 800d490:	6004      	str	r4, [r0, #0]
 800d492:	f840 3f04 	str.w	r3, [r0, #4]!
 800d496:	4288      	cmp	r0, r1
 800d498:	d3f4      	bcc.n	800d484 <L_shift+0xc>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}

0800d49c <__match>:
 800d49c:	b530      	push	{r4, r5, lr}
 800d49e:	6803      	ldr	r3, [r0, #0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4a6:	b914      	cbnz	r4, 800d4ae <__match+0x12>
 800d4a8:	6003      	str	r3, [r0, #0]
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	bd30      	pop	{r4, r5, pc}
 800d4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d4b6:	2d19      	cmp	r5, #25
 800d4b8:	bf98      	it	ls
 800d4ba:	3220      	addls	r2, #32
 800d4bc:	42a2      	cmp	r2, r4
 800d4be:	d0f0      	beq.n	800d4a2 <__match+0x6>
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7f3      	b.n	800d4ac <__match+0x10>

0800d4c4 <__hexnan>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	680b      	ldr	r3, [r1, #0]
 800d4ca:	6801      	ldr	r1, [r0, #0]
 800d4cc:	115e      	asrs	r6, r3, #5
 800d4ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4d2:	f013 031f 	ands.w	r3, r3, #31
 800d4d6:	b087      	sub	sp, #28
 800d4d8:	bf18      	it	ne
 800d4da:	3604      	addne	r6, #4
 800d4dc:	2500      	movs	r5, #0
 800d4de:	1f37      	subs	r7, r6, #4
 800d4e0:	4682      	mov	sl, r0
 800d4e2:	4690      	mov	r8, r2
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4ea:	46b9      	mov	r9, r7
 800d4ec:	463c      	mov	r4, r7
 800d4ee:	9502      	str	r5, [sp, #8]
 800d4f0:	46ab      	mov	fp, r5
 800d4f2:	784a      	ldrb	r2, [r1, #1]
 800d4f4:	1c4b      	adds	r3, r1, #1
 800d4f6:	9303      	str	r3, [sp, #12]
 800d4f8:	b342      	cbz	r2, 800d54c <__hexnan+0x88>
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	9105      	str	r1, [sp, #20]
 800d4fe:	9204      	str	r2, [sp, #16]
 800d500:	f7ff fd94 	bl	800d02c <__hexdig_fun>
 800d504:	2800      	cmp	r0, #0
 800d506:	d151      	bne.n	800d5ac <__hexnan+0xe8>
 800d508:	9a04      	ldr	r2, [sp, #16]
 800d50a:	9905      	ldr	r1, [sp, #20]
 800d50c:	2a20      	cmp	r2, #32
 800d50e:	d818      	bhi.n	800d542 <__hexnan+0x7e>
 800d510:	9b02      	ldr	r3, [sp, #8]
 800d512:	459b      	cmp	fp, r3
 800d514:	dd13      	ble.n	800d53e <__hexnan+0x7a>
 800d516:	454c      	cmp	r4, r9
 800d518:	d206      	bcs.n	800d528 <__hexnan+0x64>
 800d51a:	2d07      	cmp	r5, #7
 800d51c:	dc04      	bgt.n	800d528 <__hexnan+0x64>
 800d51e:	462a      	mov	r2, r5
 800d520:	4649      	mov	r1, r9
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff ffa8 	bl	800d478 <L_shift>
 800d528:	4544      	cmp	r4, r8
 800d52a:	d952      	bls.n	800d5d2 <__hexnan+0x10e>
 800d52c:	2300      	movs	r3, #0
 800d52e:	f1a4 0904 	sub.w	r9, r4, #4
 800d532:	f844 3c04 	str.w	r3, [r4, #-4]
 800d536:	f8cd b008 	str.w	fp, [sp, #8]
 800d53a:	464c      	mov	r4, r9
 800d53c:	461d      	mov	r5, r3
 800d53e:	9903      	ldr	r1, [sp, #12]
 800d540:	e7d7      	b.n	800d4f2 <__hexnan+0x2e>
 800d542:	2a29      	cmp	r2, #41	@ 0x29
 800d544:	d157      	bne.n	800d5f6 <__hexnan+0x132>
 800d546:	3102      	adds	r1, #2
 800d548:	f8ca 1000 	str.w	r1, [sl]
 800d54c:	f1bb 0f00 	cmp.w	fp, #0
 800d550:	d051      	beq.n	800d5f6 <__hexnan+0x132>
 800d552:	454c      	cmp	r4, r9
 800d554:	d206      	bcs.n	800d564 <__hexnan+0xa0>
 800d556:	2d07      	cmp	r5, #7
 800d558:	dc04      	bgt.n	800d564 <__hexnan+0xa0>
 800d55a:	462a      	mov	r2, r5
 800d55c:	4649      	mov	r1, r9
 800d55e:	4620      	mov	r0, r4
 800d560:	f7ff ff8a 	bl	800d478 <L_shift>
 800d564:	4544      	cmp	r4, r8
 800d566:	d936      	bls.n	800d5d6 <__hexnan+0x112>
 800d568:	f1a8 0204 	sub.w	r2, r8, #4
 800d56c:	4623      	mov	r3, r4
 800d56e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d572:	f842 1f04 	str.w	r1, [r2, #4]!
 800d576:	429f      	cmp	r7, r3
 800d578:	d2f9      	bcs.n	800d56e <__hexnan+0xaa>
 800d57a:	1b3b      	subs	r3, r7, r4
 800d57c:	f023 0303 	bic.w	r3, r3, #3
 800d580:	3304      	adds	r3, #4
 800d582:	3401      	adds	r4, #1
 800d584:	3e03      	subs	r6, #3
 800d586:	42b4      	cmp	r4, r6
 800d588:	bf88      	it	hi
 800d58a:	2304      	movhi	r3, #4
 800d58c:	4443      	add	r3, r8
 800d58e:	2200      	movs	r2, #0
 800d590:	f843 2b04 	str.w	r2, [r3], #4
 800d594:	429f      	cmp	r7, r3
 800d596:	d2fb      	bcs.n	800d590 <__hexnan+0xcc>
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	b91b      	cbnz	r3, 800d5a4 <__hexnan+0xe0>
 800d59c:	4547      	cmp	r7, r8
 800d59e:	d128      	bne.n	800d5f2 <__hexnan+0x12e>
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	603b      	str	r3, [r7, #0]
 800d5a4:	2005      	movs	r0, #5
 800d5a6:	b007      	add	sp, #28
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	2d08      	cmp	r5, #8
 800d5b0:	f10b 0b01 	add.w	fp, fp, #1
 800d5b4:	dd06      	ble.n	800d5c4 <__hexnan+0x100>
 800d5b6:	4544      	cmp	r4, r8
 800d5b8:	d9c1      	bls.n	800d53e <__hexnan+0x7a>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5c0:	2501      	movs	r5, #1
 800d5c2:	3c04      	subs	r4, #4
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	f000 000f 	and.w	r0, r0, #15
 800d5ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5ce:	6020      	str	r0, [r4, #0]
 800d5d0:	e7b5      	b.n	800d53e <__hexnan+0x7a>
 800d5d2:	2508      	movs	r5, #8
 800d5d4:	e7b3      	b.n	800d53e <__hexnan+0x7a>
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0dd      	beq.n	800d598 <__hexnan+0xd4>
 800d5dc:	f1c3 0320 	rsb	r3, r3, #32
 800d5e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5e4:	40da      	lsrs	r2, r3
 800d5e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800d5f0:	e7d2      	b.n	800d598 <__hexnan+0xd4>
 800d5f2:	3f04      	subs	r7, #4
 800d5f4:	e7d0      	b.n	800d598 <__hexnan+0xd4>
 800d5f6:	2004      	movs	r0, #4
 800d5f8:	e7d5      	b.n	800d5a6 <__hexnan+0xe2>

0800d5fa <__ssputs_r>:
 800d5fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5fe:	688e      	ldr	r6, [r1, #8]
 800d600:	461f      	mov	r7, r3
 800d602:	42be      	cmp	r6, r7
 800d604:	680b      	ldr	r3, [r1, #0]
 800d606:	4682      	mov	sl, r0
 800d608:	460c      	mov	r4, r1
 800d60a:	4690      	mov	r8, r2
 800d60c:	d82d      	bhi.n	800d66a <__ssputs_r+0x70>
 800d60e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d612:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d616:	d026      	beq.n	800d666 <__ssputs_r+0x6c>
 800d618:	6965      	ldr	r5, [r4, #20]
 800d61a:	6909      	ldr	r1, [r1, #16]
 800d61c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d620:	eba3 0901 	sub.w	r9, r3, r1
 800d624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d628:	1c7b      	adds	r3, r7, #1
 800d62a:	444b      	add	r3, r9
 800d62c:	106d      	asrs	r5, r5, #1
 800d62e:	429d      	cmp	r5, r3
 800d630:	bf38      	it	cc
 800d632:	461d      	movcc	r5, r3
 800d634:	0553      	lsls	r3, r2, #21
 800d636:	d527      	bpl.n	800d688 <__ssputs_r+0x8e>
 800d638:	4629      	mov	r1, r5
 800d63a:	f000 f95f 	bl	800d8fc <_malloc_r>
 800d63e:	4606      	mov	r6, r0
 800d640:	b360      	cbz	r0, 800d69c <__ssputs_r+0xa2>
 800d642:	6921      	ldr	r1, [r4, #16]
 800d644:	464a      	mov	r2, r9
 800d646:	f7fe fe32 	bl	800c2ae <memcpy>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	6126      	str	r6, [r4, #16]
 800d658:	6165      	str	r5, [r4, #20]
 800d65a:	444e      	add	r6, r9
 800d65c:	eba5 0509 	sub.w	r5, r5, r9
 800d660:	6026      	str	r6, [r4, #0]
 800d662:	60a5      	str	r5, [r4, #8]
 800d664:	463e      	mov	r6, r7
 800d666:	42be      	cmp	r6, r7
 800d668:	d900      	bls.n	800d66c <__ssputs_r+0x72>
 800d66a:	463e      	mov	r6, r7
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	4632      	mov	r2, r6
 800d670:	4641      	mov	r1, r8
 800d672:	f000 ffbd 	bl	800e5f0 <memmove>
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	1b9b      	subs	r3, r3, r6
 800d67a:	60a3      	str	r3, [r4, #8]
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	4433      	add	r3, r6
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	2000      	movs	r0, #0
 800d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d688:	462a      	mov	r2, r5
 800d68a:	f000 ff76 	bl	800e57a <_realloc_r>
 800d68e:	4606      	mov	r6, r0
 800d690:	2800      	cmp	r0, #0
 800d692:	d1e0      	bne.n	800d656 <__ssputs_r+0x5c>
 800d694:	6921      	ldr	r1, [r4, #16]
 800d696:	4650      	mov	r0, sl
 800d698:	f001 f84c 	bl	800e734 <_free_r>
 800d69c:	230c      	movs	r3, #12
 800d69e:	f8ca 3000 	str.w	r3, [sl]
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6ae:	e7e9      	b.n	800d684 <__ssputs_r+0x8a>

0800d6b0 <_svfiprintf_r>:
 800d6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	4698      	mov	r8, r3
 800d6b6:	898b      	ldrh	r3, [r1, #12]
 800d6b8:	061b      	lsls	r3, r3, #24
 800d6ba:	b09d      	sub	sp, #116	@ 0x74
 800d6bc:	4607      	mov	r7, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	d510      	bpl.n	800d6e6 <_svfiprintf_r+0x36>
 800d6c4:	690b      	ldr	r3, [r1, #16]
 800d6c6:	b973      	cbnz	r3, 800d6e6 <_svfiprintf_r+0x36>
 800d6c8:	2140      	movs	r1, #64	@ 0x40
 800d6ca:	f000 f917 	bl	800d8fc <_malloc_r>
 800d6ce:	6028      	str	r0, [r5, #0]
 800d6d0:	6128      	str	r0, [r5, #16]
 800d6d2:	b930      	cbnz	r0, 800d6e2 <_svfiprintf_r+0x32>
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	603b      	str	r3, [r7, #0]
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6dc:	b01d      	add	sp, #116	@ 0x74
 800d6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e2:	2340      	movs	r3, #64	@ 0x40
 800d6e4:	616b      	str	r3, [r5, #20]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ea:	2320      	movs	r3, #32
 800d6ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6f4:	2330      	movs	r3, #48	@ 0x30
 800d6f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d894 <_svfiprintf_r+0x1e4>
 800d6fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6fe:	f04f 0901 	mov.w	r9, #1
 800d702:	4623      	mov	r3, r4
 800d704:	469a      	mov	sl, r3
 800d706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70a:	b10a      	cbz	r2, 800d710 <_svfiprintf_r+0x60>
 800d70c:	2a25      	cmp	r2, #37	@ 0x25
 800d70e:	d1f9      	bne.n	800d704 <_svfiprintf_r+0x54>
 800d710:	ebba 0b04 	subs.w	fp, sl, r4
 800d714:	d00b      	beq.n	800d72e <_svfiprintf_r+0x7e>
 800d716:	465b      	mov	r3, fp
 800d718:	4622      	mov	r2, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	4638      	mov	r0, r7
 800d71e:	f7ff ff6c 	bl	800d5fa <__ssputs_r>
 800d722:	3001      	adds	r0, #1
 800d724:	f000 80a7 	beq.w	800d876 <_svfiprintf_r+0x1c6>
 800d728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d72a:	445a      	add	r2, fp
 800d72c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d72e:	f89a 3000 	ldrb.w	r3, [sl]
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 809f 	beq.w	800d876 <_svfiprintf_r+0x1c6>
 800d738:	2300      	movs	r3, #0
 800d73a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d73e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d742:	f10a 0a01 	add.w	sl, sl, #1
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	9307      	str	r3, [sp, #28]
 800d74a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d74e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d750:	4654      	mov	r4, sl
 800d752:	2205      	movs	r2, #5
 800d754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d758:	484e      	ldr	r0, [pc, #312]	@ (800d894 <_svfiprintf_r+0x1e4>)
 800d75a:	f7f2 fd59 	bl	8000210 <memchr>
 800d75e:	9a04      	ldr	r2, [sp, #16]
 800d760:	b9d8      	cbnz	r0, 800d79a <_svfiprintf_r+0xea>
 800d762:	06d0      	lsls	r0, r2, #27
 800d764:	bf44      	itt	mi
 800d766:	2320      	movmi	r3, #32
 800d768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d76c:	0711      	lsls	r1, r2, #28
 800d76e:	bf44      	itt	mi
 800d770:	232b      	movmi	r3, #43	@ 0x2b
 800d772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d776:	f89a 3000 	ldrb.w	r3, [sl]
 800d77a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d77c:	d015      	beq.n	800d7aa <_svfiprintf_r+0xfa>
 800d77e:	9a07      	ldr	r2, [sp, #28]
 800d780:	4654      	mov	r4, sl
 800d782:	2000      	movs	r0, #0
 800d784:	f04f 0c0a 	mov.w	ip, #10
 800d788:	4621      	mov	r1, r4
 800d78a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d78e:	3b30      	subs	r3, #48	@ 0x30
 800d790:	2b09      	cmp	r3, #9
 800d792:	d94b      	bls.n	800d82c <_svfiprintf_r+0x17c>
 800d794:	b1b0      	cbz	r0, 800d7c4 <_svfiprintf_r+0x114>
 800d796:	9207      	str	r2, [sp, #28]
 800d798:	e014      	b.n	800d7c4 <_svfiprintf_r+0x114>
 800d79a:	eba0 0308 	sub.w	r3, r0, r8
 800d79e:	fa09 f303 	lsl.w	r3, r9, r3
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	9304      	str	r3, [sp, #16]
 800d7a6:	46a2      	mov	sl, r4
 800d7a8:	e7d2      	b.n	800d750 <_svfiprintf_r+0xa0>
 800d7aa:	9b03      	ldr	r3, [sp, #12]
 800d7ac:	1d19      	adds	r1, r3, #4
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	9103      	str	r1, [sp, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	bfbb      	ittet	lt
 800d7b6:	425b      	neglt	r3, r3
 800d7b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d7bc:	9307      	strge	r3, [sp, #28]
 800d7be:	9307      	strlt	r3, [sp, #28]
 800d7c0:	bfb8      	it	lt
 800d7c2:	9204      	strlt	r2, [sp, #16]
 800d7c4:	7823      	ldrb	r3, [r4, #0]
 800d7c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7c8:	d10a      	bne.n	800d7e0 <_svfiprintf_r+0x130>
 800d7ca:	7863      	ldrb	r3, [r4, #1]
 800d7cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ce:	d132      	bne.n	800d836 <_svfiprintf_r+0x186>
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	1d1a      	adds	r2, r3, #4
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	9203      	str	r2, [sp, #12]
 800d7d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7dc:	3402      	adds	r4, #2
 800d7de:	9305      	str	r3, [sp, #20]
 800d7e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d8a4 <_svfiprintf_r+0x1f4>
 800d7e4:	7821      	ldrb	r1, [r4, #0]
 800d7e6:	2203      	movs	r2, #3
 800d7e8:	4650      	mov	r0, sl
 800d7ea:	f7f2 fd11 	bl	8000210 <memchr>
 800d7ee:	b138      	cbz	r0, 800d800 <_svfiprintf_r+0x150>
 800d7f0:	9b04      	ldr	r3, [sp, #16]
 800d7f2:	eba0 000a 	sub.w	r0, r0, sl
 800d7f6:	2240      	movs	r2, #64	@ 0x40
 800d7f8:	4082      	lsls	r2, r0
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d804:	4824      	ldr	r0, [pc, #144]	@ (800d898 <_svfiprintf_r+0x1e8>)
 800d806:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d80a:	2206      	movs	r2, #6
 800d80c:	f7f2 fd00 	bl	8000210 <memchr>
 800d810:	2800      	cmp	r0, #0
 800d812:	d036      	beq.n	800d882 <_svfiprintf_r+0x1d2>
 800d814:	4b21      	ldr	r3, [pc, #132]	@ (800d89c <_svfiprintf_r+0x1ec>)
 800d816:	bb1b      	cbnz	r3, 800d860 <_svfiprintf_r+0x1b0>
 800d818:	9b03      	ldr	r3, [sp, #12]
 800d81a:	3307      	adds	r3, #7
 800d81c:	f023 0307 	bic.w	r3, r3, #7
 800d820:	3308      	adds	r3, #8
 800d822:	9303      	str	r3, [sp, #12]
 800d824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d826:	4433      	add	r3, r6
 800d828:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82a:	e76a      	b.n	800d702 <_svfiprintf_r+0x52>
 800d82c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d830:	460c      	mov	r4, r1
 800d832:	2001      	movs	r0, #1
 800d834:	e7a8      	b.n	800d788 <_svfiprintf_r+0xd8>
 800d836:	2300      	movs	r3, #0
 800d838:	3401      	adds	r4, #1
 800d83a:	9305      	str	r3, [sp, #20]
 800d83c:	4619      	mov	r1, r3
 800d83e:	f04f 0c0a 	mov.w	ip, #10
 800d842:	4620      	mov	r0, r4
 800d844:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d848:	3a30      	subs	r2, #48	@ 0x30
 800d84a:	2a09      	cmp	r2, #9
 800d84c:	d903      	bls.n	800d856 <_svfiprintf_r+0x1a6>
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0c6      	beq.n	800d7e0 <_svfiprintf_r+0x130>
 800d852:	9105      	str	r1, [sp, #20]
 800d854:	e7c4      	b.n	800d7e0 <_svfiprintf_r+0x130>
 800d856:	fb0c 2101 	mla	r1, ip, r1, r2
 800d85a:	4604      	mov	r4, r0
 800d85c:	2301      	movs	r3, #1
 800d85e:	e7f0      	b.n	800d842 <_svfiprintf_r+0x192>
 800d860:	ab03      	add	r3, sp, #12
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	462a      	mov	r2, r5
 800d866:	4b0e      	ldr	r3, [pc, #56]	@ (800d8a0 <_svfiprintf_r+0x1f0>)
 800d868:	a904      	add	r1, sp, #16
 800d86a:	4638      	mov	r0, r7
 800d86c:	f7fc ff6c 	bl	800a748 <_printf_float>
 800d870:	1c42      	adds	r2, r0, #1
 800d872:	4606      	mov	r6, r0
 800d874:	d1d6      	bne.n	800d824 <_svfiprintf_r+0x174>
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	065b      	lsls	r3, r3, #25
 800d87a:	f53f af2d 	bmi.w	800d6d8 <_svfiprintf_r+0x28>
 800d87e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d880:	e72c      	b.n	800d6dc <_svfiprintf_r+0x2c>
 800d882:	ab03      	add	r3, sp, #12
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	462a      	mov	r2, r5
 800d888:	4b05      	ldr	r3, [pc, #20]	@ (800d8a0 <_svfiprintf_r+0x1f0>)
 800d88a:	a904      	add	r1, sp, #16
 800d88c:	4638      	mov	r0, r7
 800d88e:	f7fd f9f3 	bl	800ac78 <_printf_i>
 800d892:	e7ed      	b.n	800d870 <_svfiprintf_r+0x1c0>
 800d894:	0800f4f6 	.word	0x0800f4f6
 800d898:	0800f500 	.word	0x0800f500
 800d89c:	0800a749 	.word	0x0800a749
 800d8a0:	0800d5fb 	.word	0x0800d5fb
 800d8a4:	0800f4fc 	.word	0x0800f4fc

0800d8a8 <malloc>:
 800d8a8:	4b02      	ldr	r3, [pc, #8]	@ (800d8b4 <malloc+0xc>)
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	f000 b825 	b.w	800d8fc <_malloc_r>
 800d8b2:	bf00      	nop
 800d8b4:	200001a0 	.word	0x200001a0

0800d8b8 <sbrk_aligned>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	4e0f      	ldr	r6, [pc, #60]	@ (800d8f8 <sbrk_aligned+0x40>)
 800d8bc:	460c      	mov	r4, r1
 800d8be:	6831      	ldr	r1, [r6, #0]
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	b911      	cbnz	r1, 800d8ca <sbrk_aligned+0x12>
 800d8c4:	f000 fee2 	bl	800e68c <_sbrk_r>
 800d8c8:	6030      	str	r0, [r6, #0]
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	f000 fedd 	bl	800e68c <_sbrk_r>
 800d8d2:	1c43      	adds	r3, r0, #1
 800d8d4:	d103      	bne.n	800d8de <sbrk_aligned+0x26>
 800d8d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d8da:	4620      	mov	r0, r4
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	1cc4      	adds	r4, r0, #3
 800d8e0:	f024 0403 	bic.w	r4, r4, #3
 800d8e4:	42a0      	cmp	r0, r4
 800d8e6:	d0f8      	beq.n	800d8da <sbrk_aligned+0x22>
 800d8e8:	1a21      	subs	r1, r4, r0
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	f000 fece 	bl	800e68c <_sbrk_r>
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d1f2      	bne.n	800d8da <sbrk_aligned+0x22>
 800d8f4:	e7ef      	b.n	800d8d6 <sbrk_aligned+0x1e>
 800d8f6:	bf00      	nop
 800d8f8:	2000699c 	.word	0x2000699c

0800d8fc <_malloc_r>:
 800d8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d900:	1ccd      	adds	r5, r1, #3
 800d902:	f025 0503 	bic.w	r5, r5, #3
 800d906:	3508      	adds	r5, #8
 800d908:	2d0c      	cmp	r5, #12
 800d90a:	bf38      	it	cc
 800d90c:	250c      	movcc	r5, #12
 800d90e:	2d00      	cmp	r5, #0
 800d910:	4606      	mov	r6, r0
 800d912:	db01      	blt.n	800d918 <_malloc_r+0x1c>
 800d914:	42a9      	cmp	r1, r5
 800d916:	d904      	bls.n	800d922 <_malloc_r+0x26>
 800d918:	230c      	movs	r3, #12
 800d91a:	6033      	str	r3, [r6, #0]
 800d91c:	2000      	movs	r0, #0
 800d91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9f8 <_malloc_r+0xfc>
 800d926:	f000 f927 	bl	800db78 <__malloc_lock>
 800d92a:	f8d8 3000 	ldr.w	r3, [r8]
 800d92e:	461c      	mov	r4, r3
 800d930:	bb44      	cbnz	r4, 800d984 <_malloc_r+0x88>
 800d932:	4629      	mov	r1, r5
 800d934:	4630      	mov	r0, r6
 800d936:	f7ff ffbf 	bl	800d8b8 <sbrk_aligned>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	4604      	mov	r4, r0
 800d93e:	d158      	bne.n	800d9f2 <_malloc_r+0xf6>
 800d940:	f8d8 4000 	ldr.w	r4, [r8]
 800d944:	4627      	mov	r7, r4
 800d946:	2f00      	cmp	r7, #0
 800d948:	d143      	bne.n	800d9d2 <_malloc_r+0xd6>
 800d94a:	2c00      	cmp	r4, #0
 800d94c:	d04b      	beq.n	800d9e6 <_malloc_r+0xea>
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	4639      	mov	r1, r7
 800d952:	4630      	mov	r0, r6
 800d954:	eb04 0903 	add.w	r9, r4, r3
 800d958:	f000 fe98 	bl	800e68c <_sbrk_r>
 800d95c:	4581      	cmp	r9, r0
 800d95e:	d142      	bne.n	800d9e6 <_malloc_r+0xea>
 800d960:	6821      	ldr	r1, [r4, #0]
 800d962:	1a6d      	subs	r5, r5, r1
 800d964:	4629      	mov	r1, r5
 800d966:	4630      	mov	r0, r6
 800d968:	f7ff ffa6 	bl	800d8b8 <sbrk_aligned>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d03a      	beq.n	800d9e6 <_malloc_r+0xea>
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	442b      	add	r3, r5
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	f8d8 3000 	ldr.w	r3, [r8]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	bb62      	cbnz	r2, 800d9d8 <_malloc_r+0xdc>
 800d97e:	f8c8 7000 	str.w	r7, [r8]
 800d982:	e00f      	b.n	800d9a4 <_malloc_r+0xa8>
 800d984:	6822      	ldr	r2, [r4, #0]
 800d986:	1b52      	subs	r2, r2, r5
 800d988:	d420      	bmi.n	800d9cc <_malloc_r+0xd0>
 800d98a:	2a0b      	cmp	r2, #11
 800d98c:	d917      	bls.n	800d9be <_malloc_r+0xc2>
 800d98e:	1961      	adds	r1, r4, r5
 800d990:	42a3      	cmp	r3, r4
 800d992:	6025      	str	r5, [r4, #0]
 800d994:	bf18      	it	ne
 800d996:	6059      	strne	r1, [r3, #4]
 800d998:	6863      	ldr	r3, [r4, #4]
 800d99a:	bf08      	it	eq
 800d99c:	f8c8 1000 	streq.w	r1, [r8]
 800d9a0:	5162      	str	r2, [r4, r5]
 800d9a2:	604b      	str	r3, [r1, #4]
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f000 f8ed 	bl	800db84 <__malloc_unlock>
 800d9aa:	f104 000b 	add.w	r0, r4, #11
 800d9ae:	1d23      	adds	r3, r4, #4
 800d9b0:	f020 0007 	bic.w	r0, r0, #7
 800d9b4:	1ac2      	subs	r2, r0, r3
 800d9b6:	bf1c      	itt	ne
 800d9b8:	1a1b      	subne	r3, r3, r0
 800d9ba:	50a3      	strne	r3, [r4, r2]
 800d9bc:	e7af      	b.n	800d91e <_malloc_r+0x22>
 800d9be:	6862      	ldr	r2, [r4, #4]
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	bf0c      	ite	eq
 800d9c4:	f8c8 2000 	streq.w	r2, [r8]
 800d9c8:	605a      	strne	r2, [r3, #4]
 800d9ca:	e7eb      	b.n	800d9a4 <_malloc_r+0xa8>
 800d9cc:	4623      	mov	r3, r4
 800d9ce:	6864      	ldr	r4, [r4, #4]
 800d9d0:	e7ae      	b.n	800d930 <_malloc_r+0x34>
 800d9d2:	463c      	mov	r4, r7
 800d9d4:	687f      	ldr	r7, [r7, #4]
 800d9d6:	e7b6      	b.n	800d946 <_malloc_r+0x4a>
 800d9d8:	461a      	mov	r2, r3
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d1fb      	bne.n	800d9d8 <_malloc_r+0xdc>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6053      	str	r3, [r2, #4]
 800d9e4:	e7de      	b.n	800d9a4 <_malloc_r+0xa8>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	6033      	str	r3, [r6, #0]
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f000 f8ca 	bl	800db84 <__malloc_unlock>
 800d9f0:	e794      	b.n	800d91c <_malloc_r+0x20>
 800d9f2:	6005      	str	r5, [r0, #0]
 800d9f4:	e7d6      	b.n	800d9a4 <_malloc_r+0xa8>
 800d9f6:	bf00      	nop
 800d9f8:	200069a0 	.word	0x200069a0

0800d9fc <__ascii_mbtowc>:
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	b901      	cbnz	r1, 800da02 <__ascii_mbtowc+0x6>
 800da00:	a901      	add	r1, sp, #4
 800da02:	b142      	cbz	r2, 800da16 <__ascii_mbtowc+0x1a>
 800da04:	b14b      	cbz	r3, 800da1a <__ascii_mbtowc+0x1e>
 800da06:	7813      	ldrb	r3, [r2, #0]
 800da08:	600b      	str	r3, [r1, #0]
 800da0a:	7812      	ldrb	r2, [r2, #0]
 800da0c:	1e10      	subs	r0, r2, #0
 800da0e:	bf18      	it	ne
 800da10:	2001      	movne	r0, #1
 800da12:	b002      	add	sp, #8
 800da14:	4770      	bx	lr
 800da16:	4610      	mov	r0, r2
 800da18:	e7fb      	b.n	800da12 <__ascii_mbtowc+0x16>
 800da1a:	f06f 0001 	mvn.w	r0, #1
 800da1e:	e7f8      	b.n	800da12 <__ascii_mbtowc+0x16>

0800da20 <__sflush_r>:
 800da20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	0716      	lsls	r6, r2, #28
 800da2a:	4605      	mov	r5, r0
 800da2c:	460c      	mov	r4, r1
 800da2e:	d454      	bmi.n	800dada <__sflush_r+0xba>
 800da30:	684b      	ldr	r3, [r1, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	dc02      	bgt.n	800da3c <__sflush_r+0x1c>
 800da36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da38:	2b00      	cmp	r3, #0
 800da3a:	dd48      	ble.n	800dace <__sflush_r+0xae>
 800da3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da3e:	2e00      	cmp	r6, #0
 800da40:	d045      	beq.n	800dace <__sflush_r+0xae>
 800da42:	2300      	movs	r3, #0
 800da44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da48:	682f      	ldr	r7, [r5, #0]
 800da4a:	6a21      	ldr	r1, [r4, #32]
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	d030      	beq.n	800dab2 <__sflush_r+0x92>
 800da50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	0759      	lsls	r1, r3, #29
 800da56:	d505      	bpl.n	800da64 <__sflush_r+0x44>
 800da58:	6863      	ldr	r3, [r4, #4]
 800da5a:	1ad2      	subs	r2, r2, r3
 800da5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da5e:	b10b      	cbz	r3, 800da64 <__sflush_r+0x44>
 800da60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da62:	1ad2      	subs	r2, r2, r3
 800da64:	2300      	movs	r3, #0
 800da66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da68:	6a21      	ldr	r1, [r4, #32]
 800da6a:	4628      	mov	r0, r5
 800da6c:	47b0      	blx	r6
 800da6e:	1c43      	adds	r3, r0, #1
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	d106      	bne.n	800da82 <__sflush_r+0x62>
 800da74:	6829      	ldr	r1, [r5, #0]
 800da76:	291d      	cmp	r1, #29
 800da78:	d82b      	bhi.n	800dad2 <__sflush_r+0xb2>
 800da7a:	4a2a      	ldr	r2, [pc, #168]	@ (800db24 <__sflush_r+0x104>)
 800da7c:	410a      	asrs	r2, r1
 800da7e:	07d6      	lsls	r6, r2, #31
 800da80:	d427      	bmi.n	800dad2 <__sflush_r+0xb2>
 800da82:	2200      	movs	r2, #0
 800da84:	6062      	str	r2, [r4, #4]
 800da86:	04d9      	lsls	r1, r3, #19
 800da88:	6922      	ldr	r2, [r4, #16]
 800da8a:	6022      	str	r2, [r4, #0]
 800da8c:	d504      	bpl.n	800da98 <__sflush_r+0x78>
 800da8e:	1c42      	adds	r2, r0, #1
 800da90:	d101      	bne.n	800da96 <__sflush_r+0x76>
 800da92:	682b      	ldr	r3, [r5, #0]
 800da94:	b903      	cbnz	r3, 800da98 <__sflush_r+0x78>
 800da96:	6560      	str	r0, [r4, #84]	@ 0x54
 800da98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da9a:	602f      	str	r7, [r5, #0]
 800da9c:	b1b9      	cbz	r1, 800dace <__sflush_r+0xae>
 800da9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daa2:	4299      	cmp	r1, r3
 800daa4:	d002      	beq.n	800daac <__sflush_r+0x8c>
 800daa6:	4628      	mov	r0, r5
 800daa8:	f000 fe44 	bl	800e734 <_free_r>
 800daac:	2300      	movs	r3, #0
 800daae:	6363      	str	r3, [r4, #52]	@ 0x34
 800dab0:	e00d      	b.n	800dace <__sflush_r+0xae>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4628      	mov	r0, r5
 800dab6:	47b0      	blx	r6
 800dab8:	4602      	mov	r2, r0
 800daba:	1c50      	adds	r0, r2, #1
 800dabc:	d1c9      	bne.n	800da52 <__sflush_r+0x32>
 800dabe:	682b      	ldr	r3, [r5, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d0c6      	beq.n	800da52 <__sflush_r+0x32>
 800dac4:	2b1d      	cmp	r3, #29
 800dac6:	d001      	beq.n	800dacc <__sflush_r+0xac>
 800dac8:	2b16      	cmp	r3, #22
 800daca:	d11e      	bne.n	800db0a <__sflush_r+0xea>
 800dacc:	602f      	str	r7, [r5, #0]
 800dace:	2000      	movs	r0, #0
 800dad0:	e022      	b.n	800db18 <__sflush_r+0xf8>
 800dad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dad6:	b21b      	sxth	r3, r3
 800dad8:	e01b      	b.n	800db12 <__sflush_r+0xf2>
 800dada:	690f      	ldr	r7, [r1, #16]
 800dadc:	2f00      	cmp	r7, #0
 800dade:	d0f6      	beq.n	800dace <__sflush_r+0xae>
 800dae0:	0793      	lsls	r3, r2, #30
 800dae2:	680e      	ldr	r6, [r1, #0]
 800dae4:	bf08      	it	eq
 800dae6:	694b      	ldreq	r3, [r1, #20]
 800dae8:	600f      	str	r7, [r1, #0]
 800daea:	bf18      	it	ne
 800daec:	2300      	movne	r3, #0
 800daee:	eba6 0807 	sub.w	r8, r6, r7
 800daf2:	608b      	str	r3, [r1, #8]
 800daf4:	f1b8 0f00 	cmp.w	r8, #0
 800daf8:	dde9      	ble.n	800dace <__sflush_r+0xae>
 800dafa:	6a21      	ldr	r1, [r4, #32]
 800dafc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dafe:	4643      	mov	r3, r8
 800db00:	463a      	mov	r2, r7
 800db02:	4628      	mov	r0, r5
 800db04:	47b0      	blx	r6
 800db06:	2800      	cmp	r0, #0
 800db08:	dc08      	bgt.n	800db1c <__sflush_r+0xfc>
 800db0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db12:	81a3      	strh	r3, [r4, #12]
 800db14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1c:	4407      	add	r7, r0
 800db1e:	eba8 0800 	sub.w	r8, r8, r0
 800db22:	e7e7      	b.n	800daf4 <__sflush_r+0xd4>
 800db24:	dfbffffe 	.word	0xdfbffffe

0800db28 <_fflush_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	690b      	ldr	r3, [r1, #16]
 800db2c:	4605      	mov	r5, r0
 800db2e:	460c      	mov	r4, r1
 800db30:	b913      	cbnz	r3, 800db38 <_fflush_r+0x10>
 800db32:	2500      	movs	r5, #0
 800db34:	4628      	mov	r0, r5
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	b118      	cbz	r0, 800db42 <_fflush_r+0x1a>
 800db3a:	6a03      	ldr	r3, [r0, #32]
 800db3c:	b90b      	cbnz	r3, 800db42 <_fflush_r+0x1a>
 800db3e:	f7fd fcaf 	bl	800b4a0 <__sinit>
 800db42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d0f3      	beq.n	800db32 <_fflush_r+0xa>
 800db4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db4c:	07d0      	lsls	r0, r2, #31
 800db4e:	d404      	bmi.n	800db5a <_fflush_r+0x32>
 800db50:	0599      	lsls	r1, r3, #22
 800db52:	d402      	bmi.n	800db5a <_fflush_r+0x32>
 800db54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db56:	f7fe fba8 	bl	800c2aa <__retarget_lock_acquire_recursive>
 800db5a:	4628      	mov	r0, r5
 800db5c:	4621      	mov	r1, r4
 800db5e:	f7ff ff5f 	bl	800da20 <__sflush_r>
 800db62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db64:	07da      	lsls	r2, r3, #31
 800db66:	4605      	mov	r5, r0
 800db68:	d4e4      	bmi.n	800db34 <_fflush_r+0xc>
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	059b      	lsls	r3, r3, #22
 800db6e:	d4e1      	bmi.n	800db34 <_fflush_r+0xc>
 800db70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db72:	f7fe fb9b 	bl	800c2ac <__retarget_lock_release_recursive>
 800db76:	e7dd      	b.n	800db34 <_fflush_r+0xc>

0800db78 <__malloc_lock>:
 800db78:	4801      	ldr	r0, [pc, #4]	@ (800db80 <__malloc_lock+0x8>)
 800db7a:	f7fe bb96 	b.w	800c2aa <__retarget_lock_acquire_recursive>
 800db7e:	bf00      	nop
 800db80:	20006998 	.word	0x20006998

0800db84 <__malloc_unlock>:
 800db84:	4801      	ldr	r0, [pc, #4]	@ (800db8c <__malloc_unlock+0x8>)
 800db86:	f7fe bb91 	b.w	800c2ac <__retarget_lock_release_recursive>
 800db8a:	bf00      	nop
 800db8c:	20006998 	.word	0x20006998

0800db90 <_Balloc>:
 800db90:	b570      	push	{r4, r5, r6, lr}
 800db92:	69c6      	ldr	r6, [r0, #28]
 800db94:	4604      	mov	r4, r0
 800db96:	460d      	mov	r5, r1
 800db98:	b976      	cbnz	r6, 800dbb8 <_Balloc+0x28>
 800db9a:	2010      	movs	r0, #16
 800db9c:	f7ff fe84 	bl	800d8a8 <malloc>
 800dba0:	4602      	mov	r2, r0
 800dba2:	61e0      	str	r0, [r4, #28]
 800dba4:	b920      	cbnz	r0, 800dbb0 <_Balloc+0x20>
 800dba6:	4b18      	ldr	r3, [pc, #96]	@ (800dc08 <_Balloc+0x78>)
 800dba8:	4818      	ldr	r0, [pc, #96]	@ (800dc0c <_Balloc+0x7c>)
 800dbaa:	216b      	movs	r1, #107	@ 0x6b
 800dbac:	f000 fd90 	bl	800e6d0 <__assert_func>
 800dbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbb4:	6006      	str	r6, [r0, #0]
 800dbb6:	60c6      	str	r6, [r0, #12]
 800dbb8:	69e6      	ldr	r6, [r4, #28]
 800dbba:	68f3      	ldr	r3, [r6, #12]
 800dbbc:	b183      	cbz	r3, 800dbe0 <_Balloc+0x50>
 800dbbe:	69e3      	ldr	r3, [r4, #28]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbc6:	b9b8      	cbnz	r0, 800dbf8 <_Balloc+0x68>
 800dbc8:	2101      	movs	r1, #1
 800dbca:	fa01 f605 	lsl.w	r6, r1, r5
 800dbce:	1d72      	adds	r2, r6, #5
 800dbd0:	0092      	lsls	r2, r2, #2
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fd9a 	bl	800e70c <_calloc_r>
 800dbd8:	b160      	cbz	r0, 800dbf4 <_Balloc+0x64>
 800dbda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbde:	e00e      	b.n	800dbfe <_Balloc+0x6e>
 800dbe0:	2221      	movs	r2, #33	@ 0x21
 800dbe2:	2104      	movs	r1, #4
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fd91 	bl	800e70c <_calloc_r>
 800dbea:	69e3      	ldr	r3, [r4, #28]
 800dbec:	60f0      	str	r0, [r6, #12]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1e4      	bne.n	800dbbe <_Balloc+0x2e>
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	6802      	ldr	r2, [r0, #0]
 800dbfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc04:	e7f7      	b.n	800dbf6 <_Balloc+0x66>
 800dc06:	bf00      	nop
 800dc08:	0800f416 	.word	0x0800f416
 800dc0c:	0800f507 	.word	0x0800f507

0800dc10 <_Bfree>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	69c6      	ldr	r6, [r0, #28]
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	b976      	cbnz	r6, 800dc38 <_Bfree+0x28>
 800dc1a:	2010      	movs	r0, #16
 800dc1c:	f7ff fe44 	bl	800d8a8 <malloc>
 800dc20:	4602      	mov	r2, r0
 800dc22:	61e8      	str	r0, [r5, #28]
 800dc24:	b920      	cbnz	r0, 800dc30 <_Bfree+0x20>
 800dc26:	4b09      	ldr	r3, [pc, #36]	@ (800dc4c <_Bfree+0x3c>)
 800dc28:	4809      	ldr	r0, [pc, #36]	@ (800dc50 <_Bfree+0x40>)
 800dc2a:	218f      	movs	r1, #143	@ 0x8f
 800dc2c:	f000 fd50 	bl	800e6d0 <__assert_func>
 800dc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc34:	6006      	str	r6, [r0, #0]
 800dc36:	60c6      	str	r6, [r0, #12]
 800dc38:	b13c      	cbz	r4, 800dc4a <_Bfree+0x3a>
 800dc3a:	69eb      	ldr	r3, [r5, #28]
 800dc3c:	6862      	ldr	r2, [r4, #4]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc44:	6021      	str	r1, [r4, #0]
 800dc46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}
 800dc4c:	0800f416 	.word	0x0800f416
 800dc50:	0800f507 	.word	0x0800f507

0800dc54 <__multadd>:
 800dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc58:	690d      	ldr	r5, [r1, #16]
 800dc5a:	4607      	mov	r7, r0
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	461e      	mov	r6, r3
 800dc60:	f101 0c14 	add.w	ip, r1, #20
 800dc64:	2000      	movs	r0, #0
 800dc66:	f8dc 3000 	ldr.w	r3, [ip]
 800dc6a:	b299      	uxth	r1, r3
 800dc6c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc70:	0c1e      	lsrs	r6, r3, #16
 800dc72:	0c0b      	lsrs	r3, r1, #16
 800dc74:	fb02 3306 	mla	r3, r2, r6, r3
 800dc78:	b289      	uxth	r1, r1
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc80:	4285      	cmp	r5, r0
 800dc82:	f84c 1b04 	str.w	r1, [ip], #4
 800dc86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc8a:	dcec      	bgt.n	800dc66 <__multadd+0x12>
 800dc8c:	b30e      	cbz	r6, 800dcd2 <__multadd+0x7e>
 800dc8e:	68a3      	ldr	r3, [r4, #8]
 800dc90:	42ab      	cmp	r3, r5
 800dc92:	dc19      	bgt.n	800dcc8 <__multadd+0x74>
 800dc94:	6861      	ldr	r1, [r4, #4]
 800dc96:	4638      	mov	r0, r7
 800dc98:	3101      	adds	r1, #1
 800dc9a:	f7ff ff79 	bl	800db90 <_Balloc>
 800dc9e:	4680      	mov	r8, r0
 800dca0:	b928      	cbnz	r0, 800dcae <__multadd+0x5a>
 800dca2:	4602      	mov	r2, r0
 800dca4:	4b0c      	ldr	r3, [pc, #48]	@ (800dcd8 <__multadd+0x84>)
 800dca6:	480d      	ldr	r0, [pc, #52]	@ (800dcdc <__multadd+0x88>)
 800dca8:	21ba      	movs	r1, #186	@ 0xba
 800dcaa:	f000 fd11 	bl	800e6d0 <__assert_func>
 800dcae:	6922      	ldr	r2, [r4, #16]
 800dcb0:	3202      	adds	r2, #2
 800dcb2:	f104 010c 	add.w	r1, r4, #12
 800dcb6:	0092      	lsls	r2, r2, #2
 800dcb8:	300c      	adds	r0, #12
 800dcba:	f7fe faf8 	bl	800c2ae <memcpy>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	f7ff ffa5 	bl	800dc10 <_Bfree>
 800dcc6:	4644      	mov	r4, r8
 800dcc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dccc:	3501      	adds	r5, #1
 800dcce:	615e      	str	r6, [r3, #20]
 800dcd0:	6125      	str	r5, [r4, #16]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd8:	0800f485 	.word	0x0800f485
 800dcdc:	0800f507 	.word	0x0800f507

0800dce0 <__s2b>:
 800dce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce4:	460c      	mov	r4, r1
 800dce6:	4615      	mov	r5, r2
 800dce8:	461f      	mov	r7, r3
 800dcea:	2209      	movs	r2, #9
 800dcec:	3308      	adds	r3, #8
 800dcee:	4606      	mov	r6, r0
 800dcf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	db09      	blt.n	800dd10 <__s2b+0x30>
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7ff ff47 	bl	800db90 <_Balloc>
 800dd02:	b940      	cbnz	r0, 800dd16 <__s2b+0x36>
 800dd04:	4602      	mov	r2, r0
 800dd06:	4b19      	ldr	r3, [pc, #100]	@ (800dd6c <__s2b+0x8c>)
 800dd08:	4819      	ldr	r0, [pc, #100]	@ (800dd70 <__s2b+0x90>)
 800dd0a:	21d3      	movs	r1, #211	@ 0xd3
 800dd0c:	f000 fce0 	bl	800e6d0 <__assert_func>
 800dd10:	0052      	lsls	r2, r2, #1
 800dd12:	3101      	adds	r1, #1
 800dd14:	e7f0      	b.n	800dcf8 <__s2b+0x18>
 800dd16:	9b08      	ldr	r3, [sp, #32]
 800dd18:	6143      	str	r3, [r0, #20]
 800dd1a:	2d09      	cmp	r5, #9
 800dd1c:	f04f 0301 	mov.w	r3, #1
 800dd20:	6103      	str	r3, [r0, #16]
 800dd22:	dd16      	ble.n	800dd52 <__s2b+0x72>
 800dd24:	f104 0909 	add.w	r9, r4, #9
 800dd28:	46c8      	mov	r8, r9
 800dd2a:	442c      	add	r4, r5
 800dd2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd30:	4601      	mov	r1, r0
 800dd32:	3b30      	subs	r3, #48	@ 0x30
 800dd34:	220a      	movs	r2, #10
 800dd36:	4630      	mov	r0, r6
 800dd38:	f7ff ff8c 	bl	800dc54 <__multadd>
 800dd3c:	45a0      	cmp	r8, r4
 800dd3e:	d1f5      	bne.n	800dd2c <__s2b+0x4c>
 800dd40:	f1a5 0408 	sub.w	r4, r5, #8
 800dd44:	444c      	add	r4, r9
 800dd46:	1b2d      	subs	r5, r5, r4
 800dd48:	1963      	adds	r3, r4, r5
 800dd4a:	42bb      	cmp	r3, r7
 800dd4c:	db04      	blt.n	800dd58 <__s2b+0x78>
 800dd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd52:	340a      	adds	r4, #10
 800dd54:	2509      	movs	r5, #9
 800dd56:	e7f6      	b.n	800dd46 <__s2b+0x66>
 800dd58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd5c:	4601      	mov	r1, r0
 800dd5e:	3b30      	subs	r3, #48	@ 0x30
 800dd60:	220a      	movs	r2, #10
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff ff76 	bl	800dc54 <__multadd>
 800dd68:	e7ee      	b.n	800dd48 <__s2b+0x68>
 800dd6a:	bf00      	nop
 800dd6c:	0800f485 	.word	0x0800f485
 800dd70:	0800f507 	.word	0x0800f507

0800dd74 <__hi0bits>:
 800dd74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd78:	4603      	mov	r3, r0
 800dd7a:	bf36      	itet	cc
 800dd7c:	0403      	lslcc	r3, r0, #16
 800dd7e:	2000      	movcs	r0, #0
 800dd80:	2010      	movcc	r0, #16
 800dd82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd86:	bf3c      	itt	cc
 800dd88:	021b      	lslcc	r3, r3, #8
 800dd8a:	3008      	addcc	r0, #8
 800dd8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd90:	bf3c      	itt	cc
 800dd92:	011b      	lslcc	r3, r3, #4
 800dd94:	3004      	addcc	r0, #4
 800dd96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd9a:	bf3c      	itt	cc
 800dd9c:	009b      	lslcc	r3, r3, #2
 800dd9e:	3002      	addcc	r0, #2
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	db05      	blt.n	800ddb0 <__hi0bits+0x3c>
 800dda4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dda8:	f100 0001 	add.w	r0, r0, #1
 800ddac:	bf08      	it	eq
 800ddae:	2020      	moveq	r0, #32
 800ddb0:	4770      	bx	lr

0800ddb2 <__lo0bits>:
 800ddb2:	6803      	ldr	r3, [r0, #0]
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	f013 0007 	ands.w	r0, r3, #7
 800ddba:	d00b      	beq.n	800ddd4 <__lo0bits+0x22>
 800ddbc:	07d9      	lsls	r1, r3, #31
 800ddbe:	d421      	bmi.n	800de04 <__lo0bits+0x52>
 800ddc0:	0798      	lsls	r0, r3, #30
 800ddc2:	bf49      	itett	mi
 800ddc4:	085b      	lsrmi	r3, r3, #1
 800ddc6:	089b      	lsrpl	r3, r3, #2
 800ddc8:	2001      	movmi	r0, #1
 800ddca:	6013      	strmi	r3, [r2, #0]
 800ddcc:	bf5c      	itt	pl
 800ddce:	6013      	strpl	r3, [r2, #0]
 800ddd0:	2002      	movpl	r0, #2
 800ddd2:	4770      	bx	lr
 800ddd4:	b299      	uxth	r1, r3
 800ddd6:	b909      	cbnz	r1, 800dddc <__lo0bits+0x2a>
 800ddd8:	0c1b      	lsrs	r3, r3, #16
 800ddda:	2010      	movs	r0, #16
 800dddc:	b2d9      	uxtb	r1, r3
 800ddde:	b909      	cbnz	r1, 800dde4 <__lo0bits+0x32>
 800dde0:	3008      	adds	r0, #8
 800dde2:	0a1b      	lsrs	r3, r3, #8
 800dde4:	0719      	lsls	r1, r3, #28
 800dde6:	bf04      	itt	eq
 800dde8:	091b      	lsreq	r3, r3, #4
 800ddea:	3004      	addeq	r0, #4
 800ddec:	0799      	lsls	r1, r3, #30
 800ddee:	bf04      	itt	eq
 800ddf0:	089b      	lsreq	r3, r3, #2
 800ddf2:	3002      	addeq	r0, #2
 800ddf4:	07d9      	lsls	r1, r3, #31
 800ddf6:	d403      	bmi.n	800de00 <__lo0bits+0x4e>
 800ddf8:	085b      	lsrs	r3, r3, #1
 800ddfa:	f100 0001 	add.w	r0, r0, #1
 800ddfe:	d003      	beq.n	800de08 <__lo0bits+0x56>
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	4770      	bx	lr
 800de04:	2000      	movs	r0, #0
 800de06:	4770      	bx	lr
 800de08:	2020      	movs	r0, #32
 800de0a:	4770      	bx	lr

0800de0c <__i2b>:
 800de0c:	b510      	push	{r4, lr}
 800de0e:	460c      	mov	r4, r1
 800de10:	2101      	movs	r1, #1
 800de12:	f7ff febd 	bl	800db90 <_Balloc>
 800de16:	4602      	mov	r2, r0
 800de18:	b928      	cbnz	r0, 800de26 <__i2b+0x1a>
 800de1a:	4b05      	ldr	r3, [pc, #20]	@ (800de30 <__i2b+0x24>)
 800de1c:	4805      	ldr	r0, [pc, #20]	@ (800de34 <__i2b+0x28>)
 800de1e:	f240 1145 	movw	r1, #325	@ 0x145
 800de22:	f000 fc55 	bl	800e6d0 <__assert_func>
 800de26:	2301      	movs	r3, #1
 800de28:	6144      	str	r4, [r0, #20]
 800de2a:	6103      	str	r3, [r0, #16]
 800de2c:	bd10      	pop	{r4, pc}
 800de2e:	bf00      	nop
 800de30:	0800f485 	.word	0x0800f485
 800de34:	0800f507 	.word	0x0800f507

0800de38 <__multiply>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	4614      	mov	r4, r2
 800de3e:	690a      	ldr	r2, [r1, #16]
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	429a      	cmp	r2, r3
 800de44:	bfa8      	it	ge
 800de46:	4623      	movge	r3, r4
 800de48:	460f      	mov	r7, r1
 800de4a:	bfa4      	itt	ge
 800de4c:	460c      	movge	r4, r1
 800de4e:	461f      	movge	r7, r3
 800de50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800de54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800de58:	68a3      	ldr	r3, [r4, #8]
 800de5a:	6861      	ldr	r1, [r4, #4]
 800de5c:	eb0a 0609 	add.w	r6, sl, r9
 800de60:	42b3      	cmp	r3, r6
 800de62:	b085      	sub	sp, #20
 800de64:	bfb8      	it	lt
 800de66:	3101      	addlt	r1, #1
 800de68:	f7ff fe92 	bl	800db90 <_Balloc>
 800de6c:	b930      	cbnz	r0, 800de7c <__multiply+0x44>
 800de6e:	4602      	mov	r2, r0
 800de70:	4b44      	ldr	r3, [pc, #272]	@ (800df84 <__multiply+0x14c>)
 800de72:	4845      	ldr	r0, [pc, #276]	@ (800df88 <__multiply+0x150>)
 800de74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de78:	f000 fc2a 	bl	800e6d0 <__assert_func>
 800de7c:	f100 0514 	add.w	r5, r0, #20
 800de80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de84:	462b      	mov	r3, r5
 800de86:	2200      	movs	r2, #0
 800de88:	4543      	cmp	r3, r8
 800de8a:	d321      	bcc.n	800ded0 <__multiply+0x98>
 800de8c:	f107 0114 	add.w	r1, r7, #20
 800de90:	f104 0214 	add.w	r2, r4, #20
 800de94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de9c:	9302      	str	r3, [sp, #8]
 800de9e:	1b13      	subs	r3, r2, r4
 800dea0:	3b15      	subs	r3, #21
 800dea2:	f023 0303 	bic.w	r3, r3, #3
 800dea6:	3304      	adds	r3, #4
 800dea8:	f104 0715 	add.w	r7, r4, #21
 800deac:	42ba      	cmp	r2, r7
 800deae:	bf38      	it	cc
 800deb0:	2304      	movcc	r3, #4
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	9b02      	ldr	r3, [sp, #8]
 800deb6:	9103      	str	r1, [sp, #12]
 800deb8:	428b      	cmp	r3, r1
 800deba:	d80c      	bhi.n	800ded6 <__multiply+0x9e>
 800debc:	2e00      	cmp	r6, #0
 800debe:	dd03      	ble.n	800dec8 <__multiply+0x90>
 800dec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d05b      	beq.n	800df80 <__multiply+0x148>
 800dec8:	6106      	str	r6, [r0, #16]
 800deca:	b005      	add	sp, #20
 800decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	f843 2b04 	str.w	r2, [r3], #4
 800ded4:	e7d8      	b.n	800de88 <__multiply+0x50>
 800ded6:	f8b1 a000 	ldrh.w	sl, [r1]
 800deda:	f1ba 0f00 	cmp.w	sl, #0
 800dede:	d024      	beq.n	800df2a <__multiply+0xf2>
 800dee0:	f104 0e14 	add.w	lr, r4, #20
 800dee4:	46a9      	mov	r9, r5
 800dee6:	f04f 0c00 	mov.w	ip, #0
 800deea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800deee:	f8d9 3000 	ldr.w	r3, [r9]
 800def2:	fa1f fb87 	uxth.w	fp, r7
 800def6:	b29b      	uxth	r3, r3
 800def8:	fb0a 330b 	mla	r3, sl, fp, r3
 800defc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800df00:	f8d9 7000 	ldr.w	r7, [r9]
 800df04:	4463      	add	r3, ip
 800df06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800df0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800df0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800df12:	b29b      	uxth	r3, r3
 800df14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df18:	4572      	cmp	r2, lr
 800df1a:	f849 3b04 	str.w	r3, [r9], #4
 800df1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800df22:	d8e2      	bhi.n	800deea <__multiply+0xb2>
 800df24:	9b01      	ldr	r3, [sp, #4]
 800df26:	f845 c003 	str.w	ip, [r5, r3]
 800df2a:	9b03      	ldr	r3, [sp, #12]
 800df2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df30:	3104      	adds	r1, #4
 800df32:	f1b9 0f00 	cmp.w	r9, #0
 800df36:	d021      	beq.n	800df7c <__multiply+0x144>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	f104 0c14 	add.w	ip, r4, #20
 800df3e:	46ae      	mov	lr, r5
 800df40:	f04f 0a00 	mov.w	sl, #0
 800df44:	f8bc b000 	ldrh.w	fp, [ip]
 800df48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800df4c:	fb09 770b 	mla	r7, r9, fp, r7
 800df50:	4457      	add	r7, sl
 800df52:	b29b      	uxth	r3, r3
 800df54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df58:	f84e 3b04 	str.w	r3, [lr], #4
 800df5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df64:	f8be 3000 	ldrh.w	r3, [lr]
 800df68:	fb09 330a 	mla	r3, r9, sl, r3
 800df6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800df70:	4562      	cmp	r2, ip
 800df72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df76:	d8e5      	bhi.n	800df44 <__multiply+0x10c>
 800df78:	9f01      	ldr	r7, [sp, #4]
 800df7a:	51eb      	str	r3, [r5, r7]
 800df7c:	3504      	adds	r5, #4
 800df7e:	e799      	b.n	800deb4 <__multiply+0x7c>
 800df80:	3e01      	subs	r6, #1
 800df82:	e79b      	b.n	800debc <__multiply+0x84>
 800df84:	0800f485 	.word	0x0800f485
 800df88:	0800f507 	.word	0x0800f507

0800df8c <__pow5mult>:
 800df8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df90:	4615      	mov	r5, r2
 800df92:	f012 0203 	ands.w	r2, r2, #3
 800df96:	4607      	mov	r7, r0
 800df98:	460e      	mov	r6, r1
 800df9a:	d007      	beq.n	800dfac <__pow5mult+0x20>
 800df9c:	4c25      	ldr	r4, [pc, #148]	@ (800e034 <__pow5mult+0xa8>)
 800df9e:	3a01      	subs	r2, #1
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfa6:	f7ff fe55 	bl	800dc54 <__multadd>
 800dfaa:	4606      	mov	r6, r0
 800dfac:	10ad      	asrs	r5, r5, #2
 800dfae:	d03d      	beq.n	800e02c <__pow5mult+0xa0>
 800dfb0:	69fc      	ldr	r4, [r7, #28]
 800dfb2:	b97c      	cbnz	r4, 800dfd4 <__pow5mult+0x48>
 800dfb4:	2010      	movs	r0, #16
 800dfb6:	f7ff fc77 	bl	800d8a8 <malloc>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	61f8      	str	r0, [r7, #28]
 800dfbe:	b928      	cbnz	r0, 800dfcc <__pow5mult+0x40>
 800dfc0:	4b1d      	ldr	r3, [pc, #116]	@ (800e038 <__pow5mult+0xac>)
 800dfc2:	481e      	ldr	r0, [pc, #120]	@ (800e03c <__pow5mult+0xb0>)
 800dfc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dfc8:	f000 fb82 	bl	800e6d0 <__assert_func>
 800dfcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfd0:	6004      	str	r4, [r0, #0]
 800dfd2:	60c4      	str	r4, [r0, #12]
 800dfd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dfd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfdc:	b94c      	cbnz	r4, 800dff2 <__pow5mult+0x66>
 800dfde:	f240 2171 	movw	r1, #625	@ 0x271
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	f7ff ff12 	bl	800de0c <__i2b>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfee:	4604      	mov	r4, r0
 800dff0:	6003      	str	r3, [r0, #0]
 800dff2:	f04f 0900 	mov.w	r9, #0
 800dff6:	07eb      	lsls	r3, r5, #31
 800dff8:	d50a      	bpl.n	800e010 <__pow5mult+0x84>
 800dffa:	4631      	mov	r1, r6
 800dffc:	4622      	mov	r2, r4
 800dffe:	4638      	mov	r0, r7
 800e000:	f7ff ff1a 	bl	800de38 <__multiply>
 800e004:	4631      	mov	r1, r6
 800e006:	4680      	mov	r8, r0
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff fe01 	bl	800dc10 <_Bfree>
 800e00e:	4646      	mov	r6, r8
 800e010:	106d      	asrs	r5, r5, #1
 800e012:	d00b      	beq.n	800e02c <__pow5mult+0xa0>
 800e014:	6820      	ldr	r0, [r4, #0]
 800e016:	b938      	cbnz	r0, 800e028 <__pow5mult+0x9c>
 800e018:	4622      	mov	r2, r4
 800e01a:	4621      	mov	r1, r4
 800e01c:	4638      	mov	r0, r7
 800e01e:	f7ff ff0b 	bl	800de38 <__multiply>
 800e022:	6020      	str	r0, [r4, #0]
 800e024:	f8c0 9000 	str.w	r9, [r0]
 800e028:	4604      	mov	r4, r0
 800e02a:	e7e4      	b.n	800dff6 <__pow5mult+0x6a>
 800e02c:	4630      	mov	r0, r6
 800e02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e032:	bf00      	nop
 800e034:	0800f560 	.word	0x0800f560
 800e038:	0800f416 	.word	0x0800f416
 800e03c:	0800f507 	.word	0x0800f507

0800e040 <__lshift>:
 800e040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e044:	460c      	mov	r4, r1
 800e046:	6849      	ldr	r1, [r1, #4]
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e04e:	68a3      	ldr	r3, [r4, #8]
 800e050:	4607      	mov	r7, r0
 800e052:	4691      	mov	r9, r2
 800e054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e058:	f108 0601 	add.w	r6, r8, #1
 800e05c:	42b3      	cmp	r3, r6
 800e05e:	db0b      	blt.n	800e078 <__lshift+0x38>
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff fd95 	bl	800db90 <_Balloc>
 800e066:	4605      	mov	r5, r0
 800e068:	b948      	cbnz	r0, 800e07e <__lshift+0x3e>
 800e06a:	4602      	mov	r2, r0
 800e06c:	4b28      	ldr	r3, [pc, #160]	@ (800e110 <__lshift+0xd0>)
 800e06e:	4829      	ldr	r0, [pc, #164]	@ (800e114 <__lshift+0xd4>)
 800e070:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e074:	f000 fb2c 	bl	800e6d0 <__assert_func>
 800e078:	3101      	adds	r1, #1
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	e7ee      	b.n	800e05c <__lshift+0x1c>
 800e07e:	2300      	movs	r3, #0
 800e080:	f100 0114 	add.w	r1, r0, #20
 800e084:	f100 0210 	add.w	r2, r0, #16
 800e088:	4618      	mov	r0, r3
 800e08a:	4553      	cmp	r3, sl
 800e08c:	db33      	blt.n	800e0f6 <__lshift+0xb6>
 800e08e:	6920      	ldr	r0, [r4, #16]
 800e090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e094:	f104 0314 	add.w	r3, r4, #20
 800e098:	f019 091f 	ands.w	r9, r9, #31
 800e09c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0a4:	d02b      	beq.n	800e0fe <__lshift+0xbe>
 800e0a6:	f1c9 0e20 	rsb	lr, r9, #32
 800e0aa:	468a      	mov	sl, r1
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	6818      	ldr	r0, [r3, #0]
 800e0b0:	fa00 f009 	lsl.w	r0, r0, r9
 800e0b4:	4310      	orrs	r0, r2
 800e0b6:	f84a 0b04 	str.w	r0, [sl], #4
 800e0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0be:	459c      	cmp	ip, r3
 800e0c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0c4:	d8f3      	bhi.n	800e0ae <__lshift+0x6e>
 800e0c6:	ebac 0304 	sub.w	r3, ip, r4
 800e0ca:	3b15      	subs	r3, #21
 800e0cc:	f023 0303 	bic.w	r3, r3, #3
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	f104 0015 	add.w	r0, r4, #21
 800e0d6:	4584      	cmp	ip, r0
 800e0d8:	bf38      	it	cc
 800e0da:	2304      	movcc	r3, #4
 800e0dc:	50ca      	str	r2, [r1, r3]
 800e0de:	b10a      	cbz	r2, 800e0e4 <__lshift+0xa4>
 800e0e0:	f108 0602 	add.w	r6, r8, #2
 800e0e4:	3e01      	subs	r6, #1
 800e0e6:	4638      	mov	r0, r7
 800e0e8:	612e      	str	r6, [r5, #16]
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f7ff fd90 	bl	800dc10 <_Bfree>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	e7c5      	b.n	800e08a <__lshift+0x4a>
 800e0fe:	3904      	subs	r1, #4
 800e100:	f853 2b04 	ldr.w	r2, [r3], #4
 800e104:	f841 2f04 	str.w	r2, [r1, #4]!
 800e108:	459c      	cmp	ip, r3
 800e10a:	d8f9      	bhi.n	800e100 <__lshift+0xc0>
 800e10c:	e7ea      	b.n	800e0e4 <__lshift+0xa4>
 800e10e:	bf00      	nop
 800e110:	0800f485 	.word	0x0800f485
 800e114:	0800f507 	.word	0x0800f507

0800e118 <__mcmp>:
 800e118:	690a      	ldr	r2, [r1, #16]
 800e11a:	4603      	mov	r3, r0
 800e11c:	6900      	ldr	r0, [r0, #16]
 800e11e:	1a80      	subs	r0, r0, r2
 800e120:	b530      	push	{r4, r5, lr}
 800e122:	d10e      	bne.n	800e142 <__mcmp+0x2a>
 800e124:	3314      	adds	r3, #20
 800e126:	3114      	adds	r1, #20
 800e128:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e12c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e130:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e134:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e138:	4295      	cmp	r5, r2
 800e13a:	d003      	beq.n	800e144 <__mcmp+0x2c>
 800e13c:	d205      	bcs.n	800e14a <__mcmp+0x32>
 800e13e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e142:	bd30      	pop	{r4, r5, pc}
 800e144:	42a3      	cmp	r3, r4
 800e146:	d3f3      	bcc.n	800e130 <__mcmp+0x18>
 800e148:	e7fb      	b.n	800e142 <__mcmp+0x2a>
 800e14a:	2001      	movs	r0, #1
 800e14c:	e7f9      	b.n	800e142 <__mcmp+0x2a>
	...

0800e150 <__mdiff>:
 800e150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	4689      	mov	r9, r1
 800e156:	4606      	mov	r6, r0
 800e158:	4611      	mov	r1, r2
 800e15a:	4648      	mov	r0, r9
 800e15c:	4614      	mov	r4, r2
 800e15e:	f7ff ffdb 	bl	800e118 <__mcmp>
 800e162:	1e05      	subs	r5, r0, #0
 800e164:	d112      	bne.n	800e18c <__mdiff+0x3c>
 800e166:	4629      	mov	r1, r5
 800e168:	4630      	mov	r0, r6
 800e16a:	f7ff fd11 	bl	800db90 <_Balloc>
 800e16e:	4602      	mov	r2, r0
 800e170:	b928      	cbnz	r0, 800e17e <__mdiff+0x2e>
 800e172:	4b3f      	ldr	r3, [pc, #252]	@ (800e270 <__mdiff+0x120>)
 800e174:	f240 2137 	movw	r1, #567	@ 0x237
 800e178:	483e      	ldr	r0, [pc, #248]	@ (800e274 <__mdiff+0x124>)
 800e17a:	f000 faa9 	bl	800e6d0 <__assert_func>
 800e17e:	2301      	movs	r3, #1
 800e180:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e184:	4610      	mov	r0, r2
 800e186:	b003      	add	sp, #12
 800e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	bfbc      	itt	lt
 800e18e:	464b      	movlt	r3, r9
 800e190:	46a1      	movlt	r9, r4
 800e192:	4630      	mov	r0, r6
 800e194:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e198:	bfba      	itte	lt
 800e19a:	461c      	movlt	r4, r3
 800e19c:	2501      	movlt	r5, #1
 800e19e:	2500      	movge	r5, #0
 800e1a0:	f7ff fcf6 	bl	800db90 <_Balloc>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	b918      	cbnz	r0, 800e1b0 <__mdiff+0x60>
 800e1a8:	4b31      	ldr	r3, [pc, #196]	@ (800e270 <__mdiff+0x120>)
 800e1aa:	f240 2145 	movw	r1, #581	@ 0x245
 800e1ae:	e7e3      	b.n	800e178 <__mdiff+0x28>
 800e1b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e1b4:	6926      	ldr	r6, [r4, #16]
 800e1b6:	60c5      	str	r5, [r0, #12]
 800e1b8:	f109 0310 	add.w	r3, r9, #16
 800e1bc:	f109 0514 	add.w	r5, r9, #20
 800e1c0:	f104 0e14 	add.w	lr, r4, #20
 800e1c4:	f100 0b14 	add.w	fp, r0, #20
 800e1c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e1cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	46d9      	mov	r9, fp
 800e1d4:	f04f 0c00 	mov.w	ip, #0
 800e1d8:	9b01      	ldr	r3, [sp, #4]
 800e1da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e1de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	fa1f f38a 	uxth.w	r3, sl
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	b283      	uxth	r3, r0
 800e1ec:	1acb      	subs	r3, r1, r3
 800e1ee:	0c00      	lsrs	r0, r0, #16
 800e1f0:	4463      	add	r3, ip
 800e1f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e1f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e200:	4576      	cmp	r6, lr
 800e202:	f849 3b04 	str.w	r3, [r9], #4
 800e206:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e20a:	d8e5      	bhi.n	800e1d8 <__mdiff+0x88>
 800e20c:	1b33      	subs	r3, r6, r4
 800e20e:	3b15      	subs	r3, #21
 800e210:	f023 0303 	bic.w	r3, r3, #3
 800e214:	3415      	adds	r4, #21
 800e216:	3304      	adds	r3, #4
 800e218:	42a6      	cmp	r6, r4
 800e21a:	bf38      	it	cc
 800e21c:	2304      	movcc	r3, #4
 800e21e:	441d      	add	r5, r3
 800e220:	445b      	add	r3, fp
 800e222:	461e      	mov	r6, r3
 800e224:	462c      	mov	r4, r5
 800e226:	4544      	cmp	r4, r8
 800e228:	d30e      	bcc.n	800e248 <__mdiff+0xf8>
 800e22a:	f108 0103 	add.w	r1, r8, #3
 800e22e:	1b49      	subs	r1, r1, r5
 800e230:	f021 0103 	bic.w	r1, r1, #3
 800e234:	3d03      	subs	r5, #3
 800e236:	45a8      	cmp	r8, r5
 800e238:	bf38      	it	cc
 800e23a:	2100      	movcc	r1, #0
 800e23c:	440b      	add	r3, r1
 800e23e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e242:	b191      	cbz	r1, 800e26a <__mdiff+0x11a>
 800e244:	6117      	str	r7, [r2, #16]
 800e246:	e79d      	b.n	800e184 <__mdiff+0x34>
 800e248:	f854 1b04 	ldr.w	r1, [r4], #4
 800e24c:	46e6      	mov	lr, ip
 800e24e:	0c08      	lsrs	r0, r1, #16
 800e250:	fa1c fc81 	uxtah	ip, ip, r1
 800e254:	4471      	add	r1, lr
 800e256:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e25a:	b289      	uxth	r1, r1
 800e25c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e260:	f846 1b04 	str.w	r1, [r6], #4
 800e264:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e268:	e7dd      	b.n	800e226 <__mdiff+0xd6>
 800e26a:	3f01      	subs	r7, #1
 800e26c:	e7e7      	b.n	800e23e <__mdiff+0xee>
 800e26e:	bf00      	nop
 800e270:	0800f485 	.word	0x0800f485
 800e274:	0800f507 	.word	0x0800f507

0800e278 <__ulp>:
 800e278:	b082      	sub	sp, #8
 800e27a:	ed8d 0b00 	vstr	d0, [sp]
 800e27e:	9a01      	ldr	r2, [sp, #4]
 800e280:	4b0f      	ldr	r3, [pc, #60]	@ (800e2c0 <__ulp+0x48>)
 800e282:	4013      	ands	r3, r2
 800e284:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dc08      	bgt.n	800e29e <__ulp+0x26>
 800e28c:	425b      	negs	r3, r3
 800e28e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e292:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e296:	da04      	bge.n	800e2a2 <__ulp+0x2a>
 800e298:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e29c:	4113      	asrs	r3, r2
 800e29e:	2200      	movs	r2, #0
 800e2a0:	e008      	b.n	800e2b4 <__ulp+0x3c>
 800e2a2:	f1a2 0314 	sub.w	r3, r2, #20
 800e2a6:	2b1e      	cmp	r3, #30
 800e2a8:	bfda      	itte	le
 800e2aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e2ae:	40da      	lsrle	r2, r3
 800e2b0:	2201      	movgt	r2, #1
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	ec41 0b10 	vmov	d0, r0, r1
 800e2bc:	b002      	add	sp, #8
 800e2be:	4770      	bx	lr
 800e2c0:	7ff00000 	.word	0x7ff00000

0800e2c4 <__b2d>:
 800e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c8:	6906      	ldr	r6, [r0, #16]
 800e2ca:	f100 0814 	add.w	r8, r0, #20
 800e2ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e2d2:	1f37      	subs	r7, r6, #4
 800e2d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2d8:	4610      	mov	r0, r2
 800e2da:	f7ff fd4b 	bl	800dd74 <__hi0bits>
 800e2de:	f1c0 0320 	rsb	r3, r0, #32
 800e2e2:	280a      	cmp	r0, #10
 800e2e4:	600b      	str	r3, [r1, #0]
 800e2e6:	491b      	ldr	r1, [pc, #108]	@ (800e354 <__b2d+0x90>)
 800e2e8:	dc15      	bgt.n	800e316 <__b2d+0x52>
 800e2ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800e2ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800e2f2:	45b8      	cmp	r8, r7
 800e2f4:	ea43 0501 	orr.w	r5, r3, r1
 800e2f8:	bf34      	ite	cc
 800e2fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2fe:	2300      	movcs	r3, #0
 800e300:	3015      	adds	r0, #21
 800e302:	fa02 f000 	lsl.w	r0, r2, r0
 800e306:	fa23 f30c 	lsr.w	r3, r3, ip
 800e30a:	4303      	orrs	r3, r0
 800e30c:	461c      	mov	r4, r3
 800e30e:	ec45 4b10 	vmov	d0, r4, r5
 800e312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e316:	45b8      	cmp	r8, r7
 800e318:	bf3a      	itte	cc
 800e31a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e31e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e322:	2300      	movcs	r3, #0
 800e324:	380b      	subs	r0, #11
 800e326:	d012      	beq.n	800e34e <__b2d+0x8a>
 800e328:	f1c0 0120 	rsb	r1, r0, #32
 800e32c:	fa23 f401 	lsr.w	r4, r3, r1
 800e330:	4082      	lsls	r2, r0
 800e332:	4322      	orrs	r2, r4
 800e334:	4547      	cmp	r7, r8
 800e336:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e33a:	bf8c      	ite	hi
 800e33c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e340:	2200      	movls	r2, #0
 800e342:	4083      	lsls	r3, r0
 800e344:	40ca      	lsrs	r2, r1
 800e346:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e34a:	4313      	orrs	r3, r2
 800e34c:	e7de      	b.n	800e30c <__b2d+0x48>
 800e34e:	ea42 0501 	orr.w	r5, r2, r1
 800e352:	e7db      	b.n	800e30c <__b2d+0x48>
 800e354:	3ff00000 	.word	0x3ff00000

0800e358 <__d2b>:
 800e358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e35c:	460f      	mov	r7, r1
 800e35e:	2101      	movs	r1, #1
 800e360:	ec59 8b10 	vmov	r8, r9, d0
 800e364:	4616      	mov	r6, r2
 800e366:	f7ff fc13 	bl	800db90 <_Balloc>
 800e36a:	4604      	mov	r4, r0
 800e36c:	b930      	cbnz	r0, 800e37c <__d2b+0x24>
 800e36e:	4602      	mov	r2, r0
 800e370:	4b23      	ldr	r3, [pc, #140]	@ (800e400 <__d2b+0xa8>)
 800e372:	4824      	ldr	r0, [pc, #144]	@ (800e404 <__d2b+0xac>)
 800e374:	f240 310f 	movw	r1, #783	@ 0x30f
 800e378:	f000 f9aa 	bl	800e6d0 <__assert_func>
 800e37c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e384:	b10d      	cbz	r5, 800e38a <__d2b+0x32>
 800e386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	f1b8 0300 	subs.w	r3, r8, #0
 800e390:	d023      	beq.n	800e3da <__d2b+0x82>
 800e392:	4668      	mov	r0, sp
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	f7ff fd0c 	bl	800ddb2 <__lo0bits>
 800e39a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e39e:	b1d0      	cbz	r0, 800e3d6 <__d2b+0x7e>
 800e3a0:	f1c0 0320 	rsb	r3, r0, #32
 800e3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3a8:	430b      	orrs	r3, r1
 800e3aa:	40c2      	lsrs	r2, r0
 800e3ac:	6163      	str	r3, [r4, #20]
 800e3ae:	9201      	str	r2, [sp, #4]
 800e3b0:	9b01      	ldr	r3, [sp, #4]
 800e3b2:	61a3      	str	r3, [r4, #24]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2201      	moveq	r2, #1
 800e3ba:	2202      	movne	r2, #2
 800e3bc:	6122      	str	r2, [r4, #16]
 800e3be:	b1a5      	cbz	r5, 800e3ea <__d2b+0x92>
 800e3c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e3c4:	4405      	add	r5, r0
 800e3c6:	603d      	str	r5, [r7, #0]
 800e3c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e3cc:	6030      	str	r0, [r6, #0]
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	b003      	add	sp, #12
 800e3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3d6:	6161      	str	r1, [r4, #20]
 800e3d8:	e7ea      	b.n	800e3b0 <__d2b+0x58>
 800e3da:	a801      	add	r0, sp, #4
 800e3dc:	f7ff fce9 	bl	800ddb2 <__lo0bits>
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	6163      	str	r3, [r4, #20]
 800e3e4:	3020      	adds	r0, #32
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	e7e8      	b.n	800e3bc <__d2b+0x64>
 800e3ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e3f2:	6038      	str	r0, [r7, #0]
 800e3f4:	6918      	ldr	r0, [r3, #16]
 800e3f6:	f7ff fcbd 	bl	800dd74 <__hi0bits>
 800e3fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3fe:	e7e5      	b.n	800e3cc <__d2b+0x74>
 800e400:	0800f485 	.word	0x0800f485
 800e404:	0800f507 	.word	0x0800f507

0800e408 <__ratio>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	b085      	sub	sp, #20
 800e40e:	e9cd 1000 	strd	r1, r0, [sp]
 800e412:	a902      	add	r1, sp, #8
 800e414:	f7ff ff56 	bl	800e2c4 <__b2d>
 800e418:	9800      	ldr	r0, [sp, #0]
 800e41a:	a903      	add	r1, sp, #12
 800e41c:	ec55 4b10 	vmov	r4, r5, d0
 800e420:	f7ff ff50 	bl	800e2c4 <__b2d>
 800e424:	9b01      	ldr	r3, [sp, #4]
 800e426:	6919      	ldr	r1, [r3, #16]
 800e428:	9b00      	ldr	r3, [sp, #0]
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	1ac9      	subs	r1, r1, r3
 800e42e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	ec5b ab10 	vmov	sl, fp, d0
 800e438:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	bfce      	itee	gt
 800e440:	462a      	movgt	r2, r5
 800e442:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e446:	465a      	movle	r2, fp
 800e448:	462f      	mov	r7, r5
 800e44a:	46d9      	mov	r9, fp
 800e44c:	bfcc      	ite	gt
 800e44e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e452:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e456:	464b      	mov	r3, r9
 800e458:	4652      	mov	r2, sl
 800e45a:	4620      	mov	r0, r4
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f2 fa15 	bl	800088c <__aeabi_ddiv>
 800e462:	ec41 0b10 	vmov	d0, r0, r1
 800e466:	b005      	add	sp, #20
 800e468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e46c <__copybits>:
 800e46c:	3901      	subs	r1, #1
 800e46e:	b570      	push	{r4, r5, r6, lr}
 800e470:	1149      	asrs	r1, r1, #5
 800e472:	6914      	ldr	r4, [r2, #16]
 800e474:	3101      	adds	r1, #1
 800e476:	f102 0314 	add.w	r3, r2, #20
 800e47a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e47e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e482:	1f05      	subs	r5, r0, #4
 800e484:	42a3      	cmp	r3, r4
 800e486:	d30c      	bcc.n	800e4a2 <__copybits+0x36>
 800e488:	1aa3      	subs	r3, r4, r2
 800e48a:	3b11      	subs	r3, #17
 800e48c:	f023 0303 	bic.w	r3, r3, #3
 800e490:	3211      	adds	r2, #17
 800e492:	42a2      	cmp	r2, r4
 800e494:	bf88      	it	hi
 800e496:	2300      	movhi	r3, #0
 800e498:	4418      	add	r0, r3
 800e49a:	2300      	movs	r3, #0
 800e49c:	4288      	cmp	r0, r1
 800e49e:	d305      	bcc.n	800e4ac <__copybits+0x40>
 800e4a0:	bd70      	pop	{r4, r5, r6, pc}
 800e4a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4aa:	e7eb      	b.n	800e484 <__copybits+0x18>
 800e4ac:	f840 3b04 	str.w	r3, [r0], #4
 800e4b0:	e7f4      	b.n	800e49c <__copybits+0x30>

0800e4b2 <__any_on>:
 800e4b2:	f100 0214 	add.w	r2, r0, #20
 800e4b6:	6900      	ldr	r0, [r0, #16]
 800e4b8:	114b      	asrs	r3, r1, #5
 800e4ba:	4298      	cmp	r0, r3
 800e4bc:	b510      	push	{r4, lr}
 800e4be:	db11      	blt.n	800e4e4 <__any_on+0x32>
 800e4c0:	dd0a      	ble.n	800e4d8 <__any_on+0x26>
 800e4c2:	f011 011f 	ands.w	r1, r1, #31
 800e4c6:	d007      	beq.n	800e4d8 <__any_on+0x26>
 800e4c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4cc:	fa24 f001 	lsr.w	r0, r4, r1
 800e4d0:	fa00 f101 	lsl.w	r1, r0, r1
 800e4d4:	428c      	cmp	r4, r1
 800e4d6:	d10b      	bne.n	800e4f0 <__any_on+0x3e>
 800e4d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d803      	bhi.n	800e4e8 <__any_on+0x36>
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	bd10      	pop	{r4, pc}
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	e7f7      	b.n	800e4d8 <__any_on+0x26>
 800e4e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	d0f5      	beq.n	800e4dc <__any_on+0x2a>
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	e7f6      	b.n	800e4e2 <__any_on+0x30>

0800e4f4 <__sread>:
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fc:	f000 f8b4 	bl	800e668 <_read_r>
 800e500:	2800      	cmp	r0, #0
 800e502:	bfab      	itete	ge
 800e504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e506:	89a3      	ldrhlt	r3, [r4, #12]
 800e508:	181b      	addge	r3, r3, r0
 800e50a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e50e:	bfac      	ite	ge
 800e510:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e512:	81a3      	strhlt	r3, [r4, #12]
 800e514:	bd10      	pop	{r4, pc}

0800e516 <__swrite>:
 800e516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51a:	461f      	mov	r7, r3
 800e51c:	898b      	ldrh	r3, [r1, #12]
 800e51e:	05db      	lsls	r3, r3, #23
 800e520:	4605      	mov	r5, r0
 800e522:	460c      	mov	r4, r1
 800e524:	4616      	mov	r6, r2
 800e526:	d505      	bpl.n	800e534 <__swrite+0x1e>
 800e528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e52c:	2302      	movs	r3, #2
 800e52e:	2200      	movs	r2, #0
 800e530:	f000 f888 	bl	800e644 <_lseek_r>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e53a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	4632      	mov	r2, r6
 800e542:	463b      	mov	r3, r7
 800e544:	4628      	mov	r0, r5
 800e546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e54a:	f000 b8af 	b.w	800e6ac <_write_r>

0800e54e <__sseek>:
 800e54e:	b510      	push	{r4, lr}
 800e550:	460c      	mov	r4, r1
 800e552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e556:	f000 f875 	bl	800e644 <_lseek_r>
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	bf15      	itete	ne
 800e560:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e56a:	81a3      	strheq	r3, [r4, #12]
 800e56c:	bf18      	it	ne
 800e56e:	81a3      	strhne	r3, [r4, #12]
 800e570:	bd10      	pop	{r4, pc}

0800e572 <__sclose>:
 800e572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e576:	f000 b855 	b.w	800e624 <_close_r>

0800e57a <_realloc_r>:
 800e57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57e:	4680      	mov	r8, r0
 800e580:	4615      	mov	r5, r2
 800e582:	460c      	mov	r4, r1
 800e584:	b921      	cbnz	r1, 800e590 <_realloc_r+0x16>
 800e586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e58a:	4611      	mov	r1, r2
 800e58c:	f7ff b9b6 	b.w	800d8fc <_malloc_r>
 800e590:	b92a      	cbnz	r2, 800e59e <_realloc_r+0x24>
 800e592:	f000 f8cf 	bl	800e734 <_free_r>
 800e596:	2400      	movs	r4, #0
 800e598:	4620      	mov	r0, r4
 800e59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59e:	f000 f913 	bl	800e7c8 <_malloc_usable_size_r>
 800e5a2:	4285      	cmp	r5, r0
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	d802      	bhi.n	800e5ae <_realloc_r+0x34>
 800e5a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e5ac:	d8f4      	bhi.n	800e598 <_realloc_r+0x1e>
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	f7ff f9a3 	bl	800d8fc <_malloc_r>
 800e5b6:	4607      	mov	r7, r0
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d0ec      	beq.n	800e596 <_realloc_r+0x1c>
 800e5bc:	42b5      	cmp	r5, r6
 800e5be:	462a      	mov	r2, r5
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	bf28      	it	cs
 800e5c4:	4632      	movcs	r2, r6
 800e5c6:	f7fd fe72 	bl	800c2ae <memcpy>
 800e5ca:	4621      	mov	r1, r4
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	f000 f8b1 	bl	800e734 <_free_r>
 800e5d2:	463c      	mov	r4, r7
 800e5d4:	e7e0      	b.n	800e598 <_realloc_r+0x1e>

0800e5d6 <__ascii_wctomb>:
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	b141      	cbz	r1, 800e5ee <__ascii_wctomb+0x18>
 800e5dc:	2aff      	cmp	r2, #255	@ 0xff
 800e5de:	d904      	bls.n	800e5ea <__ascii_wctomb+0x14>
 800e5e0:	228a      	movs	r2, #138	@ 0x8a
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e8:	4770      	bx	lr
 800e5ea:	700a      	strb	r2, [r1, #0]
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	4770      	bx	lr

0800e5f0 <memmove>:
 800e5f0:	4288      	cmp	r0, r1
 800e5f2:	b510      	push	{r4, lr}
 800e5f4:	eb01 0402 	add.w	r4, r1, r2
 800e5f8:	d902      	bls.n	800e600 <memmove+0x10>
 800e5fa:	4284      	cmp	r4, r0
 800e5fc:	4623      	mov	r3, r4
 800e5fe:	d807      	bhi.n	800e610 <memmove+0x20>
 800e600:	1e43      	subs	r3, r0, #1
 800e602:	42a1      	cmp	r1, r4
 800e604:	d008      	beq.n	800e618 <memmove+0x28>
 800e606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e60e:	e7f8      	b.n	800e602 <memmove+0x12>
 800e610:	4402      	add	r2, r0
 800e612:	4601      	mov	r1, r0
 800e614:	428a      	cmp	r2, r1
 800e616:	d100      	bne.n	800e61a <memmove+0x2a>
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e622:	e7f7      	b.n	800e614 <memmove+0x24>

0800e624 <_close_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4d06      	ldr	r5, [pc, #24]	@ (800e640 <_close_r+0x1c>)
 800e628:	2300      	movs	r3, #0
 800e62a:	4604      	mov	r4, r0
 800e62c:	4608      	mov	r0, r1
 800e62e:	602b      	str	r3, [r5, #0]
 800e630:	f7f4 fc88 	bl	8002f44 <_close>
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	d102      	bne.n	800e63e <_close_r+0x1a>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	b103      	cbz	r3, 800e63e <_close_r+0x1a>
 800e63c:	6023      	str	r3, [r4, #0]
 800e63e:	bd38      	pop	{r3, r4, r5, pc}
 800e640:	200069a4 	.word	0x200069a4

0800e644 <_lseek_r>:
 800e644:	b538      	push	{r3, r4, r5, lr}
 800e646:	4d07      	ldr	r5, [pc, #28]	@ (800e664 <_lseek_r+0x20>)
 800e648:	4604      	mov	r4, r0
 800e64a:	4608      	mov	r0, r1
 800e64c:	4611      	mov	r1, r2
 800e64e:	2200      	movs	r2, #0
 800e650:	602a      	str	r2, [r5, #0]
 800e652:	461a      	mov	r2, r3
 800e654:	f7f4 fc9d 	bl	8002f92 <_lseek>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d102      	bne.n	800e662 <_lseek_r+0x1e>
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	b103      	cbz	r3, 800e662 <_lseek_r+0x1e>
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	200069a4 	.word	0x200069a4

0800e668 <_read_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d07      	ldr	r5, [pc, #28]	@ (800e688 <_read_r+0x20>)
 800e66c:	4604      	mov	r4, r0
 800e66e:	4608      	mov	r0, r1
 800e670:	4611      	mov	r1, r2
 800e672:	2200      	movs	r2, #0
 800e674:	602a      	str	r2, [r5, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	f7f4 fc2b 	bl	8002ed2 <_read>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d102      	bne.n	800e686 <_read_r+0x1e>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	b103      	cbz	r3, 800e686 <_read_r+0x1e>
 800e684:	6023      	str	r3, [r4, #0]
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	200069a4 	.word	0x200069a4

0800e68c <_sbrk_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4d06      	ldr	r5, [pc, #24]	@ (800e6a8 <_sbrk_r+0x1c>)
 800e690:	2300      	movs	r3, #0
 800e692:	4604      	mov	r4, r0
 800e694:	4608      	mov	r0, r1
 800e696:	602b      	str	r3, [r5, #0]
 800e698:	f7f4 fc88 	bl	8002fac <_sbrk>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_sbrk_r+0x1a>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_sbrk_r+0x1a>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	200069a4 	.word	0x200069a4

0800e6ac <_write_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d07      	ldr	r5, [pc, #28]	@ (800e6cc <_write_r+0x20>)
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	602a      	str	r2, [r5, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f7f4 fc26 	bl	8002f0c <_write>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_write_r+0x1e>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_write_r+0x1e>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	200069a4 	.word	0x200069a4

0800e6d0 <__assert_func>:
 800e6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6d2:	4614      	mov	r4, r2
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4b09      	ldr	r3, [pc, #36]	@ (800e6fc <__assert_func+0x2c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4605      	mov	r5, r0
 800e6dc:	68d8      	ldr	r0, [r3, #12]
 800e6de:	b954      	cbnz	r4, 800e6f6 <__assert_func+0x26>
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <__assert_func+0x30>)
 800e6e2:	461c      	mov	r4, r3
 800e6e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6e8:	9100      	str	r1, [sp, #0]
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	4905      	ldr	r1, [pc, #20]	@ (800e704 <__assert_func+0x34>)
 800e6ee:	f000 f873 	bl	800e7d8 <fiprintf>
 800e6f2:	f000 f883 	bl	800e7fc <abort>
 800e6f6:	4b04      	ldr	r3, [pc, #16]	@ (800e708 <__assert_func+0x38>)
 800e6f8:	e7f4      	b.n	800e6e4 <__assert_func+0x14>
 800e6fa:	bf00      	nop
 800e6fc:	200001a0 	.word	0x200001a0
 800e700:	0800f69b 	.word	0x0800f69b
 800e704:	0800f66d 	.word	0x0800f66d
 800e708:	0800f660 	.word	0x0800f660

0800e70c <_calloc_r>:
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	fba1 5402 	umull	r5, r4, r1, r2
 800e712:	b93c      	cbnz	r4, 800e724 <_calloc_r+0x18>
 800e714:	4629      	mov	r1, r5
 800e716:	f7ff f8f1 	bl	800d8fc <_malloc_r>
 800e71a:	4606      	mov	r6, r0
 800e71c:	b928      	cbnz	r0, 800e72a <_calloc_r+0x1e>
 800e71e:	2600      	movs	r6, #0
 800e720:	4630      	mov	r0, r6
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	220c      	movs	r2, #12
 800e726:	6002      	str	r2, [r0, #0]
 800e728:	e7f9      	b.n	800e71e <_calloc_r+0x12>
 800e72a:	462a      	mov	r2, r5
 800e72c:	4621      	mov	r1, r4
 800e72e:	f7fd fd85 	bl	800c23c <memset>
 800e732:	e7f5      	b.n	800e720 <_calloc_r+0x14>

0800e734 <_free_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4605      	mov	r5, r0
 800e738:	2900      	cmp	r1, #0
 800e73a:	d041      	beq.n	800e7c0 <_free_r+0x8c>
 800e73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e740:	1f0c      	subs	r4, r1, #4
 800e742:	2b00      	cmp	r3, #0
 800e744:	bfb8      	it	lt
 800e746:	18e4      	addlt	r4, r4, r3
 800e748:	f7ff fa16 	bl	800db78 <__malloc_lock>
 800e74c:	4a1d      	ldr	r2, [pc, #116]	@ (800e7c4 <_free_r+0x90>)
 800e74e:	6813      	ldr	r3, [r2, #0]
 800e750:	b933      	cbnz	r3, 800e760 <_free_r+0x2c>
 800e752:	6063      	str	r3, [r4, #4]
 800e754:	6014      	str	r4, [r2, #0]
 800e756:	4628      	mov	r0, r5
 800e758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e75c:	f7ff ba12 	b.w	800db84 <__malloc_unlock>
 800e760:	42a3      	cmp	r3, r4
 800e762:	d908      	bls.n	800e776 <_free_r+0x42>
 800e764:	6820      	ldr	r0, [r4, #0]
 800e766:	1821      	adds	r1, r4, r0
 800e768:	428b      	cmp	r3, r1
 800e76a:	bf01      	itttt	eq
 800e76c:	6819      	ldreq	r1, [r3, #0]
 800e76e:	685b      	ldreq	r3, [r3, #4]
 800e770:	1809      	addeq	r1, r1, r0
 800e772:	6021      	streq	r1, [r4, #0]
 800e774:	e7ed      	b.n	800e752 <_free_r+0x1e>
 800e776:	461a      	mov	r2, r3
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	b10b      	cbz	r3, 800e780 <_free_r+0x4c>
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	d9fa      	bls.n	800e776 <_free_r+0x42>
 800e780:	6811      	ldr	r1, [r2, #0]
 800e782:	1850      	adds	r0, r2, r1
 800e784:	42a0      	cmp	r0, r4
 800e786:	d10b      	bne.n	800e7a0 <_free_r+0x6c>
 800e788:	6820      	ldr	r0, [r4, #0]
 800e78a:	4401      	add	r1, r0
 800e78c:	1850      	adds	r0, r2, r1
 800e78e:	4283      	cmp	r3, r0
 800e790:	6011      	str	r1, [r2, #0]
 800e792:	d1e0      	bne.n	800e756 <_free_r+0x22>
 800e794:	6818      	ldr	r0, [r3, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	6053      	str	r3, [r2, #4]
 800e79a:	4408      	add	r0, r1
 800e79c:	6010      	str	r0, [r2, #0]
 800e79e:	e7da      	b.n	800e756 <_free_r+0x22>
 800e7a0:	d902      	bls.n	800e7a8 <_free_r+0x74>
 800e7a2:	230c      	movs	r3, #12
 800e7a4:	602b      	str	r3, [r5, #0]
 800e7a6:	e7d6      	b.n	800e756 <_free_r+0x22>
 800e7a8:	6820      	ldr	r0, [r4, #0]
 800e7aa:	1821      	adds	r1, r4, r0
 800e7ac:	428b      	cmp	r3, r1
 800e7ae:	bf04      	itt	eq
 800e7b0:	6819      	ldreq	r1, [r3, #0]
 800e7b2:	685b      	ldreq	r3, [r3, #4]
 800e7b4:	6063      	str	r3, [r4, #4]
 800e7b6:	bf04      	itt	eq
 800e7b8:	1809      	addeq	r1, r1, r0
 800e7ba:	6021      	streq	r1, [r4, #0]
 800e7bc:	6054      	str	r4, [r2, #4]
 800e7be:	e7ca      	b.n	800e756 <_free_r+0x22>
 800e7c0:	bd38      	pop	{r3, r4, r5, pc}
 800e7c2:	bf00      	nop
 800e7c4:	200069a0 	.word	0x200069a0

0800e7c8 <_malloc_usable_size_r>:
 800e7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7cc:	1f18      	subs	r0, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	bfbc      	itt	lt
 800e7d2:	580b      	ldrlt	r3, [r1, r0]
 800e7d4:	18c0      	addlt	r0, r0, r3
 800e7d6:	4770      	bx	lr

0800e7d8 <fiprintf>:
 800e7d8:	b40e      	push	{r1, r2, r3}
 800e7da:	b503      	push	{r0, r1, lr}
 800e7dc:	4601      	mov	r1, r0
 800e7de:	ab03      	add	r3, sp, #12
 800e7e0:	4805      	ldr	r0, [pc, #20]	@ (800e7f8 <fiprintf+0x20>)
 800e7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e6:	6800      	ldr	r0, [r0, #0]
 800e7e8:	9301      	str	r3, [sp, #4]
 800e7ea:	f000 f837 	bl	800e85c <_vfiprintf_r>
 800e7ee:	b002      	add	sp, #8
 800e7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7f4:	b003      	add	sp, #12
 800e7f6:	4770      	bx	lr
 800e7f8:	200001a0 	.word	0x200001a0

0800e7fc <abort>:
 800e7fc:	b508      	push	{r3, lr}
 800e7fe:	2006      	movs	r0, #6
 800e800:	f000 fa84 	bl	800ed0c <raise>
 800e804:	2001      	movs	r0, #1
 800e806:	f7f4 fb59 	bl	8002ebc <_exit>

0800e80a <__sfputc_r>:
 800e80a:	6893      	ldr	r3, [r2, #8]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	2b00      	cmp	r3, #0
 800e810:	b410      	push	{r4}
 800e812:	6093      	str	r3, [r2, #8]
 800e814:	da08      	bge.n	800e828 <__sfputc_r+0x1e>
 800e816:	6994      	ldr	r4, [r2, #24]
 800e818:	42a3      	cmp	r3, r4
 800e81a:	db01      	blt.n	800e820 <__sfputc_r+0x16>
 800e81c:	290a      	cmp	r1, #10
 800e81e:	d103      	bne.n	800e828 <__sfputc_r+0x1e>
 800e820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e824:	f000 b932 	b.w	800ea8c <__swbuf_r>
 800e828:	6813      	ldr	r3, [r2, #0]
 800e82a:	1c58      	adds	r0, r3, #1
 800e82c:	6010      	str	r0, [r2, #0]
 800e82e:	7019      	strb	r1, [r3, #0]
 800e830:	4608      	mov	r0, r1
 800e832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <__sfputs_r>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	4614      	mov	r4, r2
 800e840:	18d5      	adds	r5, r2, r3
 800e842:	42ac      	cmp	r4, r5
 800e844:	d101      	bne.n	800e84a <__sfputs_r+0x12>
 800e846:	2000      	movs	r0, #0
 800e848:	e007      	b.n	800e85a <__sfputs_r+0x22>
 800e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84e:	463a      	mov	r2, r7
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff ffda 	bl	800e80a <__sfputc_r>
 800e856:	1c43      	adds	r3, r0, #1
 800e858:	d1f3      	bne.n	800e842 <__sfputs_r+0xa>
 800e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e85c <_vfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	460d      	mov	r5, r1
 800e862:	b09d      	sub	sp, #116	@ 0x74
 800e864:	4614      	mov	r4, r2
 800e866:	4698      	mov	r8, r3
 800e868:	4606      	mov	r6, r0
 800e86a:	b118      	cbz	r0, 800e874 <_vfiprintf_r+0x18>
 800e86c:	6a03      	ldr	r3, [r0, #32]
 800e86e:	b90b      	cbnz	r3, 800e874 <_vfiprintf_r+0x18>
 800e870:	f7fc fe16 	bl	800b4a0 <__sinit>
 800e874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e876:	07d9      	lsls	r1, r3, #31
 800e878:	d405      	bmi.n	800e886 <_vfiprintf_r+0x2a>
 800e87a:	89ab      	ldrh	r3, [r5, #12]
 800e87c:	059a      	lsls	r2, r3, #22
 800e87e:	d402      	bmi.n	800e886 <_vfiprintf_r+0x2a>
 800e880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e882:	f7fd fd12 	bl	800c2aa <__retarget_lock_acquire_recursive>
 800e886:	89ab      	ldrh	r3, [r5, #12]
 800e888:	071b      	lsls	r3, r3, #28
 800e88a:	d501      	bpl.n	800e890 <_vfiprintf_r+0x34>
 800e88c:	692b      	ldr	r3, [r5, #16]
 800e88e:	b99b      	cbnz	r3, 800e8b8 <_vfiprintf_r+0x5c>
 800e890:	4629      	mov	r1, r5
 800e892:	4630      	mov	r0, r6
 800e894:	f000 f938 	bl	800eb08 <__swsetup_r>
 800e898:	b170      	cbz	r0, 800e8b8 <_vfiprintf_r+0x5c>
 800e89a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e89c:	07dc      	lsls	r4, r3, #31
 800e89e:	d504      	bpl.n	800e8aa <_vfiprintf_r+0x4e>
 800e8a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8a4:	b01d      	add	sp, #116	@ 0x74
 800e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8aa:	89ab      	ldrh	r3, [r5, #12]
 800e8ac:	0598      	lsls	r0, r3, #22
 800e8ae:	d4f7      	bmi.n	800e8a0 <_vfiprintf_r+0x44>
 800e8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8b2:	f7fd fcfb 	bl	800c2ac <__retarget_lock_release_recursive>
 800e8b6:	e7f3      	b.n	800e8a0 <_vfiprintf_r+0x44>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8bc:	2320      	movs	r3, #32
 800e8be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8c6:	2330      	movs	r3, #48	@ 0x30
 800e8c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea78 <_vfiprintf_r+0x21c>
 800e8cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8d0:	f04f 0901 	mov.w	r9, #1
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	469a      	mov	sl, r3
 800e8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8dc:	b10a      	cbz	r2, 800e8e2 <_vfiprintf_r+0x86>
 800e8de:	2a25      	cmp	r2, #37	@ 0x25
 800e8e0:	d1f9      	bne.n	800e8d6 <_vfiprintf_r+0x7a>
 800e8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e8e6:	d00b      	beq.n	800e900 <_vfiprintf_r+0xa4>
 800e8e8:	465b      	mov	r3, fp
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7ff ffa2 	bl	800e838 <__sfputs_r>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	f000 80a7 	beq.w	800ea48 <_vfiprintf_r+0x1ec>
 800e8fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8fc:	445a      	add	r2, fp
 800e8fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e900:	f89a 3000 	ldrb.w	r3, [sl]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 809f 	beq.w	800ea48 <_vfiprintf_r+0x1ec>
 800e90a:	2300      	movs	r3, #0
 800e90c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e914:	f10a 0a01 	add.w	sl, sl, #1
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	9307      	str	r3, [sp, #28]
 800e91c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e920:	931a      	str	r3, [sp, #104]	@ 0x68
 800e922:	4654      	mov	r4, sl
 800e924:	2205      	movs	r2, #5
 800e926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92a:	4853      	ldr	r0, [pc, #332]	@ (800ea78 <_vfiprintf_r+0x21c>)
 800e92c:	f7f1 fc70 	bl	8000210 <memchr>
 800e930:	9a04      	ldr	r2, [sp, #16]
 800e932:	b9d8      	cbnz	r0, 800e96c <_vfiprintf_r+0x110>
 800e934:	06d1      	lsls	r1, r2, #27
 800e936:	bf44      	itt	mi
 800e938:	2320      	movmi	r3, #32
 800e93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e93e:	0713      	lsls	r3, r2, #28
 800e940:	bf44      	itt	mi
 800e942:	232b      	movmi	r3, #43	@ 0x2b
 800e944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e948:	f89a 3000 	ldrb.w	r3, [sl]
 800e94c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e94e:	d015      	beq.n	800e97c <_vfiprintf_r+0x120>
 800e950:	9a07      	ldr	r2, [sp, #28]
 800e952:	4654      	mov	r4, sl
 800e954:	2000      	movs	r0, #0
 800e956:	f04f 0c0a 	mov.w	ip, #10
 800e95a:	4621      	mov	r1, r4
 800e95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e960:	3b30      	subs	r3, #48	@ 0x30
 800e962:	2b09      	cmp	r3, #9
 800e964:	d94b      	bls.n	800e9fe <_vfiprintf_r+0x1a2>
 800e966:	b1b0      	cbz	r0, 800e996 <_vfiprintf_r+0x13a>
 800e968:	9207      	str	r2, [sp, #28]
 800e96a:	e014      	b.n	800e996 <_vfiprintf_r+0x13a>
 800e96c:	eba0 0308 	sub.w	r3, r0, r8
 800e970:	fa09 f303 	lsl.w	r3, r9, r3
 800e974:	4313      	orrs	r3, r2
 800e976:	9304      	str	r3, [sp, #16]
 800e978:	46a2      	mov	sl, r4
 800e97a:	e7d2      	b.n	800e922 <_vfiprintf_r+0xc6>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	1d19      	adds	r1, r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	9103      	str	r1, [sp, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfbb      	ittet	lt
 800e988:	425b      	neglt	r3, r3
 800e98a:	f042 0202 	orrlt.w	r2, r2, #2
 800e98e:	9307      	strge	r3, [sp, #28]
 800e990:	9307      	strlt	r3, [sp, #28]
 800e992:	bfb8      	it	lt
 800e994:	9204      	strlt	r2, [sp, #16]
 800e996:	7823      	ldrb	r3, [r4, #0]
 800e998:	2b2e      	cmp	r3, #46	@ 0x2e
 800e99a:	d10a      	bne.n	800e9b2 <_vfiprintf_r+0x156>
 800e99c:	7863      	ldrb	r3, [r4, #1]
 800e99e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9a0:	d132      	bne.n	800ea08 <_vfiprintf_r+0x1ac>
 800e9a2:	9b03      	ldr	r3, [sp, #12]
 800e9a4:	1d1a      	adds	r2, r3, #4
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	9203      	str	r2, [sp, #12]
 800e9aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9ae:	3402      	adds	r4, #2
 800e9b0:	9305      	str	r3, [sp, #20]
 800e9b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea88 <_vfiprintf_r+0x22c>
 800e9b6:	7821      	ldrb	r1, [r4, #0]
 800e9b8:	2203      	movs	r2, #3
 800e9ba:	4650      	mov	r0, sl
 800e9bc:	f7f1 fc28 	bl	8000210 <memchr>
 800e9c0:	b138      	cbz	r0, 800e9d2 <_vfiprintf_r+0x176>
 800e9c2:	9b04      	ldr	r3, [sp, #16]
 800e9c4:	eba0 000a 	sub.w	r0, r0, sl
 800e9c8:	2240      	movs	r2, #64	@ 0x40
 800e9ca:	4082      	lsls	r2, r0
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	3401      	adds	r4, #1
 800e9d0:	9304      	str	r3, [sp, #16]
 800e9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d6:	4829      	ldr	r0, [pc, #164]	@ (800ea7c <_vfiprintf_r+0x220>)
 800e9d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9dc:	2206      	movs	r2, #6
 800e9de:	f7f1 fc17 	bl	8000210 <memchr>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d03f      	beq.n	800ea66 <_vfiprintf_r+0x20a>
 800e9e6:	4b26      	ldr	r3, [pc, #152]	@ (800ea80 <_vfiprintf_r+0x224>)
 800e9e8:	bb1b      	cbnz	r3, 800ea32 <_vfiprintf_r+0x1d6>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	3307      	adds	r3, #7
 800e9ee:	f023 0307 	bic.w	r3, r3, #7
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	9303      	str	r3, [sp, #12]
 800e9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f8:	443b      	add	r3, r7
 800e9fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9fc:	e76a      	b.n	800e8d4 <_vfiprintf_r+0x78>
 800e9fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea02:	460c      	mov	r4, r1
 800ea04:	2001      	movs	r0, #1
 800ea06:	e7a8      	b.n	800e95a <_vfiprintf_r+0xfe>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	3401      	adds	r4, #1
 800ea0c:	9305      	str	r3, [sp, #20]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	f04f 0c0a 	mov.w	ip, #10
 800ea14:	4620      	mov	r0, r4
 800ea16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea1a:	3a30      	subs	r2, #48	@ 0x30
 800ea1c:	2a09      	cmp	r2, #9
 800ea1e:	d903      	bls.n	800ea28 <_vfiprintf_r+0x1cc>
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0c6      	beq.n	800e9b2 <_vfiprintf_r+0x156>
 800ea24:	9105      	str	r1, [sp, #20]
 800ea26:	e7c4      	b.n	800e9b2 <_vfiprintf_r+0x156>
 800ea28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e7f0      	b.n	800ea14 <_vfiprintf_r+0x1b8>
 800ea32:	ab03      	add	r3, sp, #12
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	462a      	mov	r2, r5
 800ea38:	4b12      	ldr	r3, [pc, #72]	@ (800ea84 <_vfiprintf_r+0x228>)
 800ea3a:	a904      	add	r1, sp, #16
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7fb fe83 	bl	800a748 <_printf_float>
 800ea42:	4607      	mov	r7, r0
 800ea44:	1c78      	adds	r0, r7, #1
 800ea46:	d1d6      	bne.n	800e9f6 <_vfiprintf_r+0x19a>
 800ea48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea4a:	07d9      	lsls	r1, r3, #31
 800ea4c:	d405      	bmi.n	800ea5a <_vfiprintf_r+0x1fe>
 800ea4e:	89ab      	ldrh	r3, [r5, #12]
 800ea50:	059a      	lsls	r2, r3, #22
 800ea52:	d402      	bmi.n	800ea5a <_vfiprintf_r+0x1fe>
 800ea54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea56:	f7fd fc29 	bl	800c2ac <__retarget_lock_release_recursive>
 800ea5a:	89ab      	ldrh	r3, [r5, #12]
 800ea5c:	065b      	lsls	r3, r3, #25
 800ea5e:	f53f af1f 	bmi.w	800e8a0 <_vfiprintf_r+0x44>
 800ea62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea64:	e71e      	b.n	800e8a4 <_vfiprintf_r+0x48>
 800ea66:	ab03      	add	r3, sp, #12
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	4b05      	ldr	r3, [pc, #20]	@ (800ea84 <_vfiprintf_r+0x228>)
 800ea6e:	a904      	add	r1, sp, #16
 800ea70:	4630      	mov	r0, r6
 800ea72:	f7fc f901 	bl	800ac78 <_printf_i>
 800ea76:	e7e4      	b.n	800ea42 <_vfiprintf_r+0x1e6>
 800ea78:	0800f4f6 	.word	0x0800f4f6
 800ea7c:	0800f500 	.word	0x0800f500
 800ea80:	0800a749 	.word	0x0800a749
 800ea84:	0800e839 	.word	0x0800e839
 800ea88:	0800f4fc 	.word	0x0800f4fc

0800ea8c <__swbuf_r>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	460e      	mov	r6, r1
 800ea90:	4614      	mov	r4, r2
 800ea92:	4605      	mov	r5, r0
 800ea94:	b118      	cbz	r0, 800ea9e <__swbuf_r+0x12>
 800ea96:	6a03      	ldr	r3, [r0, #32]
 800ea98:	b90b      	cbnz	r3, 800ea9e <__swbuf_r+0x12>
 800ea9a:	f7fc fd01 	bl	800b4a0 <__sinit>
 800ea9e:	69a3      	ldr	r3, [r4, #24]
 800eaa0:	60a3      	str	r3, [r4, #8]
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	071a      	lsls	r2, r3, #28
 800eaa6:	d501      	bpl.n	800eaac <__swbuf_r+0x20>
 800eaa8:	6923      	ldr	r3, [r4, #16]
 800eaaa:	b943      	cbnz	r3, 800eabe <__swbuf_r+0x32>
 800eaac:	4621      	mov	r1, r4
 800eaae:	4628      	mov	r0, r5
 800eab0:	f000 f82a 	bl	800eb08 <__swsetup_r>
 800eab4:	b118      	cbz	r0, 800eabe <__swbuf_r+0x32>
 800eab6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800eaba:	4638      	mov	r0, r7
 800eabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	6922      	ldr	r2, [r4, #16]
 800eac2:	1a98      	subs	r0, r3, r2
 800eac4:	6963      	ldr	r3, [r4, #20]
 800eac6:	b2f6      	uxtb	r6, r6
 800eac8:	4283      	cmp	r3, r0
 800eaca:	4637      	mov	r7, r6
 800eacc:	dc05      	bgt.n	800eada <__swbuf_r+0x4e>
 800eace:	4621      	mov	r1, r4
 800ead0:	4628      	mov	r0, r5
 800ead2:	f7ff f829 	bl	800db28 <_fflush_r>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d1ed      	bne.n	800eab6 <__swbuf_r+0x2a>
 800eada:	68a3      	ldr	r3, [r4, #8]
 800eadc:	3b01      	subs	r3, #1
 800eade:	60a3      	str	r3, [r4, #8]
 800eae0:	6823      	ldr	r3, [r4, #0]
 800eae2:	1c5a      	adds	r2, r3, #1
 800eae4:	6022      	str	r2, [r4, #0]
 800eae6:	701e      	strb	r6, [r3, #0]
 800eae8:	6962      	ldr	r2, [r4, #20]
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d004      	beq.n	800eafa <__swbuf_r+0x6e>
 800eaf0:	89a3      	ldrh	r3, [r4, #12]
 800eaf2:	07db      	lsls	r3, r3, #31
 800eaf4:	d5e1      	bpl.n	800eaba <__swbuf_r+0x2e>
 800eaf6:	2e0a      	cmp	r6, #10
 800eaf8:	d1df      	bne.n	800eaba <__swbuf_r+0x2e>
 800eafa:	4621      	mov	r1, r4
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7ff f813 	bl	800db28 <_fflush_r>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d0d9      	beq.n	800eaba <__swbuf_r+0x2e>
 800eb06:	e7d6      	b.n	800eab6 <__swbuf_r+0x2a>

0800eb08 <__swsetup_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4b29      	ldr	r3, [pc, #164]	@ (800ebb0 <__swsetup_r+0xa8>)
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	6818      	ldr	r0, [r3, #0]
 800eb10:	460c      	mov	r4, r1
 800eb12:	b118      	cbz	r0, 800eb1c <__swsetup_r+0x14>
 800eb14:	6a03      	ldr	r3, [r0, #32]
 800eb16:	b90b      	cbnz	r3, 800eb1c <__swsetup_r+0x14>
 800eb18:	f7fc fcc2 	bl	800b4a0 <__sinit>
 800eb1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb20:	0719      	lsls	r1, r3, #28
 800eb22:	d422      	bmi.n	800eb6a <__swsetup_r+0x62>
 800eb24:	06da      	lsls	r2, r3, #27
 800eb26:	d407      	bmi.n	800eb38 <__swsetup_r+0x30>
 800eb28:	2209      	movs	r2, #9
 800eb2a:	602a      	str	r2, [r5, #0]
 800eb2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb30:	81a3      	strh	r3, [r4, #12]
 800eb32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb36:	e033      	b.n	800eba0 <__swsetup_r+0x98>
 800eb38:	0758      	lsls	r0, r3, #29
 800eb3a:	d512      	bpl.n	800eb62 <__swsetup_r+0x5a>
 800eb3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb3e:	b141      	cbz	r1, 800eb52 <__swsetup_r+0x4a>
 800eb40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb44:	4299      	cmp	r1, r3
 800eb46:	d002      	beq.n	800eb4e <__swsetup_r+0x46>
 800eb48:	4628      	mov	r0, r5
 800eb4a:	f7ff fdf3 	bl	800e734 <_free_r>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	6063      	str	r3, [r4, #4]
 800eb5e:	6923      	ldr	r3, [r4, #16]
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	f043 0308 	orr.w	r3, r3, #8
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	6923      	ldr	r3, [r4, #16]
 800eb6c:	b94b      	cbnz	r3, 800eb82 <__swsetup_r+0x7a>
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb78:	d003      	beq.n	800eb82 <__swsetup_r+0x7a>
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f000 f83f 	bl	800ec00 <__smakebuf_r>
 800eb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb86:	f013 0201 	ands.w	r2, r3, #1
 800eb8a:	d00a      	beq.n	800eba2 <__swsetup_r+0x9a>
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	60a2      	str	r2, [r4, #8]
 800eb90:	6962      	ldr	r2, [r4, #20]
 800eb92:	4252      	negs	r2, r2
 800eb94:	61a2      	str	r2, [r4, #24]
 800eb96:	6922      	ldr	r2, [r4, #16]
 800eb98:	b942      	cbnz	r2, 800ebac <__swsetup_r+0xa4>
 800eb9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb9e:	d1c5      	bne.n	800eb2c <__swsetup_r+0x24>
 800eba0:	bd38      	pop	{r3, r4, r5, pc}
 800eba2:	0799      	lsls	r1, r3, #30
 800eba4:	bf58      	it	pl
 800eba6:	6962      	ldrpl	r2, [r4, #20]
 800eba8:	60a2      	str	r2, [r4, #8]
 800ebaa:	e7f4      	b.n	800eb96 <__swsetup_r+0x8e>
 800ebac:	2000      	movs	r0, #0
 800ebae:	e7f7      	b.n	800eba0 <__swsetup_r+0x98>
 800ebb0:	200001a0 	.word	0x200001a0

0800ebb4 <__swhatbuf_r>:
 800ebb4:	b570      	push	{r4, r5, r6, lr}
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebbc:	2900      	cmp	r1, #0
 800ebbe:	b096      	sub	sp, #88	@ 0x58
 800ebc0:	4615      	mov	r5, r2
 800ebc2:	461e      	mov	r6, r3
 800ebc4:	da0d      	bge.n	800ebe2 <__swhatbuf_r+0x2e>
 800ebc6:	89a3      	ldrh	r3, [r4, #12]
 800ebc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebcc:	f04f 0100 	mov.w	r1, #0
 800ebd0:	bf14      	ite	ne
 800ebd2:	2340      	movne	r3, #64	@ 0x40
 800ebd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebd8:	2000      	movs	r0, #0
 800ebda:	6031      	str	r1, [r6, #0]
 800ebdc:	602b      	str	r3, [r5, #0]
 800ebde:	b016      	add	sp, #88	@ 0x58
 800ebe0:	bd70      	pop	{r4, r5, r6, pc}
 800ebe2:	466a      	mov	r2, sp
 800ebe4:	f000 f848 	bl	800ec78 <_fstat_r>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	dbec      	blt.n	800ebc6 <__swhatbuf_r+0x12>
 800ebec:	9901      	ldr	r1, [sp, #4]
 800ebee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebf6:	4259      	negs	r1, r3
 800ebf8:	4159      	adcs	r1, r3
 800ebfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebfe:	e7eb      	b.n	800ebd8 <__swhatbuf_r+0x24>

0800ec00 <__smakebuf_r>:
 800ec00:	898b      	ldrh	r3, [r1, #12]
 800ec02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec04:	079d      	lsls	r5, r3, #30
 800ec06:	4606      	mov	r6, r0
 800ec08:	460c      	mov	r4, r1
 800ec0a:	d507      	bpl.n	800ec1c <__smakebuf_r+0x1c>
 800ec0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	6123      	str	r3, [r4, #16]
 800ec14:	2301      	movs	r3, #1
 800ec16:	6163      	str	r3, [r4, #20]
 800ec18:	b003      	add	sp, #12
 800ec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec1c:	ab01      	add	r3, sp, #4
 800ec1e:	466a      	mov	r2, sp
 800ec20:	f7ff ffc8 	bl	800ebb4 <__swhatbuf_r>
 800ec24:	9f00      	ldr	r7, [sp, #0]
 800ec26:	4605      	mov	r5, r0
 800ec28:	4639      	mov	r1, r7
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f7fe fe66 	bl	800d8fc <_malloc_r>
 800ec30:	b948      	cbnz	r0, 800ec46 <__smakebuf_r+0x46>
 800ec32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec36:	059a      	lsls	r2, r3, #22
 800ec38:	d4ee      	bmi.n	800ec18 <__smakebuf_r+0x18>
 800ec3a:	f023 0303 	bic.w	r3, r3, #3
 800ec3e:	f043 0302 	orr.w	r3, r3, #2
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	e7e2      	b.n	800ec0c <__smakebuf_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	6020      	str	r0, [r4, #0]
 800ec4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec4e:	81a3      	strh	r3, [r4, #12]
 800ec50:	9b01      	ldr	r3, [sp, #4]
 800ec52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec56:	b15b      	cbz	r3, 800ec70 <__smakebuf_r+0x70>
 800ec58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f000 f81d 	bl	800ec9c <_isatty_r>
 800ec62:	b128      	cbz	r0, 800ec70 <__smakebuf_r+0x70>
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	f023 0303 	bic.w	r3, r3, #3
 800ec6a:	f043 0301 	orr.w	r3, r3, #1
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	89a3      	ldrh	r3, [r4, #12]
 800ec72:	431d      	orrs	r5, r3
 800ec74:	81a5      	strh	r5, [r4, #12]
 800ec76:	e7cf      	b.n	800ec18 <__smakebuf_r+0x18>

0800ec78 <_fstat_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d07      	ldr	r5, [pc, #28]	@ (800ec98 <_fstat_r+0x20>)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	4611      	mov	r1, r2
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	f7f4 f969 	bl	8002f5c <_fstat>
 800ec8a:	1c43      	adds	r3, r0, #1
 800ec8c:	d102      	bne.n	800ec94 <_fstat_r+0x1c>
 800ec8e:	682b      	ldr	r3, [r5, #0]
 800ec90:	b103      	cbz	r3, 800ec94 <_fstat_r+0x1c>
 800ec92:	6023      	str	r3, [r4, #0]
 800ec94:	bd38      	pop	{r3, r4, r5, pc}
 800ec96:	bf00      	nop
 800ec98:	200069a4 	.word	0x200069a4

0800ec9c <_isatty_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d06      	ldr	r5, [pc, #24]	@ (800ecb8 <_isatty_r+0x1c>)
 800eca0:	2300      	movs	r3, #0
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	602b      	str	r3, [r5, #0]
 800eca8:	f7f4 f968 	bl	8002f7c <_isatty>
 800ecac:	1c43      	adds	r3, r0, #1
 800ecae:	d102      	bne.n	800ecb6 <_isatty_r+0x1a>
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	b103      	cbz	r3, 800ecb6 <_isatty_r+0x1a>
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	200069a4 	.word	0x200069a4

0800ecbc <_raise_r>:
 800ecbc:	291f      	cmp	r1, #31
 800ecbe:	b538      	push	{r3, r4, r5, lr}
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	d904      	bls.n	800ecd0 <_raise_r+0x14>
 800ecc6:	2316      	movs	r3, #22
 800ecc8:	6003      	str	r3, [r0, #0]
 800ecca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecce:	bd38      	pop	{r3, r4, r5, pc}
 800ecd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecd2:	b112      	cbz	r2, 800ecda <_raise_r+0x1e>
 800ecd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecd8:	b94b      	cbnz	r3, 800ecee <_raise_r+0x32>
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f000 f830 	bl	800ed40 <_getpid_r>
 800ece0:	4622      	mov	r2, r4
 800ece2:	4601      	mov	r1, r0
 800ece4:	4628      	mov	r0, r5
 800ece6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecea:	f000 b817 	b.w	800ed1c <_kill_r>
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d00a      	beq.n	800ed08 <_raise_r+0x4c>
 800ecf2:	1c59      	adds	r1, r3, #1
 800ecf4:	d103      	bne.n	800ecfe <_raise_r+0x42>
 800ecf6:	2316      	movs	r3, #22
 800ecf8:	6003      	str	r3, [r0, #0]
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	e7e7      	b.n	800ecce <_raise_r+0x12>
 800ecfe:	2100      	movs	r1, #0
 800ed00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed04:	4620      	mov	r0, r4
 800ed06:	4798      	blx	r3
 800ed08:	2000      	movs	r0, #0
 800ed0a:	e7e0      	b.n	800ecce <_raise_r+0x12>

0800ed0c <raise>:
 800ed0c:	4b02      	ldr	r3, [pc, #8]	@ (800ed18 <raise+0xc>)
 800ed0e:	4601      	mov	r1, r0
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	f7ff bfd3 	b.w	800ecbc <_raise_r>
 800ed16:	bf00      	nop
 800ed18:	200001a0 	.word	0x200001a0

0800ed1c <_kill_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	4d07      	ldr	r5, [pc, #28]	@ (800ed3c <_kill_r+0x20>)
 800ed20:	2300      	movs	r3, #0
 800ed22:	4604      	mov	r4, r0
 800ed24:	4608      	mov	r0, r1
 800ed26:	4611      	mov	r1, r2
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	f7f4 f8b7 	bl	8002e9c <_kill>
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d102      	bne.n	800ed38 <_kill_r+0x1c>
 800ed32:	682b      	ldr	r3, [r5, #0]
 800ed34:	b103      	cbz	r3, 800ed38 <_kill_r+0x1c>
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	200069a4 	.word	0x200069a4

0800ed40 <_getpid_r>:
 800ed40:	f7f4 b8a4 	b.w	8002e8c <_getpid>

0800ed44 <roundf>:
 800ed44:	ee10 0a10 	vmov	r0, s0
 800ed48:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ed4c:	3a7f      	subs	r2, #127	@ 0x7f
 800ed4e:	2a16      	cmp	r2, #22
 800ed50:	dc15      	bgt.n	800ed7e <roundf+0x3a>
 800ed52:	2a00      	cmp	r2, #0
 800ed54:	da08      	bge.n	800ed68 <roundf+0x24>
 800ed56:	3201      	adds	r2, #1
 800ed58:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800ed5c:	d101      	bne.n	800ed62 <roundf+0x1e>
 800ed5e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800ed62:	ee00 3a10 	vmov	s0, r3
 800ed66:	4770      	bx	lr
 800ed68:	4907      	ldr	r1, [pc, #28]	@ (800ed88 <roundf+0x44>)
 800ed6a:	4111      	asrs	r1, r2
 800ed6c:	4201      	tst	r1, r0
 800ed6e:	d0fa      	beq.n	800ed66 <roundf+0x22>
 800ed70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ed74:	4113      	asrs	r3, r2
 800ed76:	4403      	add	r3, r0
 800ed78:	ea23 0301 	bic.w	r3, r3, r1
 800ed7c:	e7f1      	b.n	800ed62 <roundf+0x1e>
 800ed7e:	2a80      	cmp	r2, #128	@ 0x80
 800ed80:	d1f1      	bne.n	800ed66 <roundf+0x22>
 800ed82:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed86:	4770      	bx	lr
 800ed88:	007fffff 	.word	0x007fffff

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
