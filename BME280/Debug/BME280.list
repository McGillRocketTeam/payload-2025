
BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b74  08004b74  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b74  08004b74  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b74  08004b74  00005b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b78  08004b78  00005b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c662  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b5c  00000000  00000000  0001269e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  00014200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079d  00000000  00000000  00014bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4e0  00000000  00000000  0001535d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6f9  00000000  00000000  0003483d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd8f0  00000000  00000000  00042f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100826  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028e4  00000000  00000000  0010086c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00103150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b24 	.word	0x08004b24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004b24 	.word	0x08004b24

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2319      	movs	r3, #25
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	463b      	mov	r3, r7
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2288      	movs	r2, #136	@ 0x88
 8000a28:	21ec      	movs	r1, #236	@ 0xec
 8000a2a:	4857      	ldr	r0, [pc, #348]	@ (8000b88 <TrimRead+0x178>)
 8000a2c:	f001 fb0a 	bl	8002044 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000a30:	463b      	mov	r3, r7
 8000a32:	3319      	adds	r3, #25
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	9202      	str	r2, [sp, #8]
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2301      	movs	r3, #1
 8000a42:	22e1      	movs	r2, #225	@ 0xe1
 8000a44:	21ec      	movs	r1, #236	@ 0xec
 8000a46:	4850      	ldr	r0, [pc, #320]	@ (8000b88 <TrimRead+0x178>)
 8000a48:	f001 fafc 	bl	8002044 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000a4c:	787b      	ldrb	r3, [r7, #1]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	783b      	ldrb	r3, [r7, #0]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b8c <TrimRead+0x17c>)
 8000a5e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	78bb      	ldrb	r3, [r7, #2]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	4b48      	ldr	r3, [pc, #288]	@ (8000b90 <TrimRead+0x180>)
 8000a70:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	793b      	ldrb	r3, [r7, #4]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <TrimRead+0x184>)
 8000a82:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b40      	ldr	r3, [pc, #256]	@ (8000b98 <TrimRead+0x188>)
 8000a96:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000a98:	7a7b      	ldrb	r3, [r7, #9]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8000b9c <TrimRead+0x18c>)
 8000aa8:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	7abb      	ldrb	r3, [r7, #10]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <TrimRead+0x190>)
 8000aba:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000abc:	7b7b      	ldrb	r3, [r7, #13]
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <TrimRead+0x194>)
 8000acc:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <TrimRead+0x198>)
 8000ade:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000ae0:	7c7b      	ldrb	r3, [r7, #17]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	7c3b      	ldrb	r3, [r7, #16]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <TrimRead+0x19c>)
 8000af0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	7cbb      	ldrb	r3, [r7, #18]
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <TrimRead+0x1a0>)
 8000b02:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000b04:	7d7b      	ldrb	r3, [r7, #21]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	7d3b      	ldrb	r3, [r7, #20]
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <TrimRead+0x1a4>)
 8000b14:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	7dbb      	ldrb	r3, [r7, #22]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <TrimRead+0x1a8>)
 8000b26:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000b28:	7e3b      	ldrb	r3, [r7, #24]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <TrimRead+0x1ac>)
 8000b2e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000b30:	7ebb      	ldrb	r3, [r7, #26]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	7e7b      	ldrb	r3, [r7, #25]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <TrimRead+0x1b0>)
 8000b40:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000b42:	7efb      	ldrb	r3, [r7, #27]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <TrimRead+0x1b4>)
 8000b48:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000b4a:	7f3b      	ldrb	r3, [r7, #28]
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	7f7b      	ldrb	r3, [r7, #29]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <TrimRead+0x1b8>)
 8000b60:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000b62:	7fbb      	ldrb	r3, [r7, #30]
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	7f7b      	ldrb	r3, [r7, #29]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <TrimRead+0x1bc>)
 8000b76:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000b78:	7ffb      	ldrb	r3, [r7, #31]
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <TrimRead+0x1c0>)
 8000b7e:	801a      	strh	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000060 	.word	0x20000060
 8000b8c:	20000038 	.word	0x20000038
 8000b90:	20000040 	.word	0x20000040
 8000b94:	20000042 	.word	0x20000042
 8000b98:	2000003a 	.word	0x2000003a
 8000b9c:	20000044 	.word	0x20000044
 8000ba0:	20000046 	.word	0x20000046
 8000ba4:	20000048 	.word	0x20000048
 8000ba8:	2000004a 	.word	0x2000004a
 8000bac:	2000004c 	.word	0x2000004c
 8000bb0:	2000004e 	.word	0x2000004e
 8000bb4:	20000050 	.word	0x20000050
 8000bb8:	20000052 	.word	0x20000052
 8000bbc:	2000003c 	.word	0x2000003c
 8000bc0:	20000054 	.word	0x20000054
 8000bc4:	2000003e 	.word	0x2000003e
 8000bc8:	20000056 	.word	0x20000056
 8000bcc:	20000058 	.word	0x20000058
 8000bd0:	2000005a 	.word	0x2000005a

08000bd4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af04      	add	r7, sp, #16
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4623      	mov	r3, r4
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	4603      	mov	r3, r0
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	460b      	mov	r3, r1
 8000bec:	717b      	strb	r3, [r7, #5]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000bf2:	f7ff ff0d 	bl	8000a10 <TrimRead>


	uint8_t datatowrite = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000bfe:	23b6      	movs	r3, #182	@ 0xb6
 8000c00:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f107 030f 	add.w	r3, r7, #15
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	22e0      	movs	r2, #224	@ 0xe0
 8000c16:	21ec      	movs	r1, #236	@ 0xec
 8000c18:	4858      	ldr	r0, [pc, #352]	@ (8000d7c <BME280_Config+0x1a8>)
 8000c1a:	f001 f8ff 	bl	8001e1c <HAL_I2C_Mem_Write>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <BME280_Config+0x56>
	{
		return -1;
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	e0a3      	b.n	8000d72 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000c2a:	2064      	movs	r0, #100	@ 0x64
 8000c2c:	f000 fdae 	bl	800178c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000c30:	797b      	ldrb	r3, [r7, #5]
 8000c32:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000c34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	f107 030f 	add.w	r3, r7, #15
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	22f2      	movs	r2, #242	@ 0xf2
 8000c48:	21ec      	movs	r1, #236	@ 0xec
 8000c4a:	484c      	ldr	r0, [pc, #304]	@ (8000d7c <BME280_Config+0x1a8>)
 8000c4c:	f001 f8e6 	bl	8001e1c <HAL_I2C_Mem_Write>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <BME280_Config+0x88>
	{
		return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e08a      	b.n	8000d72 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000c5c:	2064      	movs	r0, #100	@ 0x64
 8000c5e:	f000 fd95 	bl	800178c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	f107 030e 	add.w	r3, r7, #14
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	22f2      	movs	r2, #242	@ 0xf2
 8000c76:	21ec      	movs	r1, #236	@ 0xec
 8000c78:	4840      	ldr	r0, [pc, #256]	@ (8000d7c <BME280_Config+0x1a8>)
 8000c7a:	f001 f9e3 	bl	8002044 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000c7e:	7bba      	ldrb	r2, [r7, #14]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d002      	beq.n	8000c8c <BME280_Config+0xb8>
	{
		return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e072      	b.n	8000d72 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000c8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c90:	015b      	lsls	r3, r3, #5
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	f107 030f 	add.w	r3, r7, #15
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	22f5      	movs	r2, #245	@ 0xf5
 8000cb8:	21ec      	movs	r1, #236	@ 0xec
 8000cba:	4830      	ldr	r0, [pc, #192]	@ (8000d7c <BME280_Config+0x1a8>)
 8000cbc:	f001 f8ae 	bl	8001e1c <HAL_I2C_Mem_Write>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <BME280_Config+0xf8>
	{
		return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e052      	b.n	8000d72 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000ccc:	2064      	movs	r0, #100	@ 0x64
 8000cce:	f000 fd5d 	bl	800178c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8000cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	f107 030e 	add.w	r3, r7, #14
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	22f5      	movs	r2, #245	@ 0xf5
 8000ce6:	21ec      	movs	r1, #236	@ 0xec
 8000ce8:	4824      	ldr	r0, [pc, #144]	@ (8000d7c <BME280_Config+0x1a8>)
 8000cea:	f001 f9ab 	bl	8002044 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000cee:	7bba      	ldrb	r2, [r7, #14]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d002      	beq.n	8000cfc <BME280_Config+0x128>
	{
		return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e03a      	b.n	8000d72 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	015b      	lsls	r3, r3, #5
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	f107 030f 	add.w	r3, r7, #15
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	22f4      	movs	r2, #244	@ 0xf4
 8000d2c:	21ec      	movs	r1, #236	@ 0xec
 8000d2e:	4813      	ldr	r0, [pc, #76]	@ (8000d7c <BME280_Config+0x1a8>)
 8000d30:	f001 f874 	bl	8001e1c <HAL_I2C_Mem_Write>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <BME280_Config+0x16c>
	{
		return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e018      	b.n	8000d72 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000d40:	2064      	movs	r0, #100	@ 0x64
 8000d42:	f000 fd23 	bl	800178c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	f107 030e 	add.w	r3, r7, #14
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	22f4      	movs	r2, #244	@ 0xf4
 8000d5a:	21ec      	movs	r1, #236	@ 0xec
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <BME280_Config+0x1a8>)
 8000d5e:	f001 f971 	bl	8002044 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000d62:	7bba      	ldrb	r2, [r7, #14]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d002      	beq.n	8000d70 <BME280_Config+0x19c>
	{
		return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e000      	b.n	8000d72 <BME280_Config+0x19e>
	}

	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000060 	.word	0x20000060

08000d80 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <BMEReadRaw+0x8c>)
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	22d0      	movs	r2, #208	@ 0xd0
 8000d98:	21ec      	movs	r1, #236	@ 0xec
 8000d9a:	481d      	ldr	r0, [pc, #116]	@ (8000e10 <BMEReadRaw+0x90>)
 8000d9c:	f001 f952 	bl	8002044 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <BMEReadRaw+0x8c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b60      	cmp	r3, #96	@ 0x60
 8000da6:	d12a      	bne.n	8000dfe <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2308      	movs	r3, #8
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	463b      	mov	r3, r7
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	22f7      	movs	r2, #247	@ 0xf7
 8000dba:	21ec      	movs	r1, #236	@ 0xec
 8000dbc:	4814      	ldr	r0, [pc, #80]	@ (8000e10 <BMEReadRaw+0x90>)
 8000dbe:	f001 f941 	bl	8002044 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000dc2:	783b      	ldrb	r3, [r7, #0]
 8000dc4:	031a      	lsls	r2, r3, #12
 8000dc6:	787b      	ldrb	r3, [r7, #1]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	78ba      	ldrb	r2, [r7, #2]
 8000dce:	0912      	lsrs	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <BMEReadRaw+0x94>)
 8000dd6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	031a      	lsls	r2, r3, #12
 8000ddc:	793b      	ldrb	r3, [r7, #4]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4313      	orrs	r3, r2
 8000de2:	797a      	ldrb	r2, [r7, #5]
 8000de4:	0912      	lsrs	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	4313      	orrs	r3, r2
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <BMEReadRaw+0x98>)
 8000dec:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <BMEReadRaw+0x9c>)
 8000df8:	6013      	str	r3, [r2, #0]

		return 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e001      	b.n	8000e02 <BMEReadRaw+0x82>
	}

	else return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000028 	.word	0x20000028
 8000e10:	20000060 	.word	0x20000060
 8000e14:	20000030 	.word	0x20000030
 8000e18:	2000002c 	.word	0x2000002c
 8000e1c:	20000034 	.word	0x20000034

08000e20 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	10da      	asrs	r2, r3, #3
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <BME280_compensate_T_int32+0x74>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <BME280_compensate_T_int32+0x78>)
 8000e36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	12db      	asrs	r3, r3, #11
 8000e40:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	111b      	asrs	r3, r3, #4
 8000e46:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <BME280_compensate_T_int32+0x74>)
 8000e48:	8812      	ldrh	r2, [r2, #0]
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	1112      	asrs	r2, r2, #4
 8000e50:	4910      	ldr	r1, [pc, #64]	@ (8000e94 <BME280_compensate_T_int32+0x74>)
 8000e52:	8809      	ldrh	r1, [r1, #0]
 8000e54:	1a52      	subs	r2, r2, r1
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	131b      	asrs	r3, r3, #12
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <BME280_compensate_T_int32+0x7c>)
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	139b      	asrs	r3, r3, #14
 8000e68:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <BME280_compensate_T_int32+0x80>)
 8000e72:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <BME280_compensate_T_int32+0x80>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3380      	adds	r3, #128	@ 0x80
 8000e80:	121b      	asrs	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
	return T;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000038 	.word	0x20000038
 8000e98:	20000040 	.word	0x20000040
 8000e9c:	20000042 	.word	0x20000042
 8000ea0:	2000005c 	.word	0x2000005c

08000ea4 <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8000eac:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd8 <BME280_compensate_P_int32+0x134>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	105b      	asrs	r3, r3, #1
 8000eb2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8000eb6:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	109b      	asrs	r3, r3, #2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	1092      	asrs	r2, r2, #2
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	12db      	asrs	r3, r3, #11
 8000ec6:	4a45      	ldr	r2, [pc, #276]	@ (8000fdc <BME280_compensate_P_int32+0x138>)
 8000ec8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 8000ed2:	4b43      	ldr	r3, [pc, #268]	@ (8000fe0 <BME280_compensate_P_int32+0x13c>)
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	109a      	asrs	r2, r3, #2
 8000eec:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe4 <BME280_compensate_P_int32+0x140>)
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <BME280_compensate_P_int32+0x144>)
 8000efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efe:	4619      	mov	r1, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	109b      	asrs	r3, r3, #2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	1092      	asrs	r2, r2, #2
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	135b      	asrs	r3, r3, #13
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	10da      	asrs	r2, r3, #3
 8000f14:	4b35      	ldr	r3, [pc, #212]	@ (8000fec <BME280_compensate_P_int32+0x148>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	105b      	asrs	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	149b      	asrs	r3, r3, #18
 8000f28:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000f30:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <BME280_compensate_P_int32+0x14c>)
 8000f32:	8812      	ldrh	r2, [r2, #0]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	13db      	asrs	r3, r3, #15
 8000f3a:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 8000f42:	2300      	movs	r3, #0
 8000f44:	e041      	b.n	8000fca <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	131b      	asrs	r3, r3, #12
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a28      	ldr	r2, [pc, #160]	@ (8000ff4 <BME280_compensate_P_int32+0x150>)
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8000f5a:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8000f5e:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db06      	blt.n	8000f74 <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005a      	lsls	r2, r3, #1
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e005      	b.n	8000f80 <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <BME280_compensate_P_int32+0x154>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	4619      	mov	r1, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	08d2      	lsrs	r2, r2, #3
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	0b5b      	lsrs	r3, r3, #13
 8000f96:	fb01 f303 	mul.w	r3, r1, r3
 8000f9a:	131b      	asrs	r3, r3, #12
 8000f9c:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <BME280_compensate_P_int32+0x158>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	135b      	asrs	r3, r3, #13
 8000fb0:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a11      	ldr	r2, [pc, #68]	@ (8001000 <BME280_compensate_P_int32+0x15c>)
 8000fba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	111a      	asrs	r2, r3, #4
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
	return p;
 8000fc8:	697b      	ldr	r3, [r7, #20]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000005c 	.word	0x2000005c
 8000fdc:	2000004c 	.word	0x2000004c
 8000fe0:	2000004a 	.word	0x2000004a
 8000fe4:	20000048 	.word	0x20000048
 8000fe8:	20000046 	.word	0x20000046
 8000fec:	20000044 	.word	0x20000044
 8000ff0:	2000003a 	.word	0x2000003a
 8000ff4:	fffff3cb 	.word	0xfffff3cb
 8000ff8:	20000052 	.word	0x20000052
 8000ffc:	20000050 	.word	0x20000050
 8001000:	2000004e 	.word	0x2000004e

08001004 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <bme280_compensate_H_int32+0xbc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001014:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	039a      	lsls	r2, r3, #14
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <bme280_compensate_H_int32+0xc0>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	051b      	lsls	r3, r3, #20
 8001022:	1ad2      	subs	r2, r2, r3
 8001024:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <bme280_compensate_H_int32+0xc4>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	4619      	mov	r1, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001034:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001038:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800103a:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <bme280_compensate_H_int32+0xc8>)
 800103c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001040:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001048:	1292      	asrs	r2, r2, #10
 800104a:	4921      	ldr	r1, [pc, #132]	@ (80010d0 <bme280_compensate_H_int32+0xcc>)
 800104c:	8809      	ldrh	r1, [r1, #0]
 800104e:	4608      	mov	r0, r1
 8001050:	68f9      	ldr	r1, [r7, #12]
 8001052:	fb00 f101 	mul.w	r1, r0, r1
 8001056:	12c9      	asrs	r1, r1, #11
 8001058:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800105c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001060:	1292      	asrs	r2, r2, #10
 8001062:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001066:	491b      	ldr	r1, [pc, #108]	@ (80010d4 <bme280_compensate_H_int32+0xd0>)
 8001068:	f9b1 1000 	ldrsh.w	r1, [r1]
 800106c:	fb01 f202 	mul.w	r2, r1, r2
 8001070:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001074:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	13db      	asrs	r3, r3, #15
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	13d2      	asrs	r2, r2, #15
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <bme280_compensate_H_int32+0xd4>)
 800108c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800108e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001092:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80010a0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80010a8:	bfa8      	it	ge
 80010aa:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80010ae:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	131b      	asrs	r3, r3, #12
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	20000056 	.word	0x20000056
 80010c8:	20000058 	.word	0x20000058
 80010cc:	2000005a 	.word	0x2000005a
 80010d0:	2000003e 	.word	0x2000003e
 80010d4:	20000054 	.word	0x20000054
 80010d8:	2000003c 	.word	0x2000003c

080010dc <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80010e0:	f7ff fe4e 	bl	8000d80 <BMEReadRaw>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d158      	bne.n	800119c <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80010ea:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <BME280_Measure+0xdc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010f2:	d104      	bne.n	80010fe <BME280_Measure+0x22>
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <BME280_Measure+0xe0>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e016      	b.n	800112c <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <BME280_Measure+0xdc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe8c 	bl	8000e20 <BME280_compensate_T_int32>
 8001108:	4603      	mov	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9b4 	bl	8000478 <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <BME280_Measure+0xe4>)
 8001116:	f7ff fb43 	bl	80007a0 <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fc25 	bl	8000970 <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <BME280_Measure+0xe0>)
 800112a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <BME280_Measure+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001134:	d104      	bne.n	8001140 <BME280_Measure+0x64>
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <BME280_Measure+0xec>)
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00b      	b.n	8001158 <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <BME280_Measure+0xe8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fead 	bl	8000ea4 <BME280_compensate_P_int32>
 800114a:	ee07 0a90 	vmov	s15, r0
 800114e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <BME280_Measure+0xec>)
 8001154:	edc3 7a00 	vstr	s15, [r3]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <BME280_Measure+0xf0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001160:	d104      	bne.n	800116c <BME280_Measure+0x90>
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <BME280_Measure+0xf4>)
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 800116a:	e023      	b.n	80011b4 <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <BME280_Measure+0xf0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff47 	bl	8001004 <bme280_compensate_H_int32>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f96d 	bl	8000458 <__aeabi_ui2d>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <BME280_Measure+0xf8>)
 8001184:	f7ff fb0c 	bl	80007a0 <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fbee 	bl	8000970 <__aeabi_d2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <BME280_Measure+0xf4>)
 8001198:	6013      	str	r3, [r2, #0]
}
 800119a:	e00b      	b.n	80011b4 <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <BME280_Measure+0xf4>)
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <BME280_Measure+0xf4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <BME280_Measure+0xec>)
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <BME280_Measure+0xec>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a02      	ldr	r2, [pc, #8]	@ (80011bc <BME280_Measure+0xe0>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000002c 	.word	0x2000002c
 80011bc:	2000013c 	.word	0x2000013c
 80011c0:	40590000 	.word	0x40590000
 80011c4:	20000030 	.word	0x20000030
 80011c8:	20000140 	.word	0x20000140
 80011cc:	20000034 	.word	0x20000034
 80011d0:	20000144 	.word	0x20000144
 80011d4:	40900000 	.word	0x40900000

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fa6f 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f817 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 f8e9 	bl	80013bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ea:	f000 f8b7 	bl	800135c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011ee:	f000 f875 	bl	80012dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80011f2:	2304      	movs	r3, #4
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2303      	movs	r3, #3
 80011fc:	2201      	movs	r2, #1
 80011fe:	2105      	movs	r1, #5
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff fce7 	bl	8000bd4 <BME280_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	BME280_Measure();
 8001206:	f7ff ff69 	bl	80010dc <BME280_Measure>
	HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f000 fabe 	bl	800178c <HAL_Delay>
	BME280_Measure();
 8001210:	bf00      	nop
 8001212:	e7f8      	b.n	8001206 <main+0x2e>

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a6      	sub	sp, #152	@ 0x98
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800121e:	2228      	movs	r2, #40	@ 0x28
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fc51 	bl	8004aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2258      	movs	r2, #88	@ 0x58
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fc43 	bl	8004aca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001244:	2303      	movs	r3, #3
 8001246:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001266:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800126a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fb57 	bl	800292c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001284:	f000 f900 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001298:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fb95 	bl	80039d4 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012b0:	f000 f8ea 	bl	8001488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012b4:	2322      	movs	r3, #34	@ 0x22
 80012b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fda6 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012ce:	f000 f8db 	bl	8001488 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3798      	adds	r7, #152	@ 0x98
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <MX_I2C1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <MX_I2C1_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001318:	f000 fce4 	bl	8001ce4 <HAL_I2C_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001322:	f000 f8b1 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <MX_I2C1_Init+0x74>)
 800132a:	f001 fa67 	bl	80027fc <HAL_I2CEx_ConfigAnalogFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 f8a8 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_I2C1_Init+0x74>)
 800133c:	f001 faa9 	bl	8002892 <HAL_I2CEx_ConfigDigitalFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f89f 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000060 	.word	0x20000060
 8001354:	40005400 	.word	0x40005400
 8001358:	00201d2b 	.word	0x00201d2b

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <MX_USART2_UART_Init+0x5c>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001368:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART2_UART_Init+0x58>)
 80013a0:	f002 ff56 	bl	8004250 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013aa:	f000 f86d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000b4 	.word	0x200000b4
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <MX_GPIO_Init+0xc4>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <MX_GPIO_Init+0xc4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <MX_GPIO_Init+0xc4>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_GPIO_Init+0xc4>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_GPIO_Init+0xc4>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <MX_GPIO_Init+0xc4>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_GPIO_Init+0xc4>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f000 fc3b 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800143e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001444:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <MX_GPIO_Init+0xc8>)
 8001456:	f000 faa3 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800145a:	2320      	movs	r3, #32
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001474:	f000 fa94 	bl	80019a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	@ 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	48000800 	.word	0x48000800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_MspInit+0x44>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <HAL_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6193      	str	r3, [r2, #24]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_MspInit+0x44>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_MspInit+0x44>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x44>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fa34 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <HAL_I2C_MspInit+0x7c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d127      	bne.n	800154e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_I2C_MspInit+0x80>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a16      	ldr	r2, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0x80>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_I2C_MspInit+0x80>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001516:	23c0      	movs	r3, #192	@ 0xc0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001526:	2304      	movs	r3, #4
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	@ (8001560 <HAL_I2C_MspInit+0x84>)
 8001532:	f000 fa35 	bl	80019a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_I2C_MspInit+0x80>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_I2C_MspInit+0x80>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0x80>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_UART_MspInit+0x7c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d128      	bne.n	80015d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_UART_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b6:	230c      	movs	r3, #12
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c6:	2307      	movs	r3, #7
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d4:	f000 f9e4 	bl	80019a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40021000 	.word	0x40021000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f885 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 fa1f 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff fd9b 	bl	80011d8 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b0:	08004b7c 	.word	0x08004b7c
  ldr r2, =_sbss
 80016b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016b8:	2000014c 	.word	0x2000014c

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x28>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f931 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff feda 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000

080016ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f93b 	bl	8001986 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f911 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	20000148 	.word	0x20000148

08001774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;  
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000148 	.word	0x20000148

0800178c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	@ (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	@ (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff47 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff5c 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffb0 	bl	80018f4 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e160      	b.n	8001c72 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8152 	beq.w	8001c6c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d005      	beq.n	80019e0 <HAL_GPIO_Init+0x40>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0201 	and.w	r2, r3, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d017      	beq.n	8001a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d123      	bne.n	8001ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	6939      	ldr	r1, [r7, #16]
 8001ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0203 	and.w	r2, r3, #3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80ac 	beq.w	8001c6c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b14:	4b5e      	ldr	r3, [pc, #376]	@ (8001c90 <HAL_GPIO_Init+0x2f0>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a5d      	ldr	r2, [pc, #372]	@ (8001c90 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b5b      	ldr	r3, [pc, #364]	@ (8001c90 <HAL_GPIO_Init+0x2f0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2c:	4a59      	ldr	r2, [pc, #356]	@ (8001c94 <HAL_GPIO_Init+0x2f4>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b56:	d025      	beq.n	8001ba4 <HAL_GPIO_Init+0x204>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c98 <HAL_GPIO_Init+0x2f8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_GPIO_Init+0x200>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a4e      	ldr	r2, [pc, #312]	@ (8001c9c <HAL_GPIO_Init+0x2fc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d019      	beq.n	8001b9c <HAL_GPIO_Init+0x1fc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <HAL_GPIO_Init+0x300>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <HAL_GPIO_Init+0x1f8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca4 <HAL_GPIO_Init+0x304>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00d      	beq.n	8001b94 <HAL_GPIO_Init+0x1f4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca8 <HAL_GPIO_Init+0x308>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d007      	beq.n	8001b90 <HAL_GPIO_Init+0x1f0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4a      	ldr	r2, [pc, #296]	@ (8001cac <HAL_GPIO_Init+0x30c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_GPIO_Init+0x1ec>
 8001b88:	2306      	movs	r3, #6
 8001b8a:	e00c      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	e00a      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001b90:	2305      	movs	r3, #5
 8001b92:	e008      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x206>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb6:	4937      	ldr	r1, [pc, #220]	@ (8001c94 <HAL_GPIO_Init+0x2f4>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001be8:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bee:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c12:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c66:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f ae97 	bne.w	80019b0 <HAL_GPIO_Init+0x10>
  }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	48001400 	.word	0x48001400
 8001cac:	48001800 	.word	0x48001800
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e08d      	b.n	8001e12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fbe6 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	@ 0x24
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e006      	b.n	8001d6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d108      	bne.n	8001d86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e007      	b.n	8001d96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	813b      	strh	r3, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	f040 80f9 	bne.w	8002036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x34>
 8001e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0ed      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Mem_Write+0x4e>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e0e6      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e72:	f7ff fc7f 	bl	8001774 <HAL_GetTick>
 8001e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fac3 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0d1      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2221      	movs	r2, #33	@ 0x21
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ebc:	88f8      	ldrh	r0, [r7, #6]
 8001ebe:	893a      	ldrh	r2, [r7, #8]
 8001ec0:	8979      	ldrh	r1, [r7, #10]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4603      	mov	r3, r0
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f9d3 	bl	8002278 <I2C_RequestMemoryWrite>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0a9      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2bff      	cmp	r3, #255	@ 0xff
 8001eec:	d90e      	bls.n	8001f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	22ff      	movs	r2, #255	@ 0xff
 8001ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	8979      	ldrh	r1, [r7, #10]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fc47 	bl	8002798 <I2C_TransferConfig>
 8001f0a:	e00f      	b.n	8001f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fc36 	bl	8002798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fac6 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e07b      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d034      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x1c8>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d130      	bne.n	8001fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fa3f 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e04d      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d90e      	bls.n	8001fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fbeb 	bl	8002798 <I2C_TransferConfig>
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fbda 	bl	8002798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d19e      	bne.n	8001f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 faac 	bl	8002550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e01a      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_I2C_Mem_Write+0x224>)
 8002016:	400b      	ands	r3, r1
 8002018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	fe00e800 	.word	0xfe00e800

08002044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	460b      	mov	r3, r1
 8002058:	813b      	strh	r3, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 80fd 	bne.w	8002266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_I2C_Mem_Read+0x34>
 8002072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0f1      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Mem_Read+0x4e>
 800208e:	2302      	movs	r3, #2
 8002090:	e0ea      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800209a:	f7ff fb6b 	bl	8001774 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2319      	movs	r3, #25
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f9af 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d5      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2222      	movs	r2, #34	@ 0x22
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020e4:	88f8      	ldrh	r0, [r7, #6]
 80020e6:	893a      	ldrh	r2, [r7, #8]
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4603      	mov	r3, r0
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f913 	bl	8002320 <I2C_RequestMemoryRead>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0ad      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2bff      	cmp	r3, #255	@ 0xff
 8002114:	d90e      	bls.n	8002134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	b2da      	uxtb	r2, r3
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	4b52      	ldr	r3, [pc, #328]	@ (8002270 <HAL_I2C_Mem_Read+0x22c>)
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fb33 	bl	8002798 <I2C_TransferConfig>
 8002132:	e00f      	b.n	8002154 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <HAL_I2C_Mem_Read+0x22c>)
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fb22 	bl	8002798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	2200      	movs	r2, #0
 800215c:	2104      	movs	r1, #4
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f956 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07c      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d034      	beq.n	8002214 <HAL_I2C_Mem_Read+0x1d0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d130      	bne.n	8002214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	2200      	movs	r2, #0
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f927 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e04d      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2bff      	cmp	r3, #255	@ 0xff
 80021d4:	d90e      	bls.n	80021f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fad3 	bl	8002798 <I2C_TransferConfig>
 80021f2:	e00f      	b.n	8002214 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002202:	b2da      	uxtb	r2, r3
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fac2 	bl	8002798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d19a      	bne.n	8002154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f994 	bl	8002550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e01a      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2220      	movs	r2, #32
 8002238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_I2C_Mem_Read+0x230>)
 8002246:	400b      	ands	r3, r1
 8002248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
  }
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	80002400 	.word	0x80002400
 8002274:	fe00e800 	.word	0xfe00e800

08002278 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	460b      	mov	r3, r1
 800228c:	813b      	strh	r3, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	4b20      	ldr	r3, [pc, #128]	@ (800231c <I2C_RequestMemoryWrite+0xa4>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fa79 	bl	8002798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	69b9      	ldr	r1, [r7, #24]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f909 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02c      	b.n	8002314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80022ca:	e015      	b.n	80022f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8ef 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e012      	b.n	8002314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2200      	movs	r2, #0
 8002300:	2180      	movs	r1, #128	@ 0x80
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f884 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	80002000 	.word	0x80002000

08002320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	460b      	mov	r3, r1
 8002334:	813b      	strh	r3, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <I2C_RequestMemoryRead+0xa4>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fa26 	bl	8002798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f8b6 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e02c      	b.n	80023ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002366:	893b      	ldrh	r3, [r7, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002370:	e015      	b.n	800239e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002372:	893b      	ldrh	r3, [r7, #8]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f89c 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e012      	b.n	80023ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002394:	893b      	ldrh	r3, [r7, #8]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2140      	movs	r1, #64	@ 0x40
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f831 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	80002000 	.word	0x80002000

080023c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	619a      	str	r2, [r3, #24]
  }
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e03b      	b.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f8d6 	bl	80025d8 <I2C_IsErrorOccurred>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e041      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d02d      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	f7ff f999 	bl	8001774 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <I2C_WaitOnFlagUntilTimeout+0x44>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d122      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	429a      	cmp	r2, r3
 8002470:	d113      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0b4      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ce:	e033      	b.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f87f 	bl	80025d8 <I2C_IsErrorOccurred>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e031      	b.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d025      	beq.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7ff f942 	bl	8001774 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11a      	bne.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d013      	beq.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e007      	b.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d1c4      	bne.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255c:	e02f      	b.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f838 	bl	80025d8 <I2C_IsErrorOccurred>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e02d      	b.n	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff f8ff 	bl	8001774 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11a      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d013      	beq.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e007      	b.n	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d1c8      	bne.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b00      	cmp	r3, #0
 8002602:	d068      	beq.n	80026d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800260c:	e049      	b.n	80026a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d045      	beq.n	80026a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002616:	f7ff f8ad 	bl	8001774 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <I2C_IsErrorOccurred+0x54>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d13a      	bne.n	80026a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800263e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800264a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800264e:	d121      	bne.n	8002694 <I2C_IsErrorOccurred+0xbc>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002656:	d01d      	beq.n	8002694 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b20      	cmp	r3, #32
 800265c:	d01a      	beq.n	8002694 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800266c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800266e:	f7ff f881 	bl	8001774 <HAL_GetTick>
 8002672:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	e00e      	b.n	8002694 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002676:	f7ff f87d 	bl	8001774 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b19      	cmp	r3, #25
 8002682:	d907      	bls.n	8002694 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f043 0320 	orr.w	r3, r3, #32
 800268a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002692:	e006      	b.n	80026a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d1e9      	bne.n	8002676 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d003      	beq.n	80026b8 <I2C_IsErrorOccurred+0xe0>
 80026b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0aa      	beq.n	800260e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2220      	movs	r2, #32
 80026c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800271a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fe3b 	bl	80023c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <I2C_IsErrorOccurred+0x1bc>)
 800275e:	400b      	ands	r3, r1
 8002760:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800278a:	4618      	mov	r0, r3
 800278c:	3728      	adds	r7, #40	@ 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	4613      	mov	r3, r2
 80027a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b0:	7a7b      	ldrb	r3, [r7, #9]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	0d5b      	lsrs	r3, r3, #21
 80027d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <I2C_TransferConfig+0x60>)
 80027d8:	430b      	orrs	r3, r1
 80027da:	43db      	mvns	r3, r3
 80027dc:	ea02 0103 	and.w	r1, r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	03ff63ff 	.word	0x03ff63ff

080027fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	d138      	bne.n	8002884 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800281c:	2302      	movs	r3, #2
 800281e:	e032      	b.n	8002886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	@ 0x24
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800284e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d139      	bne.n	800291c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e033      	b.n	800291e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2224      	movs	r2, #36	@ 0x24
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002932:	af00      	add	r7, sp, #0
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800293c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f001 b83a 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002956:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 816f 	beq.w	8002c46 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002968:	4bb5      	ldr	r3, [pc, #724]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002974:	4bb2      	ldr	r3, [pc, #712]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d15c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x10e>
 8002980:	4baf      	ldr	r3, [pc, #700]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800298c:	d155      	bne.n	8002a3a <HAL_RCC_OscConfig+0x10e>
 800298e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002992:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_OscConfig+0x94>
 80029ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e015      	b.n	80029ec <HAL_RCC_OscConfig+0xc0>
 80029c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80029d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029e8:	4b95      	ldr	r3, [pc, #596]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029f0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80029f4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002a00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8111 	beq.w	8002c44 <HAL_RCC_OscConfig+0x318>
 8002a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8108 	bne.w	8002c44 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f000 bfc6 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12e>
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7b      	ldr	r2, [pc, #492]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_OscConfig+0x19c>
 8002a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x158>
 8002a6a:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a74      	ldr	r2, [pc, #464]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b72      	ldr	r3, [pc, #456]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a71      	ldr	r2, [pc, #452]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e021      	b.n	8002ac8 <HAL_RCC_OscConfig+0x19c>
 8002a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x184>
 8002a96:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a69      	ldr	r2, [pc, #420]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a66      	ldr	r2, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x19c>
 8002ab0:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a62      	ldr	r2, [pc, #392]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b60      	ldr	r3, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d059      	beq.n	8002b8c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fe4c 	bl	8001774 <HAL_GetTick>
 8002adc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fe47 	bl	8001774 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d902      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	f000 bf67 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 8002af8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002afc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002b0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0x1fe>
 8002b24:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x22a>
 8002b2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b42:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b46:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b52:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b5a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002b5e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002b62:	fa92 f2a2 	rbit	r2, r2
 8002b66:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002b6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ab      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1b6>
 8002b8a:	e05c      	b.n	8002c46 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdf2 	bl	8001774 <HAL_GetTick>
 8002b90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b96:	f7fe fded 	bl	8001774 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d902      	bls.n	8002bac <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	f000 bf0d 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 8002bac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bb0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002bc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_OscConfig+0x2b2>
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x2de>
 8002bde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002bfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_RCC_OscConfig+0x314>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c0e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002c12:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002c16:	fa92 f2a2 	rbit	r2, r2
 8002c1a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002c1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c22:	fab2 f282 	clz	r2, r2
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f042 0220 	orr.w	r2, r2, #32
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	f002 021f 	and.w	r2, r2, #31
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f202 	lsl.w	r2, r1, r2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ab      	bne.n	8002b96 <HAL_RCC_OscConfig+0x26a>
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_OscConfig+0x31a>
 8002c40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 817f 	beq.w	8002f5a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c5c:	4ba7      	ldr	r3, [pc, #668]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c68:	4ba4      	ldr	r3, [pc, #656]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d173      	bne.n	8002d5c <HAL_RCC_OscConfig+0x430>
 8002c74:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c80:	d16c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x430>
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002c94:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x386>
 8002cac:	4b93      	ldr	r3, [pc, #588]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0x3ae>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cd6:	4b89      	ldr	r3, [pc, #548]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002ce0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002cec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f042 0220 	orr.w	r2, r2, #32
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f002 021f 	and.w	r2, r2, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3f6>
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d002      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f000 be52 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	21f8      	movs	r1, #248	@ 0xf8
 8002d38:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002d40:	fa91 f1a1 	rbit	r1, r1
 8002d44:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002d48:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d4c:	fab1 f181 	clz	r1, r1
 8002d50:	b2c9      	uxtb	r1, r1
 8002d52:	408b      	lsls	r3, r1
 8002d54:	4969      	ldr	r1, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e0fe      	b.n	8002f5a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8088 	beq.w	8002e7e <HAL_RCC_OscConfig+0x552>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002d80:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	2301      	movs	r3, #1
 8002d98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fceb 	bl	8001774 <HAL_GetTick>
 8002d9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da4:	f7fe fce6 	bl	8001774 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d902      	bls.n	8002dba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	f000 be06 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002dcc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_RCC_OscConfig+0x4be>
 8002de4:	4b45      	ldr	r3, [pc, #276]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	e013      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e6>
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e02:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	2202      	movs	r2, #2
 8002e14:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002e18:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002e1c:	fa92 f2a2 	rbit	r2, r2
 8002e20:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002e24:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f042 0220 	orr.w	r2, r2, #32
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f002 021f 	and.w	r2, r2, #31
 8002e38:	2101      	movs	r1, #1
 8002e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0af      	beq.n	8002da4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	21f8      	movs	r1, #248	@ 0xf8
 8002e5a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002e62:	fa91 f1a1 	rbit	r1, r1
 8002e66:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002e6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e6e:	fab1 f181 	clz	r1, r1
 8002e72:	b2c9      	uxtb	r1, r1
 8002e74:	408b      	lsls	r3, r1
 8002e76:	4921      	ldr	r1, [pc, #132]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e06d      	b.n	8002f5a <HAL_RCC_OscConfig+0x62e>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002e90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fc63 	bl	8001774 <HAL_GetTick>
 8002eae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fc5e 	bl	8001774 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d902      	bls.n	8002eca <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	f000 bd7e 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002edc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5d4>
 8002ef4:	4b01      	ldr	r3, [pc, #4]	@ (8002efc <HAL_RCC_OscConfig+0x5d0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e016      	b.n	8002f28 <HAL_RCC_OscConfig+0x5fc>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f24:	4bbf      	ldr	r3, [pc, #764]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002f2e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ac      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8113 	beq.w	8003196 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d07c      	beq.n	800307a <HAL_RCC_OscConfig+0x74e>
 8002f80:	2301      	movs	r3, #1
 8002f82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4ba2      	ldr	r3, [pc, #648]	@ (8003228 <HAL_RCC_OscConfig+0x8fc>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fbe3 	bl	8001774 <HAL_GetTick>
 8002fae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fbde 	bl	8001774 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	f000 bcfe 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003024:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003028:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b7e      	ldr	r3, [pc, #504]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 800302c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003036:	2102      	movs	r1, #2
 8003038:	6019      	str	r1, [r3, #0]
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f1a3 	rbit	r1, r3
 8003048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003050:	6019      	str	r1, [r3, #0]
  return result;
 8003052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003056:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d09d      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x688>
 8003078:	e08d      	b.n	8003196 <HAL_RCC_OscConfig+0x86a>
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003098:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <HAL_RCC_OscConfig+0x8fc>)
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	461a      	mov	r2, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7fe fb5a 	bl	8001774 <HAL_GetTick>
 80030c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fb55 	bl	8001774 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f000 bc75 	b.w	80039c6 <HAL_RCC_OscConfig+0x109a>
 80030dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003110:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003128:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800312c:	2202      	movs	r2, #2
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003134:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003142:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003146:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b36      	ldr	r3, [pc, #216]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 800314a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003150:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003154:	2102      	movs	r1, #2
 8003156:	6019      	str	r1, [r3, #0]
 8003158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f1a3 	rbit	r1, r3
 8003166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800316a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800316e:	6019      	str	r1, [r3, #0]
  return result;
 8003170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003174:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d197      	bne.n	80030c6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 81a5 	beq.w	80034f6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]
 80031ca:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <HAL_RCC_OscConfig+0x8f8>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_RCC_OscConfig+0x900>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d121      	bne.n	800323c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <HAL_RCC_OscConfig+0x900>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <HAL_RCC_OscConfig+0x900>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003202:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003204:	f7fe fab6 	bl	8001774 <HAL_GetTick>
 8003208:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e010      	b.n	8003230 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fab1 	bl	8001774 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d908      	bls.n	8003230 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e3d1      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	10908120 	.word	0x10908120
 800322c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b8d      	ldr	r3, [pc, #564]	@ (8003468 <HAL_RCC_OscConfig+0xb3c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0e8      	beq.n	800320e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003240:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x92e>
 800324c:	4b87      	ldr	r3, [pc, #540]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a86      	ldr	r2, [pc, #536]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e035      	b.n	80032c6 <HAL_RCC_OscConfig+0x99a>
 800325a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x958>
 800326a:	4b80      	ldr	r3, [pc, #512]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a7f      	ldr	r2, [pc, #508]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b7d      	ldr	r3, [pc, #500]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	e020      	b.n	80032c6 <HAL_RCC_OscConfig+0x99a>
 8003284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003288:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x982>
 8003294:	4b75      	ldr	r3, [pc, #468]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a74      	ldr	r2, [pc, #464]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6213      	str	r3, [r2, #32]
 80032a0:	4b72      	ldr	r3, [pc, #456]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a71      	ldr	r2, [pc, #452]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x99a>
 80032ae:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4a6e      	ldr	r2, [pc, #440]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6213      	str	r3, [r2, #32]
 80032ba:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a6b      	ldr	r2, [pc, #428]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8081 	beq.w	80033da <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fe fa4c 	bl	8001774 <HAL_GetTick>
 80032dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fa47 	bl	8001774 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e365      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 80032fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003322:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003340:	601a      	str	r2, [r3, #0]
  return result;
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800334a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0xa3a>
 8003360:	4b42      	ldr	r3, [pc, #264]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	e013      	b.n	800338e <HAL_RCC_OscConfig+0xa62>
 8003366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800336a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003376:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003384:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003392:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003396:	2102      	movs	r1, #2
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800339e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fa92 f1a2 	rbit	r1, r2
 80033a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033ac:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80033b0:	6011      	str	r1, [r2, #0]
  return result;
 80033b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033b6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d084      	beq.n	80032e2 <HAL_RCC_OscConfig+0x9b6>
 80033d8:	e083      	b.n	80034e2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe f9cb 	bl	8001774 <HAL_GetTick>
 80033de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe f9c6 	bl	8001774 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e2e4      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 80033fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003400:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800341a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003428:	2202      	movs	r2, #2
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003430:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003448:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800344c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0xb44>
 8003462:	4b02      	ldr	r3, [pc, #8]	@ (800346c <HAL_RCC_OscConfig+0xb40>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	e017      	b.n	8003498 <HAL_RCC_OscConfig+0xb6c>
 8003468:	40007000 	.word	0x40007000
 800346c:	40021000 	.word	0x40021000
 8003470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003474:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003480:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	4bb3      	ldr	r3, [pc, #716]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800349c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034a0:	2102      	movs	r1, #2
 80034a2:	6011      	str	r1, [r2, #0]
 80034a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	fa92 f1a2 	rbit	r1, r2
 80034b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034b6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80034ba:	6011      	str	r1, [r2, #0]
  return result;
 80034bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034c0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f002 021f 	and.w	r2, r2, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d180      	bne.n	80033e4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4b9e      	ldr	r3, [pc, #632]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4a9d      	ldr	r2, [pc, #628]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 825e 	beq.w	80039c4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003508:	4b96      	ldr	r3, [pc, #600]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	f000 821f 	beq.w	8003954 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	f040 8170 	bne.w	8003808 <HAL_RCC_OscConfig+0xedc>
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003548:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800354c:	601a      	str	r2, [r3, #0]
  return result;
 800354e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003552:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003556:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003562:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	461a      	mov	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe f901 	bl	8001774 <HAL_GetTick>
 8003572:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003576:	e009      	b.n	800358c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f8fc 	bl	8001774 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e21c      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 800358c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003590:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035b0:	601a      	str	r2, [r3, #0]
  return result;
 80035b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_OscConfig+0xcaa>
 80035d0:	4b64      	ldr	r3, [pc, #400]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	e027      	b.n	8003626 <HAL_RCC_OscConfig+0xcfa>
 80035d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035da:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003600:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	4b50      	ldr	r3, [pc, #320]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800362a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800362e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003632:	6011      	str	r1, [r2, #0]
 8003634:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003638:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	fa92 f1a2 	rbit	r1, r2
 8003642:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003646:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800364a:	6011      	str	r1, [r2, #0]
  return result;
 800364c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003650:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d182      	bne.n	8003578 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	4b3c      	ldr	r3, [pc, #240]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800367e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	4937      	ldr	r1, [pc, #220]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 8003688:	4313      	orrs	r3, r2
 800368a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800368c:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003698:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a19      	ldr	r1, [r3, #32]
 80036a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	492d      	ldr	r1, [pc, #180]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036d8:	601a      	str	r2, [r3, #0]
  return result;
 80036da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036e2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	461a      	mov	r2, r3
 80036f6:	2301      	movs	r3, #1
 80036f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe f83b 	bl	8001774 <HAL_GetTick>
 80036fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe f836 	bl	8001774 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e156      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 8003718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800372a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fa93 f2a3 	rbit	r2, r3
 8003734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003738:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800373c:	601a      	str	r2, [r3, #0]
  return result;
 800373e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003742:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003746:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0xe3c>
 800375c:	4b01      	ldr	r3, [pc, #4]	@ (8003764 <HAL_RCC_OscConfig+0xe38>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	e02a      	b.n	80037b8 <HAL_RCC_OscConfig+0xe8c>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003792:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ae:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	4b86      	ldr	r3, [pc, #536]	@ (80039d0 <HAL_RCC_OscConfig+0x10a4>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037ca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	fa92 f1a2 	rbit	r1, r2
 80037d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037d8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037dc:	6011      	str	r1, [r2, #0]
  return result;
 80037de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037e2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f002 021f 	and.w	r2, r2, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f43f af7f 	beq.w	8003704 <HAL_RCC_OscConfig+0xdd8>
 8003806:	e0dd      	b.n	80039c4 <HAL_RCC_OscConfig+0x1098>
 8003808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003810:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003828:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800382c:	601a      	str	r2, [r3, #0]
  return result;
 800382e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003832:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003836:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003842:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fd ff91 	bl	8001774 <HAL_GetTick>
 8003852:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd ff8c 	bl	8001774 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0ac      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003890:	601a      	str	r2, [r3, #0]
  return result;
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800389a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_OscConfig+0xf8a>
 80038b0:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <HAL_RCC_OscConfig+0x10a4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e027      	b.n	8003906 <HAL_RCC_OscConfig+0xfda>
 80038b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ba:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	4b33      	ldr	r3, [pc, #204]	@ (80039d0 <HAL_RCC_OscConfig+0x10a4>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800390a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800390e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003912:	6011      	str	r1, [r2, #0]
 8003914:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003918:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	fa92 f1a2 	rbit	r1, r2
 8003922:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003926:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800392a:	6011      	str	r1, [r2, #0]
  return result;
 800392c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003930:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	fab2 f282 	clz	r2, r2
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f042 0220 	orr.w	r2, r2, #32
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f002 021f 	and.w	r2, r2, #31
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d182      	bne.n	8003858 <HAL_RCC_OscConfig+0xf2c>
 8003952:	e037      	b.n	80039c4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003958:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e02e      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_RCC_OscConfig+0x10a4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003970:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <HAL_RCC_OscConfig+0x10a4>)
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003978:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800397c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003984:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d117      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003990:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003994:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80039a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09e      	sub	sp, #120	@ 0x78
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e162      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b90      	ldr	r3, [pc, #576]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d910      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	498b      	ldr	r1, [pc, #556]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b89      	ldr	r3, [pc, #548]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e14a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b82      	ldr	r3, [pc, #520]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	497f      	ldr	r1, [pc, #508]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80dc 	beq.w	8003c00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d13c      	bne.n	8003aca <HAL_RCC_ClockConfig+0xf6>
 8003a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xa6>
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e00f      	b.n	8003a9a <HAL_RCC_ClockConfig+0xc6>
 8003a7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a96:	4b67      	ldr	r3, [pc, #412]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003aa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aa2:	fa92 f2a2 	rbit	r2, r2
 8003aa6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aaa:	fab2 f282 	clz	r2, r2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f042 0220 	orr.w	r2, r2, #32
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f002 021f 	and.w	r2, r2, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d17b      	bne.n	8003bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0f3      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d13c      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x178>
 8003ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_ClockConfig+0x128>
 8003af6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e00f      	b.n	8003b1c <HAL_RCC_ClockConfig+0x148>
 8003afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b18:	4b46      	ldr	r3, [pc, #280]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b20:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b24:	fa92 f2a2 	rbit	r2, r2
 8003b28:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f042 0220 	orr.w	r2, r2, #32
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f002 021f 	and.w	r2, r2, #31
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13a      	bne.n	8003bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b2      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d102      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x1a0>
 8003b6e:	4b31      	ldr	r3, [pc, #196]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	e00d      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1bc>
 8003b74:	2302      	movs	r3, #2
 8003b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b80:	2302      	movs	r3, #2
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	2202      	movs	r2, #2
 8003b92:	61ba      	str	r2, [r7, #24]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	fa92 f2a2 	rbit	r2, r2
 8003b9a:	617a      	str	r2, [r7, #20]
  return result;
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f002 021f 	and.w	r2, r2, #31
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e079      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	491a      	ldr	r1, [pc, #104]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fdd0 	bl	8001774 <HAL_GetTick>
 8003bd4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7fd fdcc 	bl	8001774 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e061      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b11      	ldr	r3, [pc, #68]	@ (8003c34 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d214      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4906      	ldr	r1, [pc, #24]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <HAL_RCC_ClockConfig+0x25c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e040      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x2de>
 8003c30:	40022000 	.word	0x40022000
 8003c34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_RCC_ClockConfig+0x2e8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <HAL_RCC_ClockConfig+0x2e8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_RCC_ClockConfig+0x2e8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4912      	ldr	r1, [pc, #72]	@ (8003cbc <HAL_RCC_ClockConfig+0x2e8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c76:	f000 f829 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <HAL_RCC_ClockConfig+0x2e8>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c84:	22f0      	movs	r2, #240	@ 0xf0
 8003c86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	fa92 f2a2 	rbit	r2, r2
 8003c8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	40d3      	lsrs	r3, r2
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <HAL_RCC_ClockConfig+0x2ec>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fd1e 	bl	80016ec <HAL_InitTick>
  
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3778      	adds	r7, #120	@ 0x78
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08004b3c 	.word	0x08004b3c
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x30>
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x36>
 8003cfa:	e029      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cfe:	613b      	str	r3, [r7, #16]
      break;
 8003d00:	e029      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0c9b      	lsrs	r3, r3, #18
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d0c:	5cd3      	ldrb	r3, [r2, r3]
 8003d0e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d10:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d28:	4a0f      	ldr	r2, [pc, #60]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e007      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	613b      	str	r3, [r7, #16]
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d52:	613b      	str	r3, [r7, #16]
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	693b      	ldr	r3, [r7, #16]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40021000 	.word	0x40021000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	08004b54 	.word	0x08004b54
 8003d70:	08004b64 	.word	0x08004b64

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000000 	.word	0x20000000

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d92:	f7ff ffef 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d96:	4601      	mov	r1, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003da0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003da4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	603a      	str	r2, [r7, #0]
  return result;
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	40d3      	lsrs	r3, r2
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08004b4c 	.word	0x08004b4c

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dd6:	f7ff ffcd 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003de4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003de8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	fa92 f2a2 	rbit	r2, r2
 8003df0:	603a      	str	r2, [r7, #0]
  return result;
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	fab2 f282 	clz	r2, r2
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	40d3      	lsrs	r3, r2
 8003dfc:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08004b4c 	.word	0x08004b4c

08003e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b092      	sub	sp, #72	@ 0x48
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80d4 	beq.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e38:	4b4e      	ldr	r3, [pc, #312]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10e      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	61d3      	str	r3, [r2, #28]
 8003e50:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b45      	ldr	r3, [pc, #276]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6e:	4b42      	ldr	r3, [pc, #264]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a41      	ldr	r2, [pc, #260]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fc7b 	bl	8001774 <HAL_GetTick>
 8003e7e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	e008      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e82:	f7fd fc77 	bl	8001774 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1d6      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea0:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8084 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d07c      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f12:	4a18      	ldr	r2, [pc, #96]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fd fc27 	bl	8001774 <HAL_GetTick>
 8003f26:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fc23 	bl	8001774 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e180      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f40:	2302      	movs	r3, #2
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	61fb      	str	r3, [r7, #28]
  return result;
 8003f58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d108      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f6e:	4b01      	ldr	r3, [pc, #4]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	e00d      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	10908100 	.word	0x10908100
 8003f80:	2302      	movs	r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	2202      	movs	r2, #2
 8003f92:	613a      	str	r2, [r7, #16]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	fa92 f2a2 	rbit	r2, r2
 8003f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	fab2 f282 	clz	r2, r2
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f002 021f 	and.w	r2, r2, #31
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0b7      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fba:	4b8f      	ldr	r3, [pc, #572]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	498c      	ldr	r1, [pc, #560]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4b88      	ldr	r3, [pc, #544]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4a87      	ldr	r2, [pc, #540]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fec:	4b82      	ldr	r3, [pc, #520]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	497f      	ldr	r1, [pc, #508]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800400a:	4b7b      	ldr	r3, [pc, #492]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4978      	ldr	r1, [pc, #480]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004028:	4b73      	ldr	r3, [pc, #460]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	4970      	ldr	r1, [pc, #448]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004046:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	f023 0210 	bic.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4969      	ldr	r1, [pc, #420]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004064:	4b64      	ldr	r3, [pc, #400]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	4961      	ldr	r1, [pc, #388]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004082:	4b5d      	ldr	r3, [pc, #372]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f023 0220 	bic.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	495a      	ldr	r1, [pc, #360]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a0:	4b55      	ldr	r3, [pc, #340]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	4952      	ldr	r1, [pc, #328]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040be:	4b4e      	ldr	r3, [pc, #312]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	494b      	ldr	r1, [pc, #300]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040dc:	4b46      	ldr	r3, [pc, #280]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4943      	ldr	r1, [pc, #268]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040fa:	4b3f      	ldr	r3, [pc, #252]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	493c      	ldr	r1, [pc, #240]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004118:	4b37      	ldr	r3, [pc, #220]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	4934      	ldr	r1, [pc, #208]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004136:	4b30      	ldr	r3, [pc, #192]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	492d      	ldr	r1, [pc, #180]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004154:	4b28      	ldr	r3, [pc, #160]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	4925      	ldr	r1, [pc, #148]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004172:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	491e      	ldr	r1, [pc, #120]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004190:	4b19      	ldr	r3, [pc, #100]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	4916      	ldr	r1, [pc, #88]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80041ae:	4b12      	ldr	r3, [pc, #72]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	490f      	ldr	r1, [pc, #60]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	4907      	ldr	r1, [pc, #28]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00c      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041ea:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fe:	4913      	ldr	r1, [pc, #76]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004200:	4313      	orrs	r3, r2
 8004202:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421c:	490b      	ldr	r1, [pc, #44]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800421e:	4313      	orrs	r3, r2
 8004220:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800422e:	4b07      	ldr	r3, [pc, #28]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	4904      	ldr	r1, [pc, #16]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800423c:	4313      	orrs	r3, r2
 800423e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3748      	adds	r7, #72	@ 0x48
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e040      	b.n	80042e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd f976 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9fc 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f825 	bl	80042ec <UART_SetConfig>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e01b      	b.n	80042e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa7b 	bl	80047d8 <UART_CheckIdleState>
 80042e2:	4603      	mov	r3, r0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b92      	ldr	r3, [pc, #584]	@ (8004560 <UART_SetConfig+0x274>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	430b      	orrs	r3, r1
 8004322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a80      	ldr	r2, [pc, #512]	@ (8004564 <UART_SetConfig+0x278>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d120      	bne.n	80043aa <UART_SetConfig+0xbe>
 8004368:	4b7f      	ldr	r3, [pc, #508]	@ (8004568 <UART_SetConfig+0x27c>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b03      	cmp	r3, #3
 8004372:	d817      	bhi.n	80043a4 <UART_SetConfig+0xb8>
 8004374:	a201      	add	r2, pc, #4	@ (adr r2, 800437c <UART_SetConfig+0x90>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004399 	.word	0x08004399
 8004384:	0800439f 	.word	0x0800439f
 8004388:	08004393 	.word	0x08004393
 800438c:	2301      	movs	r3, #1
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e0b5      	b.n	80044fe <UART_SetConfig+0x212>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e0b2      	b.n	80044fe <UART_SetConfig+0x212>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e0af      	b.n	80044fe <UART_SetConfig+0x212>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e0ac      	b.n	80044fe <UART_SetConfig+0x212>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e0a9      	b.n	80044fe <UART_SetConfig+0x212>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6f      	ldr	r2, [pc, #444]	@ (800456c <UART_SetConfig+0x280>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d124      	bne.n	80043fe <UART_SetConfig+0x112>
 80043b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004568 <UART_SetConfig+0x27c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c0:	d011      	beq.n	80043e6 <UART_SetConfig+0xfa>
 80043c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c6:	d817      	bhi.n	80043f8 <UART_SetConfig+0x10c>
 80043c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043cc:	d011      	beq.n	80043f2 <UART_SetConfig+0x106>
 80043ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d2:	d811      	bhi.n	80043f8 <UART_SetConfig+0x10c>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <UART_SetConfig+0xf4>
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043dc:	d006      	beq.n	80043ec <UART_SetConfig+0x100>
 80043de:	e00b      	b.n	80043f8 <UART_SetConfig+0x10c>
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e08b      	b.n	80044fe <UART_SetConfig+0x212>
 80043e6:	2302      	movs	r3, #2
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e088      	b.n	80044fe <UART_SetConfig+0x212>
 80043ec:	2304      	movs	r3, #4
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e085      	b.n	80044fe <UART_SetConfig+0x212>
 80043f2:	2308      	movs	r3, #8
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e082      	b.n	80044fe <UART_SetConfig+0x212>
 80043f8:	2310      	movs	r3, #16
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e07f      	b.n	80044fe <UART_SetConfig+0x212>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a5b      	ldr	r2, [pc, #364]	@ (8004570 <UART_SetConfig+0x284>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d124      	bne.n	8004452 <UART_SetConfig+0x166>
 8004408:	4b57      	ldr	r3, [pc, #348]	@ (8004568 <UART_SetConfig+0x27c>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004410:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004414:	d011      	beq.n	800443a <UART_SetConfig+0x14e>
 8004416:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800441a:	d817      	bhi.n	800444c <UART_SetConfig+0x160>
 800441c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004420:	d011      	beq.n	8004446 <UART_SetConfig+0x15a>
 8004422:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004426:	d811      	bhi.n	800444c <UART_SetConfig+0x160>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x148>
 800442c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004430:	d006      	beq.n	8004440 <UART_SetConfig+0x154>
 8004432:	e00b      	b.n	800444c <UART_SetConfig+0x160>
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e061      	b.n	80044fe <UART_SetConfig+0x212>
 800443a:	2302      	movs	r3, #2
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e05e      	b.n	80044fe <UART_SetConfig+0x212>
 8004440:	2304      	movs	r3, #4
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e05b      	b.n	80044fe <UART_SetConfig+0x212>
 8004446:	2308      	movs	r3, #8
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e058      	b.n	80044fe <UART_SetConfig+0x212>
 800444c:	2310      	movs	r3, #16
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e055      	b.n	80044fe <UART_SetConfig+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a47      	ldr	r2, [pc, #284]	@ (8004574 <UART_SetConfig+0x288>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d124      	bne.n	80044a6 <UART_SetConfig+0x1ba>
 800445c:	4b42      	ldr	r3, [pc, #264]	@ (8004568 <UART_SetConfig+0x27c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004464:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004468:	d011      	beq.n	800448e <UART_SetConfig+0x1a2>
 800446a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0x1b4>
 8004470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004474:	d011      	beq.n	800449a <UART_SetConfig+0x1ae>
 8004476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800447a:	d811      	bhi.n	80044a0 <UART_SetConfig+0x1b4>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0x19c>
 8004480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x1a8>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x1b4>
 8004488:	2300      	movs	r3, #0
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e037      	b.n	80044fe <UART_SetConfig+0x212>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e034      	b.n	80044fe <UART_SetConfig+0x212>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e031      	b.n	80044fe <UART_SetConfig+0x212>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e02e      	b.n	80044fe <UART_SetConfig+0x212>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e02b      	b.n	80044fe <UART_SetConfig+0x212>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <UART_SetConfig+0x28c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d124      	bne.n	80044fa <UART_SetConfig+0x20e>
 80044b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <UART_SetConfig+0x27c>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044bc:	d011      	beq.n	80044e2 <UART_SetConfig+0x1f6>
 80044be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044c2:	d817      	bhi.n	80044f4 <UART_SetConfig+0x208>
 80044c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044c8:	d011      	beq.n	80044ee <UART_SetConfig+0x202>
 80044ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ce:	d811      	bhi.n	80044f4 <UART_SetConfig+0x208>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <UART_SetConfig+0x1f0>
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d8:	d006      	beq.n	80044e8 <UART_SetConfig+0x1fc>
 80044da:	e00b      	b.n	80044f4 <UART_SetConfig+0x208>
 80044dc:	2300      	movs	r3, #0
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e00d      	b.n	80044fe <UART_SetConfig+0x212>
 80044e2:	2302      	movs	r3, #2
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e00a      	b.n	80044fe <UART_SetConfig+0x212>
 80044e8:	2304      	movs	r3, #4
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e007      	b.n	80044fe <UART_SetConfig+0x212>
 80044ee:	2308      	movs	r3, #8
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e004      	b.n	80044fe <UART_SetConfig+0x212>
 80044f4:	2310      	movs	r3, #16
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e001      	b.n	80044fe <UART_SetConfig+0x212>
 80044fa:	2310      	movs	r3, #16
 80044fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004506:	d16b      	bne.n	80045e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004508:	7ffb      	ldrb	r3, [r7, #31]
 800450a:	2b08      	cmp	r3, #8
 800450c:	d838      	bhi.n	8004580 <UART_SetConfig+0x294>
 800450e:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <UART_SetConfig+0x228>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004539 	.word	0x08004539
 8004518:	08004541 	.word	0x08004541
 800451c:	08004549 	.word	0x08004549
 8004520:	08004581 	.word	0x08004581
 8004524:	0800454f 	.word	0x0800454f
 8004528:	08004581 	.word	0x08004581
 800452c:	08004581 	.word	0x08004581
 8004530:	08004581 	.word	0x08004581
 8004534:	08004557 	.word	0x08004557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	f7ff fc28 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 800453c:	61b8      	str	r0, [r7, #24]
        break;
 800453e:	e024      	b.n	800458a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7ff fc46 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004544:	61b8      	str	r0, [r7, #24]
        break;
 8004546:	e020      	b.n	800458a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <UART_SetConfig+0x290>)
 800454a:	61bb      	str	r3, [r7, #24]
        break;
 800454c:	e01d      	b.n	800458a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7ff fbbd 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8004552:	61b8      	str	r0, [r7, #24]
        break;
 8004554:	e019      	b.n	800458a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455a:	61bb      	str	r3, [r7, #24]
        break;
 800455c:	e015      	b.n	800458a <UART_SetConfig+0x29e>
 800455e:	bf00      	nop
 8004560:	efff69f3 	.word	0xefff69f3
 8004564:	40013800 	.word	0x40013800
 8004568:	40021000 	.word	0x40021000
 800456c:	40004400 	.word	0x40004400
 8004570:	40004800 	.word	0x40004800
 8004574:	40004c00 	.word	0x40004c00
 8004578:	40005000 	.word	0x40005000
 800457c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77bb      	strb	r3, [r7, #30]
        break;
 8004588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d073      	beq.n	8004678 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	005a      	lsls	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	441a      	add	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d916      	bls.n	80045da <UART_SetConfig+0x2ee>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b2:	d212      	bcs.n	80045da <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f023 030f 	bic.w	r3, r3, #15
 80045bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	89fa      	ldrh	r2, [r7, #14]
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	e04e      	b.n	8004678 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	77bb      	strb	r3, [r7, #30]
 80045de:	e04b      	b.n	8004678 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d827      	bhi.n	8004636 <UART_SetConfig+0x34a>
 80045e6:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <UART_SetConfig+0x300>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004621 	.word	0x08004621
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004637 	.word	0x08004637
 8004604:	08004637 	.word	0x08004637
 8004608:	08004637 	.word	0x08004637
 800460c:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7ff fbbc 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8004614:	61b8      	str	r0, [r7, #24]
        break;
 8004616:	e013      	b.n	8004640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004618:	f7ff fbda 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 800461c:	61b8      	str	r0, [r7, #24]
        break;
 800461e:	e00f      	b.n	8004640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <UART_SetConfig+0x3a4>)
 8004622:	61bb      	str	r3, [r7, #24]
        break;
 8004624:	e00c      	b.n	8004640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7ff fb51 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800462a:	61b8      	str	r0, [r7, #24]
        break;
 800462c:	e008      	b.n	8004640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004632:	61bb      	str	r3, [r7, #24]
        break;
 8004634:	e004      	b.n	8004640 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	77bb      	strb	r3, [r7, #30]
        break;
 800463e:	bf00      	nop
    }

    if (pclk != 0U)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	085a      	lsrs	r2, r3, #1
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	441a      	add	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d909      	bls.n	8004674 <UART_SetConfig+0x388>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004666:	d205      	bcs.n	8004674 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e001      	b.n	8004678 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004684:	7fbb      	ldrb	r3, [r7, #30]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	007a1200 	.word	0x007a1200

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b098      	sub	sp, #96	@ 0x60
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fc ffc4 	bl	8001774 <HAL_GetTick>
 80047ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d12e      	bne.n	800485a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f88c 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d021      	beq.n	800485a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482a:	653b      	str	r3, [r7, #80]	@ 0x50
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800483a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e062      	b.n	8004920 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d149      	bne.n	80048fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f856 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03c      	beq.n	80048fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	623b      	str	r3, [r7, #32]
   return(result);
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	617b      	str	r3, [r7, #20]
   return(result);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e011      	b.n	8004920 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3758      	adds	r7, #88	@ 0x58
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e04f      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d04b      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fc ff17 	bl	8001774 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e04e      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d037      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b80      	cmp	r3, #128	@ 0x80
 800496e:	d034      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d031      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d110      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2208      	movs	r2, #8
 800498a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f838 	bl	8004a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2208      	movs	r2, #8
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e029      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b4:	d111      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f81e 	bl	8004a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e00f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0a0      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b095      	sub	sp, #84	@ 0x54
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d118      	bne.n	8004aaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6979      	ldr	r1, [r7, #20]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e6      	bne.n	8004a78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004abe:	bf00      	nop
 8004ac0:	3754      	adds	r7, #84	@ 0x54
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <memset>:
 8004aca:	4402      	add	r2, r0
 8004acc:	4603      	mov	r3, r0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <memset+0xa>
 8004ad2:	4770      	bx	lr
 8004ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad8:	e7f9      	b.n	8004ace <memset+0x4>
	...

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	@ (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	@ (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	@ (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 f818 	bl	8004b24 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08004b74 	.word	0x08004b74
 8004b18:	08004b74 	.word	0x08004b74
 8004b1c:	08004b74 	.word	0x08004b74
 8004b20:	08004b78 	.word	0x08004b78

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
